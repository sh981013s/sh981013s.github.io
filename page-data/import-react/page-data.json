{"componentChunkName":"component---src-templates-post-jsx","path":"/import-react/","result":{"data":{"site":{"siteMetadata":{"title":"hwani.dev"}},"markdownRemark":{"id":"5cd51722-bb20-58ff-ad03-0d4210931109","excerpt":"서론 종종 리액트 공부를 하다보면  문법을 사용할 것이기 때문에  와 같이 리액트를\nimport 해주어야 한다는 말들을 들었다. 하지만 생각해보면 나는 딱히 리액트로 프로젝트를 진행할때, JSX 문법을 사용해야 한다 하더라도 컴포넌트마다 리액트를 import 하는\n행위는 따르지 않고도 문제가 발견되지 않았었다. 본론 이에따라  와  을 통하여 찾아보니, …","html":"<h2>서론</h2>\n<p>종종 리액트 공부를 하다보면 <code class=\"language-text\">JSX</code> 문법을 사용할 것이기 때문에 <code class=\"language-text\">import React from 'react'</code> 와 같이 리액트를\nimport 해주어야 한다는 말들을 들었다.</p>\n<p>하지만 생각해보면 나는 딱히 리액트로 프로젝트를 진행할때, JSX 문법을 사용해야 한다 하더라도 컴포넌트마다 리액트를 import 하는\n행위는 따르지 않고도 문제가 발견되지 않았었다.</p>\n<hr>\n<h2>본론</h2>\n<p>이에따라 <code class=\"language-text\">stack overflow</code> 와 <code class=\"language-text\">구글링</code> 을 통하여 찾아보니, 결국 이는 과거에 행해졌던 일종의 <code class=\"language-text\">관습</code> 이라고 나는 판단하였다.</p>\n<p>리액트 공식문서에 따르면, JSX 를 사용할때 더는 import react 를 하지 않아도 된 이유는 결국 새로운 <code class=\"language-text\">JSX Transform</code> 때문이라고 한다.</p>\n<p>리액트 17버전 부터 새로운 <code class=\"language-text\">JSX Transform</code> 을 사용할 수 있는데,</p>\n<p>이는 React 를 import 하지 않고도 JSX 문법을 사용 가능하게 해주며,</p>\n<p>세팅에 따라서, bundle size 자체를 미세하게 나마 줄여줄 수 있다.</p>\n<h3>이전 방식과의 차이</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello World<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이전의 방식으로는 위와같은 JSX 코드를 컴파일러가 브라우저가 이해할 수 있게 컴파일을 해주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h1\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이를 (Old JSX Transform), 자바스크립트 방식으로 바꾼다면 위와 같은 모양을 띄울 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello World<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> jsx <span class=\"token keyword\">as</span> _jsx <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react/jsx-runtime\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">_jsx</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h1\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> children<span class=\"token operator\">:</span> <span class=\"token string\">\"Hello world\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 <code class=\"language-text\">React 17</code>에 포함되어있는 <code class=\"language-text\">New JSX Transform</code> 으로 인하여, 더는 리액트는 JSX 를 <code class=\"language-text\">React.createElement</code> 로 변환하지 않고, 리액트 패키지 자체의 함수를 불러와 위와같이 작동하게된다.</p>\n<hr>\n<h2>결론</h2>\n<p>리액트 17버전 이전에는, JSX 문법을 사용하기 위하여 React 를 import 했던것은 사실이다.</p>\n<p>하지만, 리액트 17버전에 출시된 NEW JSX Transform 으로 인하여, 기존에 JSX 코드를 React.createElement 로 변환하여 사용하는 방식이 아닌, 자체적으로 리액트 패키지의 엔드포인트로부터 변환하는 함수를 호출하여 변환하기에 리액트 17 버전 이상을 사용한다면, JSX 문법을 사용하기위해 더이상은 React 를 굳이 import 해줄 필요는 없다.</p>","frontmatter":{"title":"importing React 와 JSX 사용의 상관관계","date":"January 02, 2022","update":"January 02, 2022","tags":["React"],"series":null},"fields":{"slug":"/import-react/","readingTime":{"minutes":3.17}}},"seriesList":{"edges":[{"node":{"id":"a3e16011-856b-598c-88ca-ceebc8364f95","fields":{"slug":"/starbucks-menu-1/"},"frontmatter":{"title":"스타벅스 메뉴관리 with vanilla JS"}}},{"node":{"id":"92ebb2fd-e60e-5a93-88dc-ec9c28596843","fields":{"slug":"/baekjoon-1654/"},"frontmatter":{"title":"[BOJ] 1654 랜선 자르기 (Node.js)"}}},{"node":{"id":"b3bae6a0-d405-5d05-a043-d8638b60e890","fields":{"slug":"/vainllajs-registration-form/"},"frontmatter":{"title":"회원가입 폼 with Vanilla JS"}}},{"node":{"id":"104e0e28-4cfe-50ae-b9b8-3fb3dfc3ad04","fields":{"slug":"/movie-seat-booking/"},"frontmatter":{"title":"영화 좌석 선택 with Vanilla JS"}}},{"node":{"id":"e88b46a1-2475-5adc-80e7-55e7e252e9bd","fields":{"slug":"/exchange-rate-calculator/"},"frontmatter":{"title":"환전기 with Vanilla JS"}}},{"node":{"id":"ae0897e7-cc41-5c3a-89df-0273fdcb487e","fields":{"slug":"/custom-video-player/"},"frontmatter":{"title":"비디오 플레이어 with Vanilla JS"}}},{"node":{"id":"24e65c9a-a50e-5145-b39d-6108376629be","fields":{"slug":"/personal-information-list/"},"frontmatter":{"title":"개인자산 체크 with Vanilla JS"}}},{"node":{"id":"5ba84f09-135a-5975-b10f-4bf758e5f32e","fields":{"slug":"/menu-sidebar-modal/"},"frontmatter":{"title":"사이드바, 모달 with Vanilla JS"}}},{"node":{"id":"b1bd56b2-bd16-58f2-a750-2f0ffd138cb8","fields":{"slug":"/connecting-server-client/"},"frontmatter":{"title":"React && Node.js 연결하기"}}},{"node":{"id":"5cd51722-bb20-58ff-ad03-0d4210931109","fields":{"slug":"/import-react/"},"frontmatter":{"title":"importing React 와 JSX 사용의 상관관계"}}},{"node":{"id":"5f1c97cb-0242-5c0b-8037-626e2ee635de","fields":{"slug":"/vsc-react-autoimport/"},"frontmatter":{"title":"VSC 리액트 auto import"}}},{"node":{"id":"e741c309-2360-56d3-af48-f65bfae7253a","fields":{"slug":"/useRef/"},"frontmatter":{"title":"리액트 useRef"}}},{"node":{"id":"aaaedd63-6139-5da1-8196-3098ae216714","fields":{"slug":"/react-debouncing/"},"frontmatter":{"title":"리액트 디바운싱(debouncing)"}}},{"node":{"id":"b4b91b64-56ec-5f6c-8fc3-5f754204f3a0","fields":{"slug":"/react-debugging/"},"frontmatter":{"title":"리액트 크롬 데브툴 디버깅(debugging)"}}},{"node":{"id":"b030ebe6-631d-5927-b411-78b9a3bf9e85","fields":{"slug":"/js-semicolon/"},"frontmatter":{"title":"자바스크립트 내에서의 세미콜론(;) 사용"}}},{"node":{"id":"540e9709-5b2c-5702-af14-f1344e83c064","fields":{"slug":"/js-short-circuit-evaluation/"},"frontmatter":{"title":"자바스크립트 단축 평가"}}},{"node":{"id":"ac4bb014-16a9-5795-b805-28c631aeb58f","fields":{"slug":"/js-const/"},"frontmatter":{"title":"자바스크립트 const(constant) 키워드 에 대한 고찰"}}},{"node":{"id":"2ed793fe-3639-5ada-af50-48c4e4882fce","fields":{"slug":"/js-single-thread/"},"frontmatter":{"title":"싱글스레드인 자바스크립트는 어떻게 비동기 처리를 하는가"}}},{"node":{"id":"83b07909-0921-5c80-8198-093ac91c69c2","fields":{"slug":"/js-indexOf/"},"frontmatter":{"title":"자바스크립트 indexOf() 와 시간 복잡도의 상관관계에 대한 고찰"}}}]},"previous":{"fields":{"slug":"/connecting-server-client/"},"frontmatter":{"title":"React && Node.js 연결하기"}},"next":{"fields":{"slug":"/vsc-react-autoimport/"},"frontmatter":{"title":"VSC 리액트 auto import"}}},"pageContext":{"id":"5cd51722-bb20-58ff-ad03-0d4210931109","series":null,"previousPostId":"b1bd56b2-bd16-58f2-a750-2f0ffd138cb8","nextPostId":"5f1c97cb-0242-5c0b-8037-626e2ee635de"}},"staticQueryHashes":[]}