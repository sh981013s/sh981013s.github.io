{"componentChunkName":"component---src-templates-post-jsx","path":"/starbucks-menu-1/","result":{"data":{"site":{"siteMetadata":{"title":"hwani.dev"}},"markdownRemark":{"id":"a3e16011-856b-598c-88ca-ceebc8364f95","excerpt":"결과물 미리보기  CheckLists 메뉴에 새로운 메뉴를 확인 버튼 또는 엔터키 입력으로 추가한다. 메뉴가 추가되고 나면, input은 빈 값으로 초기화한다. 사용자 입력값이 빈 값이라면 추가되지 않는다. 메뉴의 수정 버튼을 눌러 메뉴 이름 수정할 수 있다. 메뉴 수정시 브라우저에서 제공하는  인터페이스를 활용한다. 메뉴 삭제 버튼을 이용하여 메뉴 삭제…","html":"<h2>결과물 미리보기</h2>\n<p><img src=\"/static/123-aef01429119f9934401c29e13c7507a9.gif\"></p>\n<h2>CheckLists</h2>\n<ul>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" checked disabled> 메뉴에 새로운 메뉴를 확인 버튼 또는 엔터키 입력으로 추가한다.</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> 메뉴가 추가되고 나면, input은 빈 값으로 초기화한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> 사용자 입력값이 빈 값이라면 추가되지 않는다.</li>\n</ul>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" checked disabled> 메뉴의 수정 버튼을 눌러 메뉴 이름 수정할 수 있다.</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> 메뉴 수정시 브라우저에서 제공하는 <code class=\"language-text\">prompt</code> 인터페이스를 활용한다.</li>\n</ul>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" checked disabled> 메뉴 삭제 버튼을 이용하여 메뉴 삭제할 수 있다.</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> 메뉴 삭제시 브라우저에서 제공하는 <code class=\"language-text\">confirm</code> 인터페이스를 활용한다.</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> 총 메뉴 갯수를 count하여 상단에 보여준다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> <a href=\"https://developer.mozilla.org/ko/docs/Web/API/Window/localStorage\">localStorage</a>에 데이터를 저장하여 새로고침해도 데이터가 남아있게 한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> 지점별로 메뉴판을 관리할 수 있게 만든다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> 페이지에 최초로 접근할 때는 국민대 지점 메뉴가 먼저 보이게 한다.</li>\n</ul>\n<hr>\n<h2>왜 했는가?</h2>\n<p>리액트를 공부하며 상태관리에 대해 생각하던 중, 문득 궁금함이 생겼다.</p>\n<p>동적인 <code class=\"language-text\">web application</code> 을 만들기 위해 리액트를 공부중 이지만,</p>\n<p>결국 리액트도 <code class=\"language-text\">javascript library</code> 일뿐일텐데,</p>\n<p>이를 vanilla JS 로 내가 비슷하게라도 흉내내어 리액트 없이 <code class=\"language-text\">동적으로 state 관리</code>란 불가능한것일까..?</p>\n<p>찾아보니, <code class=\"language-text\">localStorage</code> 라는 개념이 존재했고, 이를 사용하여 state 관리를 해보았다.</p>\n<hr>\n<h2>후기</h2>\n<p>결국 구현한건 기본적인 CRUD 일뿐이지만, vanillaJS 를 통해서도 최대한 리액트에서 활용하고 작동하는 방식과</p>\n<p>유사하게 만들어 보려고 노력했었다. 🔥</p>\n<hr>\n<h2>데모링크</h2>\n<p align=\"middle\">\n  <a href=\"https://optimistic-blackwell-8e5882.netlify.app\" target=\"_blank\">🖥️ 데모 링크</a>\n</p>","frontmatter":{"title":"스타벅스 메뉴관리 with vanilla JS","date":"November 21, 2021","update":"November 21, 2021","tags":["VanillaJS"],"series":null},"fields":{"slug":"/starbucks-menu-1/","readingTime":{"minutes":2.365}}},"seriesList":{"edges":[{"node":{"id":"a3e16011-856b-598c-88ca-ceebc8364f95","fields":{"slug":"/starbucks-menu-1/"},"frontmatter":{"title":"스타벅스 메뉴관리 with vanilla JS"}}},{"node":{"id":"92ebb2fd-e60e-5a93-88dc-ec9c28596843","fields":{"slug":"/baekjoon-1654/"},"frontmatter":{"title":"[BOJ] 1654 랜선 자르기 (Node.js)"}}},{"node":{"id":"b3bae6a0-d405-5d05-a043-d8638b60e890","fields":{"slug":"/vainllajs-registration-form/"},"frontmatter":{"title":"회원가입 폼 with Vanilla JS"}}},{"node":{"id":"104e0e28-4cfe-50ae-b9b8-3fb3dfc3ad04","fields":{"slug":"/movie-seat-booking/"},"frontmatter":{"title":"영화 좌석 선택 with Vanilla JS"}}},{"node":{"id":"e88b46a1-2475-5adc-80e7-55e7e252e9bd","fields":{"slug":"/exchange-rate-calculator/"},"frontmatter":{"title":"환전기 with Vanilla JS"}}},{"node":{"id":"ae0897e7-cc41-5c3a-89df-0273fdcb487e","fields":{"slug":"/custom-video-player/"},"frontmatter":{"title":"비디오 플레이어 with Vanilla JS"}}},{"node":{"id":"24e65c9a-a50e-5145-b39d-6108376629be","fields":{"slug":"/personal-information-list/"},"frontmatter":{"title":"개인자산 체크 with Vanilla JS"}}},{"node":{"id":"5ba84f09-135a-5975-b10f-4bf758e5f32e","fields":{"slug":"/menu-sidebar-modal/"},"frontmatter":{"title":"사이드바, 모달 with Vanilla JS"}}},{"node":{"id":"b1bd56b2-bd16-58f2-a750-2f0ffd138cb8","fields":{"slug":"/connecting-server-client/"},"frontmatter":{"title":"React && Node.js 연결하기"}}},{"node":{"id":"5cd51722-bb20-58ff-ad03-0d4210931109","fields":{"slug":"/import-react/"},"frontmatter":{"title":"importing React 와 JSX 사용의 상관관계"}}},{"node":{"id":"5f1c97cb-0242-5c0b-8037-626e2ee635de","fields":{"slug":"/vsc-react-autoimport/"},"frontmatter":{"title":"VSC 리액트 auto import"}}},{"node":{"id":"e741c309-2360-56d3-af48-f65bfae7253a","fields":{"slug":"/useRef/"},"frontmatter":{"title":"리액트 useRef"}}},{"node":{"id":"aaaedd63-6139-5da1-8196-3098ae216714","fields":{"slug":"/react-debouncing/"},"frontmatter":{"title":"리액트 디바운싱(debouncing)"}}},{"node":{"id":"b4b91b64-56ec-5f6c-8fc3-5f754204f3a0","fields":{"slug":"/react-debugging/"},"frontmatter":{"title":"리액트 크롬 데브툴 디버깅(debugging)"}}},{"node":{"id":"b030ebe6-631d-5927-b411-78b9a3bf9e85","fields":{"slug":"/js-semicolon/"},"frontmatter":{"title":"자바스크립트 내에서의 세미콜론(;) 사용"}}},{"node":{"id":"540e9709-5b2c-5702-af14-f1344e83c064","fields":{"slug":"/js-short-circuit-evaluation/"},"frontmatter":{"title":"자바스크립트 단축 평가"}}},{"node":{"id":"ac4bb014-16a9-5795-b805-28c631aeb58f","fields":{"slug":"/js-const/"},"frontmatter":{"title":"자바스크립트 const(constant) 키워드 에 대한 고찰"}}},{"node":{"id":"2ed793fe-3639-5ada-af50-48c4e4882fce","fields":{"slug":"/js-single-thread/"},"frontmatter":{"title":"싱글스레드인 자바스크립트는 어떻게 비동기 처리를 하는가"}}},{"node":{"id":"83b07909-0921-5c80-8198-093ac91c69c2","fields":{"slug":"/js-indexOf/"},"frontmatter":{"title":"자바스크립트 indexOf() 와 시간 복잡도의 상관관계에 대한 고찰"}}}]},"previous":{"fields":{"slug":"/no-global/"},"frontmatter":{"title":"JS - 전역 공간 사용 최소화"}},"next":{"fields":{"slug":"/blog-SEO/"},"frontmatter":{"title":"블로그 SEO"}}},"pageContext":{"id":"a3e16011-856b-598c-88ca-ceebc8364f95","series":null,"previousPostId":"ec9410bb-52dd-553a-b26b-7a01b389e775","nextPostId":"04ff0c91-9cf5-546c-9544-c16d671dd23b"}},"staticQueryHashes":[]}