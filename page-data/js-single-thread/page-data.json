{"componentChunkName":"component---src-templates-post-jsx","path":"/js-single-thread/","result":{"data":{"site":{"siteMetadata":{"title":"hwani.dev"}},"markdownRemark":{"id":"ef98c32c-b112-56b5-8750-2a65f29a76f8","excerpt":"서론 자바스크립트는 하나의  과 하나의  을 가진 \n 이다. 그러므로 당연히 위에서부터 순차적으로 코드를\n실행하고 다음 코드로 넘어가기 전 실행하고 있는 코드를 끝내야만 한다. 맞다.  는 . 허나, 내 머리를 지끈거리게 만든 점은 코르를 작성하다보면 의도적으로 코드를  하는 행위를 \n심심치 않게 해왔지만,  '도대체 어떻게 싱글스레드인  자바스크립트는 …","html":"<h2>서론</h2>\n<p>자바스크립트는 하나의 <code class=\"language-text\">call stack</code> 과 하나의 <code class=\"language-text\">memory heap</code> 을 가진\n<code class=\"language-text\">single threaded language</code> 이다. 그러므로 당연히 위에서부터 순차적으로 코드를\n실행하고 다음 코드로 넘어가기 전 실행하고 있는 코드를 끝내야만 한다. 맞다. <code class=\"language-text\">자바스크립트(js)</code> 는 <code class=\"language-text\">동기적이다(synchronous)</code>.</p>\n<p>허나, 내 머리를 지끈거리게 만든 점은 코르를 작성하다보면 의도적으로 코드를 <code class=\"language-text\">비동기 처리</code> 하는 행위를\n심심치 않게 해왔지만, </p>\n<p>'도대체 어떻게 싱글스레드인  자바스크립트는 코드를 비동기적으로 실행시킬까?' 에서 머리가 복잡해졌다.</p>\n<hr>\n<h2>본론</h2>\n<p>고맙게도 자바스크립트 엔진은(V8, Spidermonkey, JavascriptCore 등등..)은\n이와같은 task 들을 병렬적으로 background 에서 동작시키기 위해 필요한 <code class=\"language-text\">Web API</code> 를 가지고 있다.</p>\n<p>call stack 은 Web API 의 함수들을 인지하고 필요에 의해 브라우저에게 task를 맡긴다.\n맡겨진 task가 끝난 후에는, 브라우저는 해당 task를 다시 반환 후 callback 으로써 다시 스택에 밀어넣는다.</p>\n<p>브라우저 콘솔에서 <code class=\"language-text\">window</code> 를 쳐본다면 ajax calls, 이벤트 리스너, fetch API, setTimeout 등\nWeb API 가 제공하는 모든것들을 확인할 수 있다. 이제 어떻게 자바스크립트가 브라우저에서 <code class=\"language-text\">비동기적으로</code> 동작하는지 예시와 함께 알아보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"second\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"third\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위의 코드를 적어내면</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">first\nthird\n<span class=\"token keyword\">undefined</span>\nsecond</code></pre></div>\n<p>위의 결과가 나온다. 벌써 머리가 어질어질하다. 'first', 'third', 'second' 의 결과가 나와야 하지 않나? 하지만 이는 에러로 인해 해당 결과가 나온것이 아니다. 한줄한줄 추적해보자.</p>\n<ol>\n<li><code class=\"language-text\">console.log(first)</code> 가 처음 스택에 쌓이게 되고 콘솔에 찍힌다. </li>\n<li>엔진은 자바스크립트에서 동작하지 않는 <code class=\"language-text\">setTimeout()</code> 을 발견하고는 비동기적인 처리를 위해 <code class=\"language-text\">Web API</code> 에게 보내버린다.</li>\n<li>2번의 동작을 신경쓰지 않은체 <code class=\"language-text\">console.log(three)</code> 를 스택에 쌓고 실행시킨다. </li>\n<li>자바스크립트의 엔진의 <code class=\"language-text\">event loop</code>이 개입하여 '우리 이제 끝난거야..?' 하고 물어본다.</li>\n<li><code class=\"language-text\">web API</code> 가 '아니? 아직인데? 줄 value 가 없어!' 라고 대답을 하자 디폴트 값인 <code class=\"language-text\">undefined</code> 를 콘솔에 찍는다.</li>\n<li>비동기처리를 하던 task 가 완료 후, callback 으로써 스택에 들어오게 되고, 이는 실행되어 콘솔에 second 를 찍는다.</li>\n</ol>\n<hr>\n<h2>결론</h2>\n<p>결국 내가 생각하던게 어느정도는 맞다. 자바스크립트는 single threaded language 이고, 하나의\n콜스택과 하나의 힙스택을 가지고 있기에 동기적으로 task 를 처리한다. 하지만 이는 브라우저에서 실행될때\nWeb API 라는 녀석을 사용하여 비동기적으로 task 를 처리할 수 있다.</p>","frontmatter":{"title":"싱글스레드인 자바스크립트는 어떻게 비동기 처리를 하는가","date":"January 24, 2022","update":"January 24, 2022","tags":["JavaScript"],"series":null},"fields":{"slug":"/js-single-thread/","readingTime":{"minutes":3.895}}},"seriesList":{"edges":[{"node":{"id":"45bc678e-7703-5acd-aafd-a7c0fa93a80c","fields":{"slug":"/baekjoon-1654/"},"frontmatter":{"title":"[BOJ] 1654 랜선 자르기 (Node.js)"}}},{"node":{"id":"028e9080-86df-53bb-a1e9-dbc398328921","fields":{"slug":"/vainllajs-registration-form/"},"frontmatter":{"title":"회원가입 폼 with Vanilla JS"}}},{"node":{"id":"d736c4dd-4d23-5481-97d4-a12694b7fd0c","fields":{"slug":"/movie-seat-booking/"},"frontmatter":{"title":"영화 좌석 선택 with Vanilla JS"}}},{"node":{"id":"950ab322-20a3-506d-be98-95c57b9d5e7f","fields":{"slug":"/exchange-rate-calculator/"},"frontmatter":{"title":"환전기 with Vanilla JS"}}},{"node":{"id":"bfe47c8d-2f18-5cc3-8501-86e865256557","fields":{"slug":"/custom-video-player/"},"frontmatter":{"title":"비디오 플레이어 with Vanilla JS"}}},{"node":{"id":"4b8a65e9-78c3-54b6-8fce-8e518749024c","fields":{"slug":"/personal-information-list/"},"frontmatter":{"title":"개인자산 체크 with Vanilla JS"}}},{"node":{"id":"364ae05f-101b-5720-9ec6-d692d55e0062","fields":{"slug":"/menu-sidebar-modal/"},"frontmatter":{"title":"사이드바, 모달 with Vanilla JS"}}},{"node":{"id":"5abf51b6-6ecd-5d96-879f-5777a606bf0a","fields":{"slug":"/connecting-server-client/"},"frontmatter":{"title":"React && Node.js 연결하기"}}},{"node":{"id":"ac1bef97-c59e-5beb-955b-d8c6e8e742c8","fields":{"slug":"/import-react/"},"frontmatter":{"title":"importing React 와 JSX 사용의 상관관계"}}},{"node":{"id":"2a9c97e2-a6bc-515d-9f47-b1248cf5f9cf","fields":{"slug":"/vsc-react-autoimport/"},"frontmatter":{"title":"VSC 리액트 auto import"}}},{"node":{"id":"bf55c7ac-a772-56fa-b74d-2a0ae1afd342","fields":{"slug":"/useRef/"},"frontmatter":{"title":"리액트 useRef"}}},{"node":{"id":"376677fe-0b5d-57d7-9b3e-95aeb604a67c","fields":{"slug":"/react-debouncing/"},"frontmatter":{"title":"리액트 디바운싱(debouncing)"}}},{"node":{"id":"de4aef09-b0e7-5a98-99a2-d996af28dbff","fields":{"slug":"/react-debugging/"},"frontmatter":{"title":"리액트 크롬 데브툴 디버깅(debugging)"}}},{"node":{"id":"7ddeab05-2689-5d93-a885-948c97b1db0e","fields":{"slug":"/js-semicolon/"},"frontmatter":{"title":"자바스크립트 내에서의 세미콜론(;) 사용"}}},{"node":{"id":"63903bd1-952c-5d18-a931-a4adf22668c4","fields":{"slug":"/js-short-circuit-evaluation/"},"frontmatter":{"title":"자바스크립트 단축 평가"}}},{"node":{"id":"9ab7110e-3675-5155-a3d2-773f12f2b7fc","fields":{"slug":"/js-const/"},"frontmatter":{"title":"자바스크립트 const(constant) 키워드 에 대한 고찰"}}},{"node":{"id":"ef98c32c-b112-56b5-8750-2a65f29a76f8","fields":{"slug":"/js-single-thread/"},"frontmatter":{"title":"싱글스레드인 자바스크립트는 어떻게 비동기 처리를 하는가"}}},{"node":{"id":"50d11bc0-654a-525a-9cd5-220a2335dfc6","fields":{"slug":"/js-indexOf/"},"frontmatter":{"title":"자바스크립트 indexOf() 와 시간 복잡도의 상관관계에 대한 고찰"}}},{"node":{"id":"e83d28ae-8193-56f4-9504-165a7670ea8c","fields":{"slug":"/2021-retrospect/"},"frontmatter":{"title":"2021년 블로그 운영 회고"}}},{"node":{"id":"2f3f5cd2-f838-50db-9e87-f864a0082032","fields":{"slug":"/react-real-code-splitting/"},"frontmatter":{"title":"리액트 Code-splitting 실적용 사례"}}},{"node":{"id":"3653cebd-84f0-5d9f-b911-7e3380e26d2f","fields":{"slug":"/mac-kernal-task/"},"frontmatter":{"title":"맥북 kernel_task 과점유 현상"}}},{"node":{"id":"ac8423e7-cc42-5cf5-8f71-2d94b816c3cc","fields":{"slug":"/js-async-defer/"},"frontmatter":{"title":"자바스크립트 script 태그 async & defer 속성"}}},{"node":{"id":"7500a096-2419-500f-9c14-f6faa8a8b733","fields":{"slug":"/js-reduce-break/"},"frontmatter":{"title":"자바스크립트 reduce break"}}},{"node":{"id":"862d4423-5868-5d5d-ae40-0996bf878f09","fields":{"slug":"/js-linked-list/"},"frontmatter":{"title":"Linked-list with JS"}}},{"node":{"id":"ce965688-bfc1-5d9e-9fa2-87faec37db48","fields":{"slug":"/js-stack/"},"frontmatter":{"title":"Stack with JS"}}},{"node":{"id":"3fb03326-51d0-5ea4-8f03-157013d29817","fields":{"slug":"/js-queue/"},"frontmatter":{"title":"Queue with JS"}}},{"node":{"id":"2de45d5f-9115-5e85-a7a4-199ed24049b7","fields":{"slug":"/react-4-anti-patterns/"},"frontmatter":{"title":"리액트에서 피해야할 안티패턴"}}},{"node":{"id":"0df70305-6854-532e-b7ed-bf1afa0a0f3b","fields":{"slug":"/js-array-element-swap/"},"frontmatter":{"title":"자바스크립트 배열 원소 swap"}}},{"node":{"id":"7c241801-fc74-5e9f-ad4d-0857819cdd2a","fields":{"slug":"/js-primitive-reference-types/"},"frontmatter":{"title":"자바스크립트 원시(primitive)타입 vs 참조(reference)타입"}}},{"node":{"id":"e3b5900a-32b4-5091-8025-7ca64a558e5a","fields":{"slug":"/sellon/"},"frontmatter":{"title":"멋쟁이사자처럼 10기 해커톤 이후 회고"}}},{"node":{"id":"6e309f62-7717-5898-b10d-ed350c7a5e9b","fields":{"slug":"/oohtech-success/"},"frontmatter":{"title":"우아한 테크코스 5기 프론트엔드 최종합격 후기 및 과정"}}},{"node":{"id":"46073002-10b1-599c-8d84-99d4ebb7cb78","fields":{"slug":"/js-global-state-management-vanilla-js/"},"frontmatter":{"title":"Vanilla JS 로 간단한 전역 상태 관리 시스템 만들기"}}},{"node":{"id":"5dae62fe-064f-5acf-8114-7e5f4d22a1e3","fields":{"slug":"/ts-non-null-assertion-operator/"},"frontmatter":{"title":"[Typescript] Non-null assertion operator ! (non-null 단언 연산자)"}}},{"node":{"id":"47305df1-1dc7-5b3c-b334-dcc9922f4cd6","fields":{"slug":"/woowacourse-first-month/"},"frontmatter":{"title":"🦉 부엉이의 함께 자라기 in 우테코"}}}]},"previous":{"fields":{"slug":"/js-const/"},"frontmatter":{"title":"자바스크립트 const(constant) 키워드 에 대한 고찰"}},"next":{"fields":{"slug":"/js-indexOf/"},"frontmatter":{"title":"자바스크립트 indexOf() 와 시간 복잡도의 상관관계에 대한 고찰"}}},"pageContext":{"id":"ef98c32c-b112-56b5-8750-2a65f29a76f8","series":null,"previousPostId":"9ab7110e-3675-5155-a3d2-773f12f2b7fc","nextPostId":"50d11bc0-654a-525a-9cd5-220a2335dfc6"}},"staticQueryHashes":[]}