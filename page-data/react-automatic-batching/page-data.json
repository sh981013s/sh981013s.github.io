{"componentChunkName":"component---src-templates-post-jsx","path":"/react-automatic-batching/","result":{"data":{"site":{"siteMetadata":{"title":"Jason Lee"}},"markdownRemark":{"id":"c02c0083-deea-51d2-b3a9-f8b5dbecba19","excerpt":"서론 React 18 에서는  이라는 기능이 추가되었다.  이 기능은 이전 버전의  보다 향상된 성능을 자랑한다.\n본고에서는 기본적으로  이란 무엇인지, 그리고 이 기능을 사용하여 어떠한 효과를 가져오는지 실제 예시를 통해 알아보도록 하겠다. 본론 상태 변경과 렌더링: React의 핵심 React는  UI 라이브러리로, 우리가 어떤 화면을 보여줘야 하는지…","html":"<h2>서론</h2>\n<p>React 18 에서는 <code class=\"language-text\">Automatic Batching</code> 이라는 기능이 추가되었다.  이 기능은 이전 버전의 <code class=\"language-text\">Batching</code> 보다 향상된 성능을 자랑한다.\n본고에서는 기본적으로 <code class=\"language-text\">Batching</code> 이란 무엇인지, 그리고 이 기능을 사용하여 어떠한 효과를 가져오는지 실제 예시를 통해 알아보도록 하겠다.</p>\n<hr>\n<h2>본론</h2>\n<h3>상태 변경과 렌더링: React의 핵심</h3>\n<p>React는 <code class=\"language-text\">선언적</code> UI 라이브러리로, 우리가 어떤 화면을 보여줘야 하는지만 명시하면, React가 상태의 변경과 UI의 렌더링을 어떻게 처리할지 알아서 해준다.\n예를 들어, <code class=\"language-text\">setState</code> 함수를 사용해서 상태를 변경하면, React는 그 상태에 맞춰 UI를 <code class=\"language-text\">재렌더링</code>해 준다.</p>\n<p>그런데, 상태가 여러 번 변경되면 어떻게 될까? 모든 상태 변경마다 UI를 재렌더링한다면, 불필요하게 많은 렌더링이 발생하게 될 것이다.\n이런 경우에 React는 <code class=\"language-text\">Batching</code>이라는 기능을 통해 여러 상태 변경을 한 번에 처리한다.</p>\n<h3>Batching 이란?</h3>\n<p><code class=\"language-text\">Batching</code> 이란 <code class=\"language-text\">React</code> 에서 <code class=\"language-text\">state</code> 의 변화가 일어날 때, <code class=\"language-text\">render</code> 함수가 여러번 호출되는 것을 방지하기 위해\n<code class=\"language-text\">state</code> 의 변화가 일어난 후, <code class=\"language-text\">render</code> 함수를 한번만 호출하는 것을 말한다. 이를 통해 불필요한 <code class=\"language-text\">render</code> 함수의 호출을 방지하여\n렌더링 성능을 향상시킬 수 있다.</p>\n<p>조금 더 풀어서 말해보자면, <code class=\"language-text\">Batching</code>은 여러 개의 작업을 한 번에 묶는 것을 말한다.\n예를 들어, 사무실에서 문서를 프린트할 때, 문서 한 장, 한 장을 따로따로 프린트하는 대신에 여러 문서를 한 번에 프린트하는 것과 비슷하다.\nReact에서도 이와 비슷한 원리로 동작하는데, 여러 개의 상태 변경을 한 번에 <code class=\"language-text\">묶어서</code> 처리한다는 점이다.</p>\n<h3>Batching 예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// re-renderering 이 일어나지 않는다.</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// re-renderering 이 일어나지 않는다.</span>\n    <span class=\"token comment\">// 마지막에 re-rendering 이 발생한다. (batching).</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Click<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 예시 코드를 주석을 신경쓰지 않고 원초적으로 보자면, <code class=\"language-text\">onClick</code> 함수가 실행되면 <code class=\"language-text\">setCount</code> 가 <code class=\"language-text\">동기적</code> 으로 실행되어, 기존</p>\n<blockquote>\n<p>React Component 는 상태가 변경되면 re-rendering 이 일어난다.</p>\n</blockquote>\n<p>말에 따라 총 2번의 <code class=\"language-text\">re-rendering</code> 이 발생할 것이라 생각할 수 있다.\n하지만, 첫번째로 <code class=\"language-text\">useState</code> 훅의 <code class=\"language-text\">setCount</code> 함수는 <code class=\"language-text\">동기적</code> 으로 실행되지 않는다.</p>\n<p>두밴쩌로 React 의 Batching 에 의해 <code class=\"language-text\">onClick</code> 함수 내의 두번의 setCount 로 인해 상태가 각기 변경되더라도, 마지막에 한번의 <code class=\"language-text\">re-rendering</code> 이 일어난다.</p>\n<p>React 18 이전까지는, batched updates 오로지 React event handlers 내부에서만 작동했다.\npromises, setTimeout, native event handlers 에서는 batching이 일어나지 않았다.</p>\n<h3>Automatic Batching 이란?</h3>\n<p><code class=\"language-text\">Automatic Batching</code> 은 <code class=\"language-text\">React 18</code> 에서 새롭게 추가된 기능으로서 <code class=\"language-text\">Batching</code> 을 자동으로 처리해주는 기능이다.\n이전 <code class=\"language-text\">Batching</code> 과 다르게, 어디에서 상태가 변경되던지 상관없이 <code class=\"language-text\">Batching</code> 이 일어난다.</p>\n<p>promises, setTimeout, native event handlers 등에서도 모두 <code class=\"language-text\">Batching</code> 이 일어난다.</p>\n<h3>Batching 을 피하고 싶다면?</h3>\n<p>하지만, 명시적으로 Batching 이 동작하길 원하지 않고, 매 상태변화 마다 DOM update 가 일어나야 하는 상황 또한 존재할 수 있다.\n해당 케이스에서는 <code class=\"language-text\">ReactDOM.flushSync()</code> 를 사용하여 명시적으로 Batching 을 피할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> flushSync <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">flushSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// re-renderering 이 일어난다.</span>\n\n    <span class=\"token function\">flushSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// re-renderering 이 일어난다.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Click<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<h2>결론</h2>\n<p>React의 Batching은 상태 변경을 최적화하고 렌더링 성능을 향상시키는 중요한 기능이다.\n이를 이해하고 활용하면, 더욱 효율적인 React 애플리케이션을 만들 수 있을 것이다.</p>","frontmatter":{"title":"React 18 Automatic Batching: 렌더링 성능 향상의 무기","date":"June 01, 2023","update":"June 01, 2023","tags":["React"],"series":null},"fields":{"slug":"/react-automatic-batching/","readingTime":{"minutes":5.385}}},"seriesList":{"edges":[{"node":{"id":"45bc678e-7703-5acd-aafd-a7c0fa93a80c","fields":{"slug":"/baekjoon-1654/"},"frontmatter":{"title":"[BOJ] 1654 랜선 자르기 (Node.js)"}}},{"node":{"id":"028e9080-86df-53bb-a1e9-dbc398328921","fields":{"slug":"/vainllajs-registration-form/"},"frontmatter":{"title":"회원가입 폼 with Vanilla JS"}}},{"node":{"id":"d736c4dd-4d23-5481-97d4-a12694b7fd0c","fields":{"slug":"/movie-seat-booking/"},"frontmatter":{"title":"영화 좌석 선택 with Vanilla JS"}}},{"node":{"id":"950ab322-20a3-506d-be98-95c57b9d5e7f","fields":{"slug":"/exchange-rate-calculator/"},"frontmatter":{"title":"환전기 with Vanilla JS"}}},{"node":{"id":"bfe47c8d-2f18-5cc3-8501-86e865256557","fields":{"slug":"/custom-video-player/"},"frontmatter":{"title":"비디오 플레이어 with Vanilla JS"}}},{"node":{"id":"4b8a65e9-78c3-54b6-8fce-8e518749024c","fields":{"slug":"/personal-information-list/"},"frontmatter":{"title":"개인자산 체크 with Vanilla JS"}}},{"node":{"id":"364ae05f-101b-5720-9ec6-d692d55e0062","fields":{"slug":"/menu-sidebar-modal/"},"frontmatter":{"title":"사이드바, 모달 with Vanilla JS"}}},{"node":{"id":"5abf51b6-6ecd-5d96-879f-5777a606bf0a","fields":{"slug":"/connecting-server-client/"},"frontmatter":{"title":"React && Node.js 연결하기"}}},{"node":{"id":"ac1bef97-c59e-5beb-955b-d8c6e8e742c8","fields":{"slug":"/import-react/"},"frontmatter":{"title":"importing React 와 JSX 사용의 상관관계"}}},{"node":{"id":"2a9c97e2-a6bc-515d-9f47-b1248cf5f9cf","fields":{"slug":"/vsc-react-autoimport/"},"frontmatter":{"title":"VSC 리액트 auto import"}}},{"node":{"id":"bf55c7ac-a772-56fa-b74d-2a0ae1afd342","fields":{"slug":"/useRef/"},"frontmatter":{"title":"리액트 useRef"}}},{"node":{"id":"376677fe-0b5d-57d7-9b3e-95aeb604a67c","fields":{"slug":"/react-debouncing/"},"frontmatter":{"title":"리액트 디바운싱(debouncing)"}}},{"node":{"id":"de4aef09-b0e7-5a98-99a2-d996af28dbff","fields":{"slug":"/react-debugging/"},"frontmatter":{"title":"리액트 크롬 데브툴 디버깅(debugging)"}}},{"node":{"id":"7ddeab05-2689-5d93-a885-948c97b1db0e","fields":{"slug":"/js-semicolon/"},"frontmatter":{"title":"자바스크립트 내에서의 세미콜론(;) 사용"}}},{"node":{"id":"63903bd1-952c-5d18-a931-a4adf22668c4","fields":{"slug":"/js-short-circuit-evaluation/"},"frontmatter":{"title":"자바스크립트 단축 평가"}}},{"node":{"id":"9ab7110e-3675-5155-a3d2-773f12f2b7fc","fields":{"slug":"/js-const/"},"frontmatter":{"title":"자바스크립트 const(constant) 키워드 에 대한 고찰"}}},{"node":{"id":"ef98c32c-b112-56b5-8750-2a65f29a76f8","fields":{"slug":"/js-single-thread/"},"frontmatter":{"title":"싱글스레드인 자바스크립트는 어떻게 비동기 처리를 하는가"}}},{"node":{"id":"50d11bc0-654a-525a-9cd5-220a2335dfc6","fields":{"slug":"/js-indexOf/"},"frontmatter":{"title":"자바스크립트 indexOf() 와 시간 복잡도의 상관관계에 대한 고찰"}}},{"node":{"id":"e83d28ae-8193-56f4-9504-165a7670ea8c","fields":{"slug":"/2021-retrospect/"},"frontmatter":{"title":"2021년 블로그 운영 회고"}}},{"node":{"id":"2f3f5cd2-f838-50db-9e87-f864a0082032","fields":{"slug":"/react-real-code-splitting/"},"frontmatter":{"title":"리액트 Code-splitting 실적용 사례"}}},{"node":{"id":"3653cebd-84f0-5d9f-b911-7e3380e26d2f","fields":{"slug":"/mac-kernal-task/"},"frontmatter":{"title":"맥북 kernel_task 과점유 현상"}}},{"node":{"id":"ac8423e7-cc42-5cf5-8f71-2d94b816c3cc","fields":{"slug":"/js-async-defer/"},"frontmatter":{"title":"자바스크립트 script 태그 async & defer 속성"}}},{"node":{"id":"7500a096-2419-500f-9c14-f6faa8a8b733","fields":{"slug":"/js-reduce-break/"},"frontmatter":{"title":"자바스크립트 reduce break"}}},{"node":{"id":"862d4423-5868-5d5d-ae40-0996bf878f09","fields":{"slug":"/js-linked-list/"},"frontmatter":{"title":"Linked-list with JS"}}},{"node":{"id":"ce965688-bfc1-5d9e-9fa2-87faec37db48","fields":{"slug":"/js-stack/"},"frontmatter":{"title":"Stack with JS"}}},{"node":{"id":"3fb03326-51d0-5ea4-8f03-157013d29817","fields":{"slug":"/js-queue/"},"frontmatter":{"title":"Queue with JS"}}},{"node":{"id":"2de45d5f-9115-5e85-a7a4-199ed24049b7","fields":{"slug":"/react-4-anti-patterns/"},"frontmatter":{"title":"리액트에서 피해야할 안티패턴"}}},{"node":{"id":"0df70305-6854-532e-b7ed-bf1afa0a0f3b","fields":{"slug":"/js-array-element-swap/"},"frontmatter":{"title":"자바스크립트 배열 원소 swap"}}},{"node":{"id":"7c241801-fc74-5e9f-ad4d-0857819cdd2a","fields":{"slug":"/js-primitive-reference-types/"},"frontmatter":{"title":"자바스크립트 원시(primitive)타입 vs 참조(reference)타입"}}},{"node":{"id":"e3b5900a-32b4-5091-8025-7ca64a558e5a","fields":{"slug":"/sellon/"},"frontmatter":{"title":"멋쟁이사자처럼 10기 해커톤 이후 회고"}}},{"node":{"id":"6e309f62-7717-5898-b10d-ed350c7a5e9b","fields":{"slug":"/oohtech-success/"},"frontmatter":{"title":"우아한 테크코스 5기 프론트엔드 최종합격 후기 및 과정"}}},{"node":{"id":"46073002-10b1-599c-8d84-99d4ebb7cb78","fields":{"slug":"/js-global-state-management-vanilla-js/"},"frontmatter":{"title":"Vanilla JS 로 간단한 전역 상태 관리 시스템 만들기"}}},{"node":{"id":"5dae62fe-064f-5acf-8114-7e5f4d22a1e3","fields":{"slug":"/ts-non-null-assertion-operator/"},"frontmatter":{"title":"[Typescript] Non-null assertion operator ! (non-null 단언 연산자)"}}},{"node":{"id":"47305df1-1dc7-5b3c-b334-dcc9922f4cd6","fields":{"slug":"/woowacourse-first-month/"},"frontmatter":{"title":"🦉 부엉이의 함께 자라기 in 우테코"}}},{"node":{"id":"adcfbb9c-c845-5d03-be55-8fddde63ce29","fields":{"slug":"/js-wrapping-object/"},"frontmatter":{"title":"[JavaScript] 자바스크립트의 객체 wrapper에 대해 알아보자"}}},{"node":{"id":"9354e08d-30df-548f-a9df-b62ce6e5616c","fields":{"slug":"/woowacourse-level-one/"},"frontmatter":{"title":"우테코 레벨1 회고"}}},{"node":{"id":"c8c5c807-030d-5002-9827-ae80fe4a4c42","fields":{"slug":"/am-i-doing-good/"},"frontmatter":{"title":"나는 올바르게 성장하고 있는가"}}},{"node":{"id":"11f31911-f7b3-5b20-a5ab-f0c6114a9667","fields":{"slug":"/js-hoc/"},"frontmatter":{"title":"자바스크립트 내에서의 세미콜론(;) 사용"}}},{"node":{"id":"c02c0083-deea-51d2-b3a9-f8b5dbecba19","fields":{"slug":"/react-automatic-batching/"},"frontmatter":{"title":"React 18 Automatic Batching: 렌더링 성능 향상의 무기"}}},{"node":{"id":"1e01d155-6add-52bf-a99a-d6e07a396aae","fields":{"slug":"/girok-why-zustand/"},"frontmatter":{"title":"왜 zustand 를 선택했는가"}}}]},"previous":{"fields":{"slug":"/js-hoc/"},"frontmatter":{"title":"자바스크립트 내에서의 세미콜론(;) 사용"}},"next":{"fields":{"slug":"/girok-why-zustand/"},"frontmatter":{"title":"왜 zustand 를 선택했는가"}}},"pageContext":{"id":"c02c0083-deea-51d2-b3a9-f8b5dbecba19","series":null,"previousPostId":"11f31911-f7b3-5b20-a5ab-f0c6114a9667","nextPostId":"1e01d155-6add-52bf-a99a-d6e07a396aae"}},"staticQueryHashes":[]}