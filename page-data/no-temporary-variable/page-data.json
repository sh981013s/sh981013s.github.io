{"componentChunkName":"component---src-templates-post-jsx","path":"/no-temporary-variable/","result":{"data":{"site":{"siteMetadata":{"title":"hwani.dev"}},"markdownRemark":{"id":"b5b959dd-cd6a-580f-8165-824ce6e43c65","excerpt":"임시변수란? 자바스크립트를 다룰때, 기존의 Scope 를 다룰때,   을 사용하지 말고,   또한 피해야 한다고 들었다. 임시변수란, Scope 안에서 전역변수처럼 활용되는 친구를 생각한다. 위의 코드의  도 마찬가지이다.\n어떻게 보면 이것도 const 니까 문제 없을까? 라고 생각 할 수 있지만, 이 임시 객체도 함수가 커지  이나 다름없는 상황이 발생…","html":"<h2>임시변수란?</h2>\n<p>자바스크립트를 다룰때, 기존의 Scope 를 다룰때, </p>\n<p><code class=\"language-text\">전역공간</code> 을 사용하지 말고,  <code class=\"language-text\">var</code> 또한 피해야 한다고 들었다.</p>\n<h4>임시변수란, Scope 안에서 전역변수처럼 활용되는 친구를 생각한다.</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getObj</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    \n    result<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">'tmp_variable'</span>\n    result<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">'wow'</span>\n    \n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드의 <code class=\"language-text\">const result = {}</code> 도 마찬가지이다.\n어떻게 보면 이것도 const 니까 문제 없을까? 라고 생각 할 수 있지만, 이 임시 객체도 함수가 커지 <code class=\"language-text\">전역공간</code> 이나 다름없는 상황이 발생할 수 있다.</p>\n<p>그렇게 되면 위험한 상황이 나올 수 있다. 임시변수를 만들었을때, 누군가가 같이 일하는 팀원이 미래의 내가 유혹을 받을 수 있다는 말이다.</p>\n<p>그러면 이 임시 변수를 어떻게 접근 할까에 대해서는, 함수를 작게 쪼개는 방법도 있지만, </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getObj</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      title<span class=\"token operator\">:</span> <span class=\"token string\">'tmp_variable'</span><span class=\"token punctuation\">,</span>\n      text<span class=\"token operator\">:</span> <span class=\"token string\">'wow'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이런식으로 간소화 할 수도 있다. 일단은 코드가 명확해지고,\n아까는 굳이 선언 후 접근하는 과정으로 나뉘어있었기 때문에,\n누구나 고칠 수 있는 느낌이 들었다.</p>\n<p>하지만, 더 명확하게 바꿀 수 있는 방법이 뭐가 있을까?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getObj</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      title<span class=\"token operator\">:</span> <span class=\"token string\">'tmp_variable'</span><span class=\"token punctuation\">,</span>\n      text<span class=\"token operator\">:</span> <span class=\"token string\">'wow'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이런식으로 바로 반환하는는 방법또한 존재한다.</p>\n<p>그러면, 이 함수는 누가봐도 <code class=\"language-text\">side-effect</code> 가 많지않은, 함수로 볼 수 있다.</p>\n<hr>\n<h2>결론</h2>\n<h4>임시변수는 좋지 않다.</h4>\n<p>임시변수를 제거해야 하는 이유는</p>\n<p>명령형으로 가득한 조직이기 때문에, 어디서 어떻게 잘못되었는지 디버깅이 어려워진다.</p>\n<p>또한, 타인이 추가적인 코드를 덧붙이고 싶은 유혹에 빠지기 쉽다. 결국 코드의 유지보수가 어려워진다는 것이다.</p>\n<p>이에따라 해결책은, 함수를 나누거나, 바로 반환하거나, <code class=\"language-text\">map</code> <code class=\"language-text\">filter</code> <code class=\"language-text\">reduce</code> 와 같은 고차 함수를 사용하는 것이다.</p>\n<p>또한, 선언형 코드로 바꾸는 방식을 사용해보든 것이다. </p>","frontmatter":{"title":"임시변수 제거하기","date":"November 22, 2021","update":"November 22, 2021","tags":["JS_CleanCode"],"series":"JS_CleanCode"},"fields":{"slug":"/no-temporary-variable/","readingTime":{"minutes":2.935}}},"seriesList":{"edges":[{"node":{"id":"22a2aed1-aa36-51d6-9ce8-fb6f34e8fb66","fields":{"slug":"/no-var/"},"frontmatter":{"title":"var 를 지양하자"}}},{"node":{"id":"ec9410bb-52dd-553a-b26b-7a01b389e775","fields":{"slug":"/no-global/"},"frontmatter":{"title":"전역 공간 사용 최소화"}}},{"node":{"id":"b5b959dd-cd6a-580f-8165-824ce6e43c65","fields":{"slug":"/no-temporary-variable/"},"frontmatter":{"title":"임시변수 제거하기"}}},{"node":{"id":"fc9e3742-bf54-5ffe-a72f-f03f049fc32b","fields":{"slug":"/no-hoisting/"},"frontmatter":{"title":"호이스팅 주의하기"}}},{"node":{"id":"54d4bb98-9bf4-5b86-92d2-259a7dd4b6f0","fields":{"slug":"/types-of-javascript/"},"frontmatter":{"title":"JS 타입 검사"}}}]},"previous":{"fields":{"slug":"/blog-SEO/"},"frontmatter":{"title":"블로그 SEO"}},"next":{"fields":{"slug":"/baekjoon-1654/"},"frontmatter":{"title":"[BOJ] 1654 랜선 자르기 (Node.js)"}}},"pageContext":{"id":"b5b959dd-cd6a-580f-8165-824ce6e43c65","series":"JS_CleanCode","previousPostId":"04ff0c91-9cf5-546c-9544-c16d671dd23b","nextPostId":"92ebb2fd-e60e-5a93-88dc-ec9c28596843"}},"staticQueryHashes":[]}