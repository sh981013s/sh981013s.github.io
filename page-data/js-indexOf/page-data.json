{"componentChunkName":"component---src-templates-post-jsx","path":"/js-indexOf/","result":{"data":{"site":{"siteMetadata":{"title":"hwani.dev"}},"markdownRemark":{"id":"83b07909-0921-5c80-8198-093ac91c69c2","excerpt":"서론 알고리즘을 연습하고 탐구하다 여지껏 쓴 코드들을 보며  에 대해 생각을 해보았다. 적어도 빅오표기법 기준  어쩔 수 없지 라고 생각하며 마구잡이 식으로  내부에  메소드를 남발하고 있었다.   위의 코드를 비교하며 나는 헷갈리기 시작했다.  메소드가 단순히 마법처럼 해당 value 의 index 를 뿅 하고 찾아 리턴해줄까..? \n만일 그렇다면 두개…","html":"<h2>서론</h2>\n<p>알고리즘을 연습하고 탐구하다 여지껏 쓴 코드들을 보며 <code class=\"language-text\">시간복잡도</code> 에 대해 생각을 해보았다.</p>\n<p>적어도 빅오표기법 기준 <code class=\"language-text\">O(n)</code> 어쩔 수 없지 라고 생각하며 마구잡이 식으로 <code class=\"language-text\">for문</code> 내부에 <code class=\"language-text\">indexOf()</code> 메소드를 남발하고 있었다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> elIdx <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> elIdx<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0, 1, 2</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token comment\">// O(n)</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> el <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0, 1, 2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// O(n) ????????????????????</span></code></pre></div>\n<p>위의 코드를 비교하며 나는 헷갈리기 시작했다. <code class=\"language-text\">indexOf()</code> 메소드가 단순히 마법처럼 해당 value 의 index 를 뿅 하고 찾아 리턴해줄까..?\n만일 그렇다면 두개의 예시의 공통된 시간복잡도는 <code class=\"language-text\">O(n)</code> 일것이다.</p>\n<p>만일 아니라면? indexOf() 의 동작방식이 element 들을 순차적으로 모두 돌며 체크한다면? 그렇다면 두번째 예시의 시간복잡도는 <code class=\"language-text\">O(n^2)</code> 이지 않을까\n라며 생각했다.</p>\n<hr>\n<h2>본론</h2>\n<p>결론부터 말하자면, <code class=\"language-text\">indexOf()</code> 는 모든 element search 하지 않는다. 하지만 위의 두번째 예시의 시간복잡도는 <code class=\"language-text\">O(n^2)</code> 으로 표기된다.</p>\n<p><a href=\"https://tc39.es/ecma262/#sec-array.prototype.indexof\">https://tc39.es/ecma262/#sec-array.prototype.indexof</a></p>\n<p>해답은 <code class=\"language-text\">ECMAScript</code> 의 공식문서에서 찾을 수 있었다.</br> 이에 따르면, <code class=\"language-text\">indexOf()</code> 는 인자로 <code class=\"language-text\">fromIndex</code> 를 별도로 받지 않았을 경우,\n물론 받아도 마찬가지이지만, 받지 않았을 경우 0 index 부터 순차적으로 탐색을 시작하며, 찾을경우 즉시 해당값을 <code class=\"language-text\">return</code> 해준다.<br/> 받았을 경우에도\n해당 index 부터 탐색을 시작하며, 찾을 경우 곧바로 값을 <code class=\"language-text\">return</code> 해준다. </p>\n<p>키포인트는 값을 찾을경우 <code class=\"language-text\">즉시</code> return, 즉 탐색을 끝낸다는 뜻이다.<br/> 이는 곧 '<code class=\"language-text\">indexOf()</code> 는 모든 element search 하지 않는다.' 로 해석된다.</p>\n<p>그렇다면 <code class=\"language-text\">indexOf()</code> 의 단순 시간복잡도는 <code class=\"language-text\">O(1)</code> 일까? 그렇지 않다. 시간복잡도를 계산할때는 항상 <code class=\"language-text\">최악</code>의 상황을 고려해야한다. <code class=\"language-text\">indexOf()</code> 의\n최악의 상황이라 꼽자면, array 에는 99999999999999999999999999개의 3이라는 element 가 존재하지만 ( [3,3,3,3,3,3,3........) ], 코더가\narray.indexOf(1) 이라고 작성 후 실행하는 상황이라 생각된다. 이경우에는 0 index 부터 array.length-1, 값을 찾을 수 없기때문에 처음부터 끝까지 탐색을\n하게된다. 과연 이 경우에도 시간복잡도를 <code class=\"language-text\">O(1)</code> 이라고 표현할 수 있을까?</p>\n<p>이에따른 해답을 찾기위해 부끄럼움을 무릅쓰고 <code class=\"language-text\">stackOverflow</code> 에 직접 질문을 하게 된다.</p>\n<p><a href=\"https://stackoverflow.com/questions/70902661/does-indexof-in-js-searches-all-the-elements-of-an-array-to-execute\">https://stackoverflow.com/questions/70902661/does-indexof-in-js-searches-all-the-elements-of-an-array-to-execute</a></p>\n<p>이에따른 사람들의 답은, 위에 같은 상황때문에 <code class=\"language-text\">indexOf()</code> 의 시간복잡도는 <code class=\"language-text\">O(n)</code> 으로 표기된다고 한다. 그러므로 최악의 경우를 피하기 위해, 무분별한\n<code class=\"language-text\">indexOf()</code> 의 사용 보다는 <code class=\"language-text\">binary search</code> 를 통한 <code class=\"language-text\">O(log n)</code> 을 노려볼 수도 있다 라고 답한분도 있었다.</p>\n<hr>\n<h2>결론</h2>\n<p>Q1. <code class=\"language-text\">indexOf()</code> 는 모든 element 를 탐색하여 값을 도출해낼까?</p>\n<p>A1. 아니다. <code class=\"language-text\">indexOf()</code> 는 <code class=\"language-text\">startIndex</code> 를 따로 인자로 받지 않는상황에서는 index 0 부터 해당 value 값을 찾을때까지 search 를 진행하고, 찾을경우\n바로 값을 return 한다.</p>\n<p>Q2. 그렇다면 <code class=\"language-text\">indexOf()</code> 를 사용해 1번의 search 를 통해 정상적인 값을 리턴받았다면 단순 시간복잡도는 <code class=\"language-text\">O(1)</code> 으로 표기될수 있지 않은가?</p>\n<p>A2. 아니다. 시간복잡도를 표현할때는 항상 <code class=\"language-text\">최악의</code> case 에 입각하여 계산을 해야하기에, 무한개의 element 를 가진 array 에 탐색하고자 하는 값이 없다면?\n과 같은 상황이 있기에, <code class=\"language-text\">O(n)</code> 으로 표기된다.</p>","frontmatter":{"title":"자바스크립트 indexOf() 와 시간 복잡도의 상관관계에 대한 고찰","date":"January 29, 2022","update":"January 29, 2022","tags":["Javascript"],"series":null},"fields":{"slug":"/js-indexOf/","readingTime":{"minutes":4.705}}},"seriesList":{"edges":[{"node":{"id":"a3e16011-856b-598c-88ca-ceebc8364f95","fields":{"slug":"/starbucks-menu-1/"},"frontmatter":{"title":"스타벅스 메뉴관리 with vanilla JS"}}},{"node":{"id":"92ebb2fd-e60e-5a93-88dc-ec9c28596843","fields":{"slug":"/baekjoon-1654/"},"frontmatter":{"title":"[BOJ] 1654 랜선 자르기 (Node.js)"}}},{"node":{"id":"b3bae6a0-d405-5d05-a043-d8638b60e890","fields":{"slug":"/vainllajs-registration-form/"},"frontmatter":{"title":"회원가입 폼 with Vanilla JS"}}},{"node":{"id":"104e0e28-4cfe-50ae-b9b8-3fb3dfc3ad04","fields":{"slug":"/movie-seat-booking/"},"frontmatter":{"title":"영화 좌석 선택 with Vanilla JS"}}},{"node":{"id":"e88b46a1-2475-5adc-80e7-55e7e252e9bd","fields":{"slug":"/exchange-rate-calculator/"},"frontmatter":{"title":"환전기 with Vanilla JS"}}},{"node":{"id":"ae0897e7-cc41-5c3a-89df-0273fdcb487e","fields":{"slug":"/custom-video-player/"},"frontmatter":{"title":"비디오 플레이어 with Vanilla JS"}}},{"node":{"id":"24e65c9a-a50e-5145-b39d-6108376629be","fields":{"slug":"/personal-information-list/"},"frontmatter":{"title":"개인자산 체크 with Vanilla JS"}}},{"node":{"id":"5ba84f09-135a-5975-b10f-4bf758e5f32e","fields":{"slug":"/menu-sidebar-modal/"},"frontmatter":{"title":"사이드바, 모달 with Vanilla JS"}}},{"node":{"id":"b1bd56b2-bd16-58f2-a750-2f0ffd138cb8","fields":{"slug":"/connecting-server-client/"},"frontmatter":{"title":"React && Node.js 연결하기"}}},{"node":{"id":"5cd51722-bb20-58ff-ad03-0d4210931109","fields":{"slug":"/import-react/"},"frontmatter":{"title":"importing React 와 JSX 사용의 상관관계"}}},{"node":{"id":"5f1c97cb-0242-5c0b-8037-626e2ee635de","fields":{"slug":"/vsc-react-autoimport/"},"frontmatter":{"title":"VSC 리액트 auto import"}}},{"node":{"id":"e741c309-2360-56d3-af48-f65bfae7253a","fields":{"slug":"/useRef/"},"frontmatter":{"title":"리액트 useRef"}}},{"node":{"id":"aaaedd63-6139-5da1-8196-3098ae216714","fields":{"slug":"/react-debouncing/"},"frontmatter":{"title":"리액트 디바운싱(debouncing)"}}},{"node":{"id":"b4b91b64-56ec-5f6c-8fc3-5f754204f3a0","fields":{"slug":"/react-debugging/"},"frontmatter":{"title":"리액트 크롬 데브툴 디버깅(debugging)"}}},{"node":{"id":"b030ebe6-631d-5927-b411-78b9a3bf9e85","fields":{"slug":"/js-semicolon/"},"frontmatter":{"title":"자바스크립트 내에서의 세미콜론(;) 사용"}}},{"node":{"id":"540e9709-5b2c-5702-af14-f1344e83c064","fields":{"slug":"/js-short-circuit-evaluation/"},"frontmatter":{"title":"자바스크립트 단축 평가"}}},{"node":{"id":"ac4bb014-16a9-5795-b805-28c631aeb58f","fields":{"slug":"/js-const/"},"frontmatter":{"title":"자바스크립트 const(constant) 키워드 에 대한 고찰"}}},{"node":{"id":"2ed793fe-3639-5ada-af50-48c4e4882fce","fields":{"slug":"/js-single-thread/"},"frontmatter":{"title":"싱글스레드인 자바스크립트는 어떻게 비동기 처리를 하는가"}}},{"node":{"id":"83b07909-0921-5c80-8198-093ac91c69c2","fields":{"slug":"/js-indexOf/"},"frontmatter":{"title":"자바스크립트 indexOf() 와 시간 복잡도의 상관관계에 대한 고찰"}}},{"node":{"id":"b4e2ec83-3483-5fd8-9faa-1390549e9d2f","fields":{"slug":"/2021-retrospect/"},"frontmatter":{"title":"2021년 블로그 운영 회고"}}},{"node":{"id":"16258bc3-0d2f-5d9b-8093-8d37111f8cd4","fields":{"slug":"/react-real-code-splitting/"},"frontmatter":{"title":"리액트 Code-splitting 실적용 사례"}}},{"node":{"id":"e04d0ac0-3384-5291-ab6d-854ec3ae1a06","fields":{"slug":"/mac-kernal-task/"},"frontmatter":{"title":"맥북 kernel_task 과점유 현상"}}},{"node":{"id":"cf4165e2-8e18-58d7-b2aa-cf784ea98da3","fields":{"slug":"/js-async-defer/"},"frontmatter":{"title":"자바스크립트 script 태그 async & defer 속성"}}},{"node":{"id":"0beab403-dd72-5b36-aab2-e4b428b20dc6","fields":{"slug":"/js-reduce-break/"},"frontmatter":{"title":"자바스크립트 reduce break"}}}]},"previous":{"fields":{"slug":"/js-single-thread/"},"frontmatter":{"title":"싱글스레드인 자바스크립트는 어떻게 비동기 처리를 하는가"}},"next":{"fields":{"slug":"/2021-retrospect/"},"frontmatter":{"title":"2021년 블로그 운영 회고"}}},"pageContext":{"id":"83b07909-0921-5c80-8198-093ac91c69c2","series":null,"previousPostId":"2ed793fe-3639-5ada-af50-48c4e4882fce","nextPostId":"b4e2ec83-3483-5fd8-9faa-1390549e9d2f"}},"staticQueryHashes":[]}