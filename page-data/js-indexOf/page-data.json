{"componentChunkName":"component---src-templates-post-jsx","path":"/js-indexOf/","result":{"data":{"site":{"siteMetadata":{"title":"Jason Lee"}},"markdownRemark":{"id":"50d11bc0-654a-525a-9cd5-220a2335dfc6","excerpt":"서론 알고리즘을 연습하고 탐구하다 여지껏 쓴 코드들을 보며  에 대해 생각을 해보았다. 적어도 빅오표기법 기준  어쩔 수 없지 라고 생각하며 마구잡이 식으로  내부에  메소드를 남발하고 있었다.   위의 코드를 비교하며 나는 헷갈리기 시작했다.  메소드가 단순히 마법처럼 해당 value 의 index 를 뿅 하고 찾아 리턴해줄까..? \n만일 그렇다면 두개…","html":"<h2>서론</h2>\n<p>알고리즘을 연습하고 탐구하다 여지껏 쓴 코드들을 보며 <code class=\"language-text\">시간복잡도</code> 에 대해 생각을 해보았다.</p>\n<p>적어도 빅오표기법 기준 <code class=\"language-text\">O(n)</code> 어쩔 수 없지 라고 생각하며 마구잡이 식으로 <code class=\"language-text\">for문</code> 내부에 <code class=\"language-text\">indexOf()</code> 메소드를 남발하고 있었다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> elIdx <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> elIdx<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0, 1, 2</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token comment\">// O(n)</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> el <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0, 1, 2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// O(n) ????????????????????</span></code></pre></div>\n<p>위의 코드를 비교하며 나는 헷갈리기 시작했다. <code class=\"language-text\">indexOf()</code> 메소드가 단순히 마법처럼 해당 value 의 index 를 뿅 하고 찾아 리턴해줄까..?\n만일 그렇다면 두개의 예시의 공통된 시간복잡도는 <code class=\"language-text\">O(n)</code> 일것이다.</p>\n<p>만일 아니라면? indexOf() 의 동작방식이 element 들을 순차적으로 모두 돌며 체크한다면? 그렇다면 두번째 예시의 시간복잡도는 <code class=\"language-text\">O(n^2)</code> 이지 않을까\n라며 생각했다.</p>\n<hr>\n<h2>본론</h2>\n<p>결론부터 말하자면, <code class=\"language-text\">indexOf()</code> 는 모든 element search 하지 않는다. 하지만 위의 두번째 예시의 시간복잡도는 <code class=\"language-text\">O(n^2)</code> 으로 표기된다.</p>\n<p><a href=\"https://tc39.es/ecma262/#sec-array.prototype.indexof\">https://tc39.es/ecma262/#sec-array.prototype.indexof</a></p>\n<p>해답은 <code class=\"language-text\">ECMAScript</code> 의 공식문서에서 찾을 수 있었다.</br> 이에 따르면, <code class=\"language-text\">indexOf()</code> 는 인자로 <code class=\"language-text\">fromIndex</code> 를 별도로 받지 않았을 경우,\n물론 받아도 마찬가지이지만, 받지 않았을 경우 0 index 부터 순차적으로 탐색을 시작하며, 찾을경우 즉시 해당값을 <code class=\"language-text\">return</code> 해준다.<br/> 받았을 경우에도\n해당 index 부터 탐색을 시작하며, 찾을 경우 곧바로 값을 <code class=\"language-text\">return</code> 해준다. </p>\n<p>키포인트는 값을 찾을경우 <code class=\"language-text\">즉시</code> return, 즉 탐색을 끝낸다는 뜻이다.<br/> 이는 곧 '<code class=\"language-text\">indexOf()</code> 는 모든 element search 하지 않는다.' 로 해석된다.</p>\n<p>그렇다면 <code class=\"language-text\">indexOf()</code> 의 단순 시간복잡도는 <code class=\"language-text\">O(1)</code> 일까? 그렇지 않다. 시간복잡도를 계산할때는 항상 <code class=\"language-text\">최악</code>의 상황을 고려해야한다. <code class=\"language-text\">indexOf()</code> 의\n최악의 상황이라 꼽자면, array 에는 99999999999999999999999999개의 3이라는 element 가 존재하지만 ( [3,3,3,3,3,3,3........) ], 코더가\narray.indexOf(1) 이라고 작성 후 실행하는 상황이라 생각된다. 이경우에는 0 index 부터 array.length-1, 값을 찾을 수 없기때문에 처음부터 끝까지 탐색을\n하게된다. 과연 이 경우에도 시간복잡도를 <code class=\"language-text\">O(1)</code> 이라고 표현할 수 있을까?</p>\n<p>이에따른 해답을 찾기위해 부끄럼움을 무릅쓰고 <code class=\"language-text\">stackOverflow</code> 에 직접 질문을 하게 된다.</p>\n<p><a href=\"https://stackoverflow.com/questions/70902661/does-indexof-in-js-searches-all-the-elements-of-an-array-to-execute\">https://stackoverflow.com/questions/70902661/does-indexof-in-js-searches-all-the-elements-of-an-array-to-execute</a></p>\n<p>이에따른 사람들의 답은, 위에 같은 상황때문에 <code class=\"language-text\">indexOf()</code> 의 시간복잡도는 <code class=\"language-text\">O(n)</code> 으로 표기된다고 한다. 그러므로 최악의 경우를 피하기 위해, 무분별한\n<code class=\"language-text\">indexOf()</code> 의 사용 보다는 <code class=\"language-text\">binary search</code> 를 통한 <code class=\"language-text\">O(log n)</code> 을 노려볼 수도 있다 라고 답한분도 있었다.</p>\n<hr>\n<h2>결론</h2>\n<p>Q1. <code class=\"language-text\">indexOf()</code> 는 모든 element 를 탐색하여 값을 도출해낼까?</p>\n<p>A1. 아니다. <code class=\"language-text\">indexOf()</code> 는 <code class=\"language-text\">startIndex</code> 를 따로 인자로 받지 않는상황에서는 index 0 부터 해당 value 값을 찾을때까지 search 를 진행하고, 찾을경우\n바로 값을 return 한다.</p>\n<p>Q2. 그렇다면 <code class=\"language-text\">indexOf()</code> 를 사용해 1번의 search 를 통해 정상적인 값을 리턴받았다면 단순 시간복잡도는 <code class=\"language-text\">O(1)</code> 으로 표기될수 있지 않은가?</p>\n<p>A2. 아니다. 시간복잡도를 표현할때는 항상 <code class=\"language-text\">최악의</code> case 에 입각하여 계산을 해야하기에, 무한개의 element 를 가진 array 에 탐색하고자 하는 값이 없다면?\n과 같은 상황이 있기에, <code class=\"language-text\">O(n)</code> 으로 표기된다.</p>","frontmatter":{"title":"자바스크립트 indexOf() 와 시간 복잡도의 상관관계에 대한 고찰","date":"January 29, 2022","update":"January 29, 2022","tags":["JavaScript"],"series":null},"fields":{"slug":"/js-indexOf/","readingTime":{"minutes":4.705}}},"seriesList":{"edges":[{"node":{"id":"45bc678e-7703-5acd-aafd-a7c0fa93a80c","fields":{"slug":"/baekjoon-1654/"},"frontmatter":{"title":"[BOJ] 1654 랜선 자르기 (Node.js)"}}},{"node":{"id":"028e9080-86df-53bb-a1e9-dbc398328921","fields":{"slug":"/vainllajs-registration-form/"},"frontmatter":{"title":"회원가입 폼 with Vanilla JS"}}},{"node":{"id":"d736c4dd-4d23-5481-97d4-a12694b7fd0c","fields":{"slug":"/movie-seat-booking/"},"frontmatter":{"title":"영화 좌석 선택 with Vanilla JS"}}},{"node":{"id":"950ab322-20a3-506d-be98-95c57b9d5e7f","fields":{"slug":"/exchange-rate-calculator/"},"frontmatter":{"title":"환전기 with Vanilla JS"}}},{"node":{"id":"bfe47c8d-2f18-5cc3-8501-86e865256557","fields":{"slug":"/custom-video-player/"},"frontmatter":{"title":"비디오 플레이어 with Vanilla JS"}}},{"node":{"id":"4b8a65e9-78c3-54b6-8fce-8e518749024c","fields":{"slug":"/personal-information-list/"},"frontmatter":{"title":"개인자산 체크 with Vanilla JS"}}},{"node":{"id":"364ae05f-101b-5720-9ec6-d692d55e0062","fields":{"slug":"/menu-sidebar-modal/"},"frontmatter":{"title":"사이드바, 모달 with Vanilla JS"}}},{"node":{"id":"5abf51b6-6ecd-5d96-879f-5777a606bf0a","fields":{"slug":"/connecting-server-client/"},"frontmatter":{"title":"React && Node.js 연결하기"}}},{"node":{"id":"ac1bef97-c59e-5beb-955b-d8c6e8e742c8","fields":{"slug":"/import-react/"},"frontmatter":{"title":"importing React 와 JSX 사용의 상관관계"}}},{"node":{"id":"2a9c97e2-a6bc-515d-9f47-b1248cf5f9cf","fields":{"slug":"/vsc-react-autoimport/"},"frontmatter":{"title":"VSC 리액트 auto import"}}},{"node":{"id":"bf55c7ac-a772-56fa-b74d-2a0ae1afd342","fields":{"slug":"/useRef/"},"frontmatter":{"title":"리액트 useRef"}}},{"node":{"id":"376677fe-0b5d-57d7-9b3e-95aeb604a67c","fields":{"slug":"/react-debouncing/"},"frontmatter":{"title":"리액트 디바운싱(debouncing)"}}},{"node":{"id":"de4aef09-b0e7-5a98-99a2-d996af28dbff","fields":{"slug":"/react-debugging/"},"frontmatter":{"title":"리액트 크롬 데브툴 디버깅(debugging)"}}},{"node":{"id":"7ddeab05-2689-5d93-a885-948c97b1db0e","fields":{"slug":"/js-semicolon/"},"frontmatter":{"title":"자바스크립트 내에서의 세미콜론(;) 사용"}}},{"node":{"id":"63903bd1-952c-5d18-a931-a4adf22668c4","fields":{"slug":"/js-short-circuit-evaluation/"},"frontmatter":{"title":"자바스크립트 단축 평가"}}},{"node":{"id":"9ab7110e-3675-5155-a3d2-773f12f2b7fc","fields":{"slug":"/js-const/"},"frontmatter":{"title":"자바스크립트 const(constant) 키워드 에 대한 고찰"}}},{"node":{"id":"ef98c32c-b112-56b5-8750-2a65f29a76f8","fields":{"slug":"/js-single-thread/"},"frontmatter":{"title":"싱글스레드인 자바스크립트는 어떻게 비동기 처리를 하는가"}}},{"node":{"id":"50d11bc0-654a-525a-9cd5-220a2335dfc6","fields":{"slug":"/js-indexOf/"},"frontmatter":{"title":"자바스크립트 indexOf() 와 시간 복잡도의 상관관계에 대한 고찰"}}},{"node":{"id":"e83d28ae-8193-56f4-9504-165a7670ea8c","fields":{"slug":"/2021-retrospect/"},"frontmatter":{"title":"2021년 블로그 운영 회고"}}},{"node":{"id":"2f3f5cd2-f838-50db-9e87-f864a0082032","fields":{"slug":"/react-real-code-splitting/"},"frontmatter":{"title":"리액트 Code-splitting 실적용 사례"}}},{"node":{"id":"3653cebd-84f0-5d9f-b911-7e3380e26d2f","fields":{"slug":"/mac-kernal-task/"},"frontmatter":{"title":"맥북 kernel_task 과점유 현상"}}},{"node":{"id":"ac8423e7-cc42-5cf5-8f71-2d94b816c3cc","fields":{"slug":"/js-async-defer/"},"frontmatter":{"title":"자바스크립트 script 태그 async & defer 속성"}}},{"node":{"id":"7500a096-2419-500f-9c14-f6faa8a8b733","fields":{"slug":"/js-reduce-break/"},"frontmatter":{"title":"자바스크립트 reduce break"}}},{"node":{"id":"862d4423-5868-5d5d-ae40-0996bf878f09","fields":{"slug":"/js-linked-list/"},"frontmatter":{"title":"Linked-list with JS"}}},{"node":{"id":"ce965688-bfc1-5d9e-9fa2-87faec37db48","fields":{"slug":"/js-stack/"},"frontmatter":{"title":"Stack with JS"}}},{"node":{"id":"3fb03326-51d0-5ea4-8f03-157013d29817","fields":{"slug":"/js-queue/"},"frontmatter":{"title":"Queue with JS"}}},{"node":{"id":"2de45d5f-9115-5e85-a7a4-199ed24049b7","fields":{"slug":"/react-4-anti-patterns/"},"frontmatter":{"title":"리액트에서 피해야할 안티패턴"}}},{"node":{"id":"0df70305-6854-532e-b7ed-bf1afa0a0f3b","fields":{"slug":"/js-array-element-swap/"},"frontmatter":{"title":"자바스크립트 배열 원소 swap"}}},{"node":{"id":"7c241801-fc74-5e9f-ad4d-0857819cdd2a","fields":{"slug":"/js-primitive-reference-types/"},"frontmatter":{"title":"자바스크립트 원시(primitive)타입 vs 참조(reference)타입"}}},{"node":{"id":"e3b5900a-32b4-5091-8025-7ca64a558e5a","fields":{"slug":"/sellon/"},"frontmatter":{"title":"멋쟁이사자처럼 10기 해커톤 이후 회고"}}},{"node":{"id":"6e309f62-7717-5898-b10d-ed350c7a5e9b","fields":{"slug":"/oohtech-success/"},"frontmatter":{"title":"우아한 테크코스 5기 프론트엔드 최종합격 후기 및 과정"}}},{"node":{"id":"46073002-10b1-599c-8d84-99d4ebb7cb78","fields":{"slug":"/js-global-state-management-vanilla-js/"},"frontmatter":{"title":"Vanilla JS 로 간단한 전역 상태 관리 시스템 만들기"}}},{"node":{"id":"5dae62fe-064f-5acf-8114-7e5f4d22a1e3","fields":{"slug":"/ts-non-null-assertion-operator/"},"frontmatter":{"title":"[Typescript] Non-null assertion operator ! (non-null 단언 연산자)"}}},{"node":{"id":"47305df1-1dc7-5b3c-b334-dcc9922f4cd6","fields":{"slug":"/woowacourse-first-month/"},"frontmatter":{"title":"🦉 부엉이의 함께 자라기 in 우테코"}}},{"node":{"id":"adcfbb9c-c845-5d03-be55-8fddde63ce29","fields":{"slug":"/js-wrapping-object/"},"frontmatter":{"title":"[JavaScript] 자바스크립트의 객체 wrapper에 대해 알아보자"}}},{"node":{"id":"9354e08d-30df-548f-a9df-b62ce6e5616c","fields":{"slug":"/woowacourse-level-one/"},"frontmatter":{"title":"우테코 레벨1 회고"}}},{"node":{"id":"c8c5c807-030d-5002-9827-ae80fe4a4c42","fields":{"slug":"/am-i-doing-good/"},"frontmatter":{"title":"나는 올바르게 성장하고 있는가"}}}]},"previous":{"fields":{"slug":"/js-single-thread/"},"frontmatter":{"title":"싱글스레드인 자바스크립트는 어떻게 비동기 처리를 하는가"}},"next":{"fields":{"slug":"/2021-retrospect/"},"frontmatter":{"title":"2021년 블로그 운영 회고"}}},"pageContext":{"id":"50d11bc0-654a-525a-9cd5-220a2335dfc6","series":null,"previousPostId":"ef98c32c-b112-56b5-8750-2a65f29a76f8","nextPostId":"e83d28ae-8193-56f4-9504-165a7670ea8c"}},"staticQueryHashes":[]}