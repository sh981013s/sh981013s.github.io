{"componentChunkName":"component---src-pages-series-jsx","path":"/series/","result":{"data":{"site":{"siteMetadata":{"title":"hwani.dev"}},"allMarkdownRemark":{"group":[{"fieldValue":"BOJ","totalCount":1},{"fieldValue":"Blog","totalCount":1},{"fieldValue":"JS_CleanCode","totalCount":8},{"fieldValue":"Javascript","totalCount":7},{"fieldValue":"Mac","totalCount":1},{"fieldValue":"React","totalCount":8},{"fieldValue":"VanillaJS","totalCount":7},{"fieldValue":"회고","totalCount":1}],"nodes":[{"excerpt":"서론 Javascript  메서드란  각 요소에 대한 주어진  를 실행하고,\n하나의 결과값을 반환한다. 나에게는 애증의 관계에 있는 메서드 중 하나이다. 생각보다 복잡한 것 같아서 기피하다가도,\n실제 사용해보면 이는 JS 에서 얼마나 강력한 기능을 가졌는지 매번 느끼게 된다. 보통  는 보편적으로  위와 같이 배열의 전체 합을 구할때 쓰이지만, 익숙해진다…","fields":{"slug":"/js-reduce-break/"},"frontmatter":{"date":"March 28, 2022","update":"Mar 28, 2022","title":"자바스크립트 reduce break","tags":["Javascript"],"series":null}},{"excerpt":"서론 일반적으로 나는 보통 Vanilla JS 로 프로젝트를 진행할때 \n 태그를 사용하여 \n 파일에  파일을   하는 방식을 일방적으로 떠올렸다.  \n하지만, 보통  태그 내부에  위와 같이 일반적인 방법으로 쓰곤 하였는데, 이때 브라우저의 동작방식은 \n\"엔진 자체가 위에서부터  을  하다가  태그를 만나면, \nHTML 의 Parsing 을 잠시 멈추고 …","fields":{"slug":"/js-async-defer/"},"frontmatter":{"date":"February 22, 2022","update":"Feb 22, 2022","title":"자바스크립트 script 태그 async & defer 속성","tags":["Javascript"],"series":null}},{"excerpt":"서론 내 개발환경을 보자면,  를 클렘쉘 모드로 덮어놓고, , ,  를 연결하여\n사용하고 있다. 하지만 줌(Zoom) 을 사용한다던가, 내가 사용하는 무거운? IDE 인 Webstorm 으로 개발을하며, 따로 서버까지 여는경우에는 타자치기가 힘들정도로\n버벅이고 맥북에서는 비행기 이륙하는 소리가 났다. 이러한 현상이 하루에도 수십번 일어나다 보니 도저히 나…","fields":{"slug":"/mac-kernal-task/"},"frontmatter":{"date":"February 16, 2022","update":"Feb 16, 2022","title":"맥북 kernel_task 과점유 현상","tags":["Mac"],"series":null}},{"excerpt":"서론 아래의 링크에서 내가 왜 리액트같은 SPA 에서  을 해야하는지에 대해 서술하였지만, 이번에는 내가 현재 진행하고 있는 프로젝트\n내부에서 코드분할 전 후 를 비교하며 결과를 기록하려한다.  https://hwani.dev/react-code-splitting/  본론 SPA (Single Page Application) 의 특성상 맨처음 페이지에 진…","fields":{"slug":"/react-real-code-splitting/"},"frontmatter":{"date":"February 14, 2022","update":"Feb 14, 2022","title":"리액트 Code-splitting 실적용 사례","tags":["React"],"series":null}},{"excerpt":"2021년 11월 말부터 블로그 작성을 시작하여 어느덧 3개월 정도가 지난것 같다. 원래는  에 강의를 듣고 이를 정리하는 식으로 진행하고 있었지만, 문뜩 든 생각이,  '이걸 누가 못하는가?' '저작권 법에 정말 문제가 없는가?'  '나에게 어떠한 방식으로 성장의 밑거름이 되었는가?' 정도가 있었다. 결론은, 강의를 듣고 정리하는 글들은 이미 잘하시는 …","fields":{"slug":"/2021-retrospect/"},"frontmatter":{"date":"February 10, 2022","update":"Feb 10, 2022","title":"2021년 블로그 운영 회고","tags":["회고"],"series":null}},{"excerpt":"서론 알고리즘을 연습하고 탐구하다 여지껏 쓴 코드들을 보며  에 대해 생각을 해보았다. 적어도 빅오표기법 기준  어쩔 수 없지 라고 생각하며 마구잡이 식으로  내부에  메소드를 남발하고 있었다.   위의 코드를 비교하며 나는 헷갈리기 시작했다.  메소드가 단순히 마법처럼 해당 value 의 index 를 뿅 하고 찾아 리턴해줄까..? \n만일 그렇다면 두개…","fields":{"slug":"/js-indexOf/"},"frontmatter":{"date":"January 29, 2022","update":"Jan 29, 2022","title":"자바스크립트 indexOf() 와 시간 복잡도의 상관관계에 대한 고찰","tags":["Javascript"],"series":null}},{"excerpt":"서론 자바스크립트는 하나의  과 하나의  을 가진 \n 이다. 그러므로 당연히 위에서부터 순차적으로 코드를\n실행하고 다음 코드로 넘어가기 전 실행하고 있는 코드를 끝내야만 한다. 맞다.  는 . 허나, 내 머리를 지끈거리게 만든 점은 코르를 작성하다보면 의도적으로 코드를  하는 행위를 \n심심치 않게 해왔지만,  '도대체 어떻게 싱글스레드인  자바스크립트는 …","fields":{"slug":"/js-single-thread/"},"frontmatter":{"date":"January 24, 2022","update":"Jan 24, 2022","title":"싱글스레드인 자바스크립트는 어떻게 비동기 처리를 하는가","tags":["Javascript"],"series":null}},{"excerpt":"서론 위의 코드는 자바스크립트를 학습한 사람이라면 누구나 에러를 예상할 수 있는 코드이다.\n이유라 하면 변수  은 const 키워드를 사용한 즉, 변하지 않는  을  후 우항의 표현식에 따른 값(1) 을\n 하였기 때문에 값을 변경할 수 없다. 아무런 생각없이 평소에 작성하던 위의 예시와 같은 코드에 대해 생각해보다가 정말 머리가 터지고, 자바스크립트에 대…","fields":{"slug":"/js-const/"},"frontmatter":{"date":"January 23, 2022","update":"Jan 23, 2022","title":"자바스크립트 const(constant) 키워드 에 대한 고찰","tags":["Javascript"],"series":null}},{"excerpt":"서론 리액트 프로트를 진행하다보면 위와같은 코드를 심심치 않게 쓴다. 나는 보통 url 을 통해 데이터를 fetching\n하였을때 비동기 처리를 위해 데이터가 있을때만 해당 코드가 동작하게 하는  이구나 하고 \n아무생각 없이 사용하곤 하였다. 그러던 중 해당 코드는 자바스크립트의  라는 개념을\n사용한다는 것을 알게되었고 이에대해 정리하려고 한다. 본론 논…","fields":{"slug":"/js-short-circuit-evaluation/"},"frontmatter":{"date":"January 20, 2022","update":"Jan 20, 2022","title":"자바스크립트 단축 평가","tags":["Javascript"],"series":null}},{"excerpt":"서론 자바스크립트 내에서 세미콜론(;) 은 언제 사용해야할까? 왜 사용해야할까?  언제 사용해야할까? 나는 흔히 인터넷에서 돌아다니는 말중에 '자바스크립트를 사용할때 \n세미콜론을 생략해도 되지만, 사용하도록 버릇을 들이는게 좋을것이다.' \n라는 대다수의 조언을 받아드려 마구잡이로 사용하고 있었다. 내가 세운 나만의 기준은 당시 '문장의 끝에 단다.' 정도…","fields":{"slug":"/js-semicolon/"},"frontmatter":{"date":"January 18, 2022","update":"Jan 18, 2022","title":"자바스크립트 내에서의 세미콜론(;) 사용","tags":["Javascript"],"series":null}},{"excerpt":"서론 외부 api 를 사용하는 상황에서 Docs 를 읽어본다 한들 실제 데이터의 형태가 어떻게 구성되어있는지 정확히 예상하고 코드를 짜는 행위는 불가능에 가깝다고 생각하고 에러를 유발한다. 나는 데이터 구성을 확인하기 위해 데이터 fetching 후 직접 콘솔로 찍어 확인하는 방법을 사용하였는데, 이는 차후에 코드의 에러를 유발할 수 있고, 자칫 까먹고 …","fields":{"slug":"/react-debugging/"},"frontmatter":{"date":"January 09, 2022","update":"Jan 09, 2022","title":"리액트 크롬 데브툴 디버깅(debugging)","tags":["React"],"series":null}},{"excerpt":"서론 가상화폐를 다루는 사이드 프로젝트를 하다가 사용자의  을 받아 검색결과에 맞는 가상화폐들만 보여주어야 하는 Search Input 을 구현하고 있었다.  해당 과정에서 사용자가 input 을 넣은 결과에 따라 output 을 도출해야 하지만, 사용자가 input 을 끝냈는지(마무리했는지) 에 대한 로직을 내가 직접 예측하기에는 무리라 생각이 들었다.…","fields":{"slug":"/react-debouncing/"},"frontmatter":{"date":"January 08, 2022","update":"Jan 08, 2022","title":"리액트 디바운싱(debouncing)","tags":["React"],"series":null}},{"excerpt":"서론 Javascript 를 사용할때, 특정 DOM 을 선택하여 정보를 얻거나 임의로 조작해야 할때,  혹은  과 같은 DOM Selector 함수를 사용하여 DOM 을 선택하였다. 하지만, React 는 이 기능을 대체할 수 있는  훅을 제공한다. 본론 useRef는 .current 프로퍼티로 전달된 인자(initialValue)로 초기화된 변경 가능한…","fields":{"slug":"/useRef/"},"frontmatter":{"date":"January 04, 2022","update":"Jan 04, 2022","title":"리액트 useRef","tags":["React"],"series":null}},{"excerpt":"서론 나는  을 사용하다가 유료이기도 하고, 나름 에 비교하면 무겁다고 체감이 되어 다시  로 돌아왔는데, \nwebstorm 에서는 훅을 사용할때 따로 import 를 해주지 않더라도 자동적으로 import 를 해주어 이 기능이 대단하단것을 몰랐다.\n따라서, VSC 에서도  기능을 사용 할 수 없는지에 대해 구글링을 해보았다. 본론 결론적으로는 쉽게 가능…","fields":{"slug":"/vsc-react-autoimport/"},"frontmatter":{"date":"January 03, 2022","update":"Jan 03, 2022","title":"VSC 리액트 auto import","tags":["React"],"series":null}},{"excerpt":"서론 종종 리액트 공부를 하다보면  문법을 사용할 것이기 때문에  와 같이 리액트를\nimport 해주어야 한다는 말들을 들었다. 하지만 생각해보면 나는 딱히 리액트로 프로젝트를 진행할때, JSX 문법을 사용해야 한다 하더라도 컴포넌트마다 리액트를 import 하는\n행위는 따르지 않고도 문제가 발견되지 않았었다. 본론 이에따라  와  을 통하여 찾아보니, …","fields":{"slug":"/import-react/"},"frontmatter":{"date":"January 02, 2022","update":"Jan 02, 2022","title":"importing React 와 JSX 사용의 상관관계","tags":["React"],"series":null}},{"excerpt":"서론 평소 프로젝트를 진행할때, 리액트를 사용한 Client 단만을 만들었는데, 나는 Express.js 에 대한 이해가 어느정도 있긴 하였다. 하지만 항상 느꼈던 점은 어떻게 Server(Node.js) 단과, Client(React ) 단을 동시에 연결할지를 몰랐었고, 알게된 과정을 기록하려 한다. 본론 내가 사용한 모듈 : Express nodemo…","fields":{"slug":"/connecting-server-client/"},"frontmatter":{"date":"December 27, 2021","update":"Dec 27, 2021","title":"React && Node.js 연결하기","tags":["React"],"series":null}},{"excerpt":"서론 대부분 React 앱들은 ,  또는  같은 Bundling Tool 을 사용하여 여러 파일을 하나로 병합한  을 웹 패이지에 포함하여 \n한번에 전체 앱을 로드 할 수 있다. 예시) App Bundle 위의 예시는 어떠한 방식으로 Bundling 을 하는지에 대한 예시일 뿐이다. (실제와는 많이 다르다)\n 나  와 같은 툴을 사용한다면 이미 App 자…","fields":{"slug":"/react-code-splitting/"},"frontmatter":{"date":"December 18, 2021","update":"Dec 18, 2021","title":"React - 코드 분할","tags":["React"],"series":"React"}},{"excerpt":"서론 이전의 포스트에서 타입검사를 왜 조심해야 하는지에 대해 말해보았다. 가장 주요한 이유로는 자바스크립트가 부족한 언어이다. 자바스크립트가 너무 느슨하다. 자바스크립트가 너무 유연하다. 자바스크립트가 동적이다. 라고 생각을 할 수 있을지도 모른다. 본론  하지만 javascript equality table 이라고 검색해보면, 이러한 테이블인 나온다. …","fields":{"slug":"/careful-typecast/"},"frontmatter":{"date":"December 02, 2021","update":"Dec 02, 2021","title":"JS - 형변환 주의하기","tags":["JS_CleanCode"],"series":"JS_CleanCode"}},{"excerpt":"서론  란 JS의 를 뜻한다. mdn 문서에 따르면  두개의 equal signs 은 그냥  라고 부르고,  , 즉 세개의 equal sign 은  라고 부른다.  이 둘은 무시 할 수 없는 크나큰 차이를 불러 일으킨다. 본론 자바스크립트를 보통 '미개한 언어이다.' 혹은 '헷갈리는 언어이다' 라고 생각하시는 분들은 아마 이러한 상황을 겪어본 분들일지도 …","fields":{"slug":"/no-eqeq/"},"frontmatter":{"date":"December 01, 2021","update":"Dec 01, 2021","title":"JS - eqeq 줄이기","tags":["JS_CleanCode"],"series":"JS_CleanCode"}},{"excerpt":"서론  와 , 결국 값으로 쓰기에는 둘다 무언가 없다 라는 것을 의미한다. 인터넷만 봐도 이 둘의 차이때문에 혼란을 겪는 사람이 많고, 이에따라 이를 풍자하는 밈들 또한 많다. 언어적으로 더 엄격하다면 이러한 일도 없겠지만 JS 에서는 헷갈릴 가능성이 높다고 생각한다. 본론 을 뒤집어보면은 true 라고 표현하지만, 을 으로 바꾸면 false 라고 표현한…","fields":{"slug":"/undefined-null/"},"frontmatter":{"date":"November 30, 2021","update":"Nov 30, 2021","title":"JS - undefined & null","tags":["JS_CleanCode"],"series":"JS_CleanCode"}},{"excerpt":"서론 간단한 앱을 개발할때도 타입검사를 흔하게 사용한다. JS 에서 타입을 검사할때 제일먼저 떠오르는 것은  연산자 이다. typeof 는 우항에 있는 피연산자를 평가한 후, 문자열로 반환해준다.\n하지만, typeof 는 치명적인 단점이 있는데, 모든것을 커버해주지 못한다는 것이다. 이뜻은, Primitive 원시값, Reference 자료형에 해당하는 …","fields":{"slug":"/types-of-javascript/"},"frontmatter":{"date":"November 29, 2021","update":"Nov 29, 2021","title":"JS - 타입 검사","tags":["JS_CleanCode"],"series":"JS_CleanCode"}},{"excerpt":"Intro 5번째 Mini Vanilla Js Project 이다. 이번에는  라는  를 사용하여 개인자산 체크 기능을 만들어보았다! Main 소스코드 liveDemo  Conclusion JS 에서 가장 흔하게 사용되는? 메서드인 , , , 를 주축으로 구현을 해보았다. 간편화를 위해, input 으로 user 정보를 받는것이 아닌, 외부 api 를 사…","fields":{"slug":"/personal-information-list/"},"frontmatter":{"date":"November 28, 2021","update":"Nov 28, 2021","title":"개인자산 체크 with Vanilla JS","tags":["VanillaJS"],"series":null}},{"excerpt":"Intro 6번째 Mini Vanilla Js Project 이다. 이번에는 순수  와  를 사용하여 Sidebar 와 Modal 을 직접 구현해보았다. Main 소스코드 liveDemo  Conclusion 사실 내가 프로젝트를 진행할때  를 사용했던 이유는 style 적인 이유보다는 JS? 적인 이유가 더 컸다.\n이 뜻은, UI Library 를 사용…","fields":{"slug":"/menu-sidebar-modal/"},"frontmatter":{"date":"November 28, 2021","update":"Nov 28, 2021","title":"사이드바, 모달 with Vanilla JS","tags":["VanillaJS"],"series":null}},{"excerpt":"Intro 4번째 Mini Vanilla Js Project 이다. 이번에는  라는  를 사용하여 환전 기능을 만들어보았다! Main 소스코드 liveDemo  Conclusion 처음으로 vanillaJS 를 사용하며, third-party api 를 사용해보았다. 기존에 리액트를 배우고 사용했을때는 데이터를 요청하는 방식 자체에 대해서 당연하게 고민도…","fields":{"slug":"/exchange-rate-calculator/"},"frontmatter":{"date":"November 27, 2021","update":"Nov 27, 2021","title":"환전기 with Vanilla JS","tags":["VanillaJS"],"series":null}},{"excerpt":"Intro 새번째 Mini Vanilla Js Project 이다. video api 를 사용하여 비디오 플레이어를 만들어 보았다. Main 소스코드 liveDemo  Conclusion 각 버튼들과 상황에 따른 전반적인 동작 원리와 기능들을 직접 공부하고 구현하려다 보니, 간단할지라도 배우는점이 많았다.  이제 앞으로 프로젝트를 진행하며  태그를 사용해…","fields":{"slug":"/custom-video-player/"},"frontmatter":{"date":"November 27, 2021","update":"Nov 27, 2021","title":"비디오 플레이어 with Vanilla JS","tags":["VanillaJS"],"series":null}},{"excerpt":"Intro 두번째 Mini Vanilla Js Project 이다. 이번에는 간단하게 영화 좌석 선택을 만들어보았고, 전과 다른점이 있다면, 이번에는  를 사용하여,  된 후에도 데이터가 남아있게 하였다. Main 소스코드 liveDemo  Conclusion Vanilla JS 프로젝트를 진행하면서,  를 사용할때도,  속성을 사용할 수 있다는 것을 배…","fields":{"slug":"/movie-seat-booking/"},"frontmatter":{"date":"November 26, 2021","update":"Nov 26, 2021","title":"영화 좌석 선택 with Vanilla JS","tags":["VanillaJS"],"series":null}},{"excerpt":"Intro 리액트를 공부하거나, 프로젝트를 했으로때 주로 간단한 ui 적인 부분은 라이브러리를 사용하여 해결 했었지만, vanilla JS 를 사용하여 내가 직접 가능한 부분은 공부하여 만들어 보려고 하였다. Main 소스코드 liveDemo  HTML JS","fields":{"slug":"/vainllajs-registration-form/"},"frontmatter":{"date":"November 24, 2021","update":"Nov 24, 2021","title":"회원가입 폼 with Vanilla JS","tags":["VanillaJS"],"series":null}},{"excerpt":"호이스팅이란? 호이스팅을 간단하게 말하자면 런타임시에 과 이 분리된 것을 뜻한다. 런타임시기는 프로그램이 동작 할 때를 의미한다. 코드를 잘성할 때는 이 스코프는 이렇게 동작할 것이다. 라고 예상을 하는데,\n실상 런타임시에는 그렇게 동작하지 않을 때가 있다. 해당 현상중의 하나가  인데, 호이스팅은 로 선언한 변수 초기화가 제대로 되어있지 않았을때,  상…","fields":{"slug":"/no-hoisting/"},"frontmatter":{"date":"November 23, 2021","update":"Nov 23, 2021","title":"JS - 호이스팅 주의하기","tags":["JS_CleanCode"],"series":"JS_CleanCode"}},{"excerpt":"임시변수란? 자바스크립트를 다룰때, 기존의 Scope 를 다룰때,   을 사용하지 말고,   또한 피해야 한다고 들었다. 임시변수란, Scope 안에서 전역변수처럼 활용되는 친구를 생각한다. 위의 코드의  도 마찬가지이다.\n어떻게 보면 이것도 const 니까 문제 없을까? 라고 생각 할 수 있지만, 이 임시 객체도 함수가 커지  이나 다름없는 상황이 발생…","fields":{"slug":"/no-temporary-variable/"},"frontmatter":{"date":"November 22, 2021","update":"Nov 22, 2021","title":"JS - 임시변수 제거하기","tags":["JS_CleanCode"],"series":"JS_CleanCode"}},{"excerpt":"백준 1653번 링크 풀이 처음에는 해멧지만, 이후에 \n전형적인 이분탐색 문제라고 판단이 들었다. 이분탐색이란, 탐색 범위를 두 부분으로 분할해서 찾는 방식으로,    값을 잡아서 탐색한다.","fields":{"slug":"/baekjoon-1654/"},"frontmatter":{"date":"November 22, 2021","update":"Nov 22, 2021","title":"[BOJ] 1654 랜선 자르기 (Node.js)","tags":["BOJ"],"series":null}},{"excerpt":"결과물 미리보기  CheckLists 메뉴에 새로운 메뉴를 확인 버튼 또는 엔터키 입력으로 추가한다. 메뉴가 추가되고 나면, input은 빈 값으로 초기화한다. 사용자 입력값이 빈 값이라면 추가되지 않는다. 메뉴의 수정 버튼을 눌러 메뉴 이름 수정할 수 있다. 메뉴 수정시 브라우저에서 제공하는  인터페이스를 활용한다. 메뉴 삭제 버튼을 이용하여 메뉴 삭제…","fields":{"slug":"/starbucks-menu-1/"},"frontmatter":{"date":"November 21, 2021","update":"Nov 21, 2021","title":"스타벅스 메뉴관리 with vanilla JS","tags":["VanillaJS"],"series":null}},{"excerpt":"SEO 란? SEO 는  의 약자로써, 구글 등 여러 Search Engine 의 상위 노출을 위한  검색엔진 최적화이다. 과정 SEO 를 위해 위와 같이 필요한 정보들을 입력해주었고,  에서 데이터 분석 및, 동작이 제대로 되는지에 대한   정보를 위해,  또한 추가해주었다.  또한,  을 작성하고 제출하여, 정상적으로 search engine 이 나의…","fields":{"slug":"/blog-SEO/"},"frontmatter":{"date":"November 21, 2021","update":"Nov 21, 2021","title":"블로그 SEO","tags":["Blog"],"series":"Blog settings"}},{"excerpt":"전역공간을 왜 사용하면 안되는지, 혹은 왜 사용을 최소화 해야하는지 알아보자. 전역공간 사용을 최소화해라 라는 말 또한 JS 공부를 하며 많이 들었던 내용이고,\n해당 이유에 대해서는 주로 경험에 의하여 누군가 또는 자바스크립트 생태계때문에 강의 혹은 책 에 의하여 회사 또는 멘토에 의하여 Lint 때문에 알 수도 있지만, 경험과 누군가, 책, Lint 때…","fields":{"slug":"/no-global/"},"frontmatter":{"date":"November 20, 2021","update":"Nov 20, 2021","title":"JS - 전역 공간 사용 최소화","tags":["JS_CleanCode"],"series":"JS_CleanCode"}},{"excerpt":"자바스크립트를 공부하면서 var 을 지양하고 const/let 을 지향하세요. 라는 말을 수도없이 들었다. 하지만 왜...? const/let 은 ES2015 에 나왔고, 이전에는 어쩔 수 없이 var를 사용해야만 했다. 그렇다면 현시점에서 왜  을 사용해야하나의 핵심은 var 는 함수 스코프, const/let 은 블록 단위 스코프를 가지기 때문. 이라…","fields":{"slug":"/no-var/"},"frontmatter":{"date":"November 19, 2021","update":"Nov 19, 2021","title":"JS - var 를 지양하자","tags":["JS_CleanCode"],"series":"JS_CleanCode"}}]}},"pageContext":{}},"staticQueryHashes":[]}