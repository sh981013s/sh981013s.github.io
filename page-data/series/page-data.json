{"componentChunkName":"component---src-pages-series-jsx","path":"/series/","result":{"data":{"site":{"siteMetadata":{"title":"hwani.dev"}},"allMarkdownRemark":{"group":[{"fieldValue":"BOJ","totalCount":1},{"fieldValue":"Blog","totalCount":1},{"fieldValue":"JS_CleanCode","totalCount":5},{"fieldValue":"Vanilla JS","totalCount":1},{"fieldValue":"VanillaJS","totalCount":2}],"nodes":[{"excerpt":"Intro 두번째 Mini Vanilla Js Project 이다. 이번에는 간단하게 영화 좌석 선택을 만들어보았고, 전과 다른점이 있다면, 이번에는  를 사용하여,  된 후에도 데이터가 남아있게 하였다. Preview 소스코드 liveDemo  Summary Vanilla JS 프로젝트를 진행하면서,  를 사용할때도,  속성을 사용할 수 있다는 것을 배…","fields":{"slug":"/movie-seat-booking/"},"frontmatter":{"date":"November 26, 2021","update":"Nov 26, 2021","title":"영화 좌석 선택 with Vanilla JS","tags":["VanillaJS"],"series":null}},{"excerpt":"개요 리액트를 공부하거나, 프로젝트를 했으로때 주로 간단한 ui 적인 부분은 라이브러리를 사용하여 해결 했었지만, vanilla JS 를 사용하여 내가 직접 가능한 부분은 공부하여 만들어 보려고 하였다. 미리보기 소스코드 liveDemo  HTML JS","fields":{"slug":"/vainllajs-registration-form/"},"frontmatter":{"date":"November 24, 2021","update":"Nov 24, 2021","title":"회원가입 폼 with Vanilla JS","tags":["VanillaJS"],"series":null}},{"excerpt":"서론 간단한 앱을 개발할때도 타입검사를 흔하게 사용한다. JS 에서 타입을 검사할때 제일먼저 떠오르는 것은  연산자 이다. typeof 는 우항에 있는 피연산자를 평가한 후, 문자열로 반환해준다.\n하지만, typeof 는 치명적인 단점이 있는데, 모든것을 커버해주지 못한다는 것이다. 이뜻은, Pri","fields":{"slug":"/types-of-javascript/"},"frontmatter":{"date":"November 24, 2021","update":"Nov 24, 2021","title":"JS 타입 검사","tags":["JS_CleanCode"],"series":"JS_CleanCode"}},{"excerpt":"호이스팅이란? 호이스팅을 간단하게 말하자면 런타임시에 과 이 분리된 것을 뜻한다. 런타임시기는 프로그램이 동작 할 때를 의미한다. 코드를 잘성할 때는 이 스코프는 이렇게 동작할 것이다. 라고 예상을 하는데,\n실상 런타임시에는 그렇게 동작하지 않을 때가 있다. 해당 현상중의 하나가  인데, 호이스팅은 로 선언한 변수 초기화가 제대로 되어있지 않았을때,  상…","fields":{"slug":"/no-hoisting/"},"frontmatter":{"date":"November 23, 2021","update":"Nov 23, 2021","title":"호이스팅 주의하기","tags":["JS_CleanCode"],"series":"JS_CleanCode"}},{"excerpt":"임시변수란? 자바스크립트를 다룰때, 기존의 Scope 를 다룰때,   을 사용하지 말고,   또한 피해야 한다고 들었다. 임시변수란, Scope 안에서 전역변수처럼 활용되는 친구를 생각한다. 위의 코드의  도 마찬가지이다.\n어떻게 보면 이것도 const 니까 문제 없을까? 라고 생각 할 수 있지만, 이 임시 객체도 함수가 커지  이나 다름없는 상황이 발생…","fields":{"slug":"/no-temporary-variable/"},"frontmatter":{"date":"November 22, 2021","update":"Nov 22, 2021","title":"임시변수 제거하기","tags":["JS_CleanCode"],"series":"JS_CleanCode"}},{"excerpt":"백준 1653번 링크 풀이 처음에는 해멧지만, 이후에 \n전형적인 이분탐색 문제라고 판단이 들었다. 이분탐색이란, 탐색 범위를 두 부분으로 분할해서 찾는 방식으로,    값을 잡아서 탐색한다.","fields":{"slug":"/baekjoon-1654/"},"frontmatter":{"date":"November 22, 2021","update":"Nov 22, 2021","title":"[BOJ] 1654 랜선 자르기 (Node.js)","tags":["BOJ"],"series":null}},{"excerpt":"결과물 미리보기  CheckLists 메뉴에 새로운 메뉴를 확인 버튼 또는 엔터키 입력으로 추가한다. 메뉴가 추가되고 나면, input은 빈 값으로 초기화한다. 사용자 입력값이 빈 값이라면 추가되지 않는다. 메뉴의 수정 버튼을 눌러 메뉴 이름 수정할 수 있다. 메뉴 수정시 브라우저에서 제공하는  인터페이스를 활용한다. 메뉴 삭제 버튼을 이용하여 메뉴 삭제…","fields":{"slug":"/starbucks-menu-1/"},"frontmatter":{"date":"November 21, 2021","update":"Nov 21, 2021","title":"스타벅스 메뉴관리 with vanilla JS","tags":["Vanilla JS"],"series":null}},{"excerpt":"SEO 란? SEO 는  의 약자로써, 구글 등 여러 Search Engine 의 상위 노출을 위한  검색엔진 최적화이다. 과정 SEO 를 위해 위와 같이 필요한 정보들을 입력해주었고,  에서 데이터 분석 및, 동작이 제대로 되는지에 대한   정보를 위해,  또한 추가해주었다.  또한,  을 작성하고 제출하여, 정상적으로 search engine 이 나의…","fields":{"slug":"/blog-SEO/"},"frontmatter":{"date":"November 21, 2021","update":"Nov 21, 2021","title":"블로그 SEO","tags":["Blog"],"series":"Blog settings"}},{"excerpt":"전역공간을 왜 사용하면 안되는지, 혹은 왜 사용을 최소화 해야하는지 알아보자. 전역공간 사용을 최소화해라 라는 말 또한 JS 공부를 하며 많이 들었던 내용이고,\n해당 이유에 대해서는 주로 경험에 의하여 누군가 또는 자바스크립트 생태계때문에 강의 혹은 책 에 의하여 회사 또는 멘토에 의하여 Lint 때문에 알 수도 있지만, 경험과 누군가, 책, Lint 때…","fields":{"slug":"/no-global/"},"frontmatter":{"date":"November 20, 2021","update":"Nov 20, 2021","title":"전역 공간 사용 최소화","tags":["JS_CleanCode"],"series":"JS_CleanCode"}},{"excerpt":"자바스크립트를 공부하면서 var 을 지양하고 const/let 을 지향하세요. 라는 말을 수도없이 들었다. 하지만 왜...? const/let 은 ES2015 에 나왔고, 이전에는 어쩔 수 없이 var를 사용해야만 했다. 그렇다면 현시점에서 왜  을 사용해야하나의 핵심은 var 는 함수 스코프, const/let 은 블록 단위 스코프를 가지기 때문. 이라…","fields":{"slug":"/no-var/"},"frontmatter":{"date":"November 19, 2021","update":"Nov 19, 2021","title":"var 를 지양하자","tags":["JS_CleanCode"],"series":"JS_CleanCode"}}]}},"pageContext":{}},"staticQueryHashes":[]}