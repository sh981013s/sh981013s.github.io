{"componentChunkName":"component---src-templates-series-jsx","path":"/series/JS_CleanCode","result":{"data":{"posts":{"nodes":[{"excerpt":"자바스크립트를 공부하면서 var 을 지양하고 const/let 을 지향하세요. 라는 말을 수도없이 들었다. 하지만 왜...? const/let 은 ES2015 에 나왔고, 이전에는 어쩔 수 없이 var를 사용해야만 했다. 그렇다면 현시점에서 왜  을 사용해야하나의 핵심은 var 는 함수 스코프, const/let 은 블록 단위 스코프를 가지기 때문. 이라…","fields":{"slug":"/no-var/"},"frontmatter":{"date":"November 19, 2021","update":"Nov 19, 2021","title":"JS - var 를 지양하자","tags":["JS_CleanCode"]}},{"excerpt":"전역공간을 왜 사용하면 안되는지, 혹은 왜 사용을 최소화 해야하는지 알아보자. 전역공간 사용을 최소화해라 라는 말 또한 JS 공부를 하며 많이 들었던 내용이고,\n해당 이유에 대해서는 주로 경험에 의하여 누군가 또는 자바스크립트 생태계때문에 강의 혹은 책 에 의하여 회사 또는 멘토에 의하여 Lint 때문에 알 수도 있지만, 경험과 누군가, 책, Lint 때…","fields":{"slug":"/no-global/"},"frontmatter":{"date":"November 20, 2021","update":"Nov 20, 2021","title":"JS - 전역 공간 사용 최소화","tags":["JS_CleanCode"]}},{"excerpt":"임시변수란? 자바스크립트를 다룰때, 기존의 Scope 를 다룰때,   을 사용하지 말고,   또한 피해야 한다고 들었다. 임시변수란, Scope 안에서 전역변수처럼 활용되는 친구를 생각한다. 위의 코드의  도 마찬가지이다.\n어떻게 보면 이것도 const 니까 문제 없을까? 라고 생각 할 수 있지만, 이 임시 객체도 함수가 커지  이나 다름없는 상황이 발생…","fields":{"slug":"/no-temporary-variable/"},"frontmatter":{"date":"November 22, 2021","update":"Nov 22, 2021","title":"JS - 임시변수 제거하기","tags":["JS_CleanCode"]}},{"excerpt":"호이스팅이란? 호이스팅을 간단하게 말하자면 런타임시에 과 이 분리된 것을 뜻한다. 런타임시기는 프로그램이 동작 할 때를 의미한다. 코드를 잘성할 때는 이 스코프는 이렇게 동작할 것이다. 라고 예상을 하는데,\n실상 런타임시에는 그렇게 동작하지 않을 때가 있다. 해당 현상중의 하나가  인데, 호이스팅은 로 선언한 변수 초기화가 제대로 되어있지 않았을때,  상…","fields":{"slug":"/no-hoisting/"},"frontmatter":{"date":"November 23, 2021","update":"Nov 23, 2021","title":"JS - 호이스팅 주의하기","tags":["JS_CleanCode"]}},{"excerpt":"서론 간단한 앱을 개발할때도 타입검사를 흔하게 사용한다. JS 에서 타입을 검사할때 제일먼저 떠오르는 것은  연산자 이다. typeof 는 우항에 있는 피연산자를 평가한 후, 문자열로 반환해준다.\n하지만, typeof 는 치명적인 단점이 있는데, 모든것을 커버해주지 못한다는 것이다. 이뜻은, Primitive 원시값, Reference 자료형에 해당하는 …","fields":{"slug":"/types-of-javascript/"},"frontmatter":{"date":"November 29, 2021","update":"Nov 29, 2021","title":"JS - 타입 검사","tags":["JS_CleanCode"]}},{"excerpt":"서론  와 , 결국 값으로 쓰기에는 둘다 무언가 없다 라는 것을 의미한다. 인터넷만 봐도 이 둘의 차이때문에 혼란을 겪는 사람이 많고, 이에따라 이를 풍자하는 밈들 또한 많다. 언어적으로 더 엄격하다면 이러한 일도 없겠지만 JS 에서는 헷갈릴 가능성이 높다고 생각한다. 본론 을 뒤집어보면은 true 라고 표현하지만, 을 으로 바꾸면 false 라고 표현한…","fields":{"slug":"/undefined-null/"},"frontmatter":{"date":"November 30, 2021","update":"Nov 30, 2021","title":"JS - undefined & null","tags":["JS_CleanCode"]}},{"excerpt":"서론  란 JS의 를 뜻한다. mdn 문서에 따르면  두개의 equal signs 은 그냥  라고 부르고,  , 즉 세개의 equal sign 은  라고 부른다.  이 둘은 무시 할 수 없는 크나큰 차이를 불러 일으킨다. 본론 자바스크립트를 보통 '미개한 언어이다.' 혹은 '헷갈리는 언어이다' 라고 생각하시는 분들은 아마 이러한 상황을 겪어본 분들일지도 …","fields":{"slug":"/no-eqeq/"},"frontmatter":{"date":"December 01, 2021","update":"Dec 01, 2021","title":"JS - eqeq 줄이기","tags":["JS_CleanCode"]}}]}},"pageContext":{"series":"JS_CleanCode"}},"staticQueryHashes":[]}