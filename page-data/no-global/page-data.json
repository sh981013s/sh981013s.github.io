{"componentChunkName":"component---src-templates-post-jsx","path":"/no-global/","result":{"data":{"site":{"siteMetadata":{"title":"hwani.dev"}},"markdownRemark":{"id":"ac5983fa-822c-56a4-840b-2d47c94bfc0f","excerpt":"전역공간을 왜 사용하면 안되는지, 혹은 왜 사용을 최소화 해야하는지 알아보자. 전역공간 사용을 최소화해라 라는 말 또한 JS 공부를 하며 많이 들었던 내용이고,\n해당 이유에 대해서는 주로 경험에 의하여 누군가 또는 자바스크립트 생태계때문에 강의 혹은 책 에 의하여 회사 또는 멘토에 의하여 Lint 때문에 알 수도 있지만, 경험과 누군가, 책, Lint 때…","html":"<h3>전역공간을 왜 사용하면 안되는지, 혹은 왜 사용을 최소화 해야하는지 알아보자.</h3>\n<blockquote>\n<p>전역공간 사용을 최소화해라</p>\n</blockquote>\n<p>라는 말 또한 JS 공부를 하며 많이 들었던 내용이고,\n해당 이유에 대해서는 주로</p>\n<ul>\n<li>경험에 의하여</li>\n<li>누군가 또는 자바스크립트 생태계때문에</li>\n<li>강의 혹은 책 에 의하여</li>\n<li>회사 또는 멘토에 의하여</li>\n<li>Lint 때문에</li>\n</ul>\n<p>알 수도 있지만, 경험과 누군가, 책, Lint 때문에 최소화했지만, 해당 이유에 대하여 정확히는 생각해보지 않았었다.</p>\n<hr>\n<h3>전역공간이란?</h3>\n<p>전역공간은 말그대로 전역, 최상위 이고,\n대체로 <code class=\"language-text\">window</code> 와 <code class=\"language-text\">global</code>로 나뉜다.\n이유는, 브라우저 환경에서는 window 가 최상위이고,\nnode 환경에서는 global 이 최상위이다.</p>\n<h3>이유에 대한 코드예시</h3>\n<p><img src=\"https://images.velog.io/images/sh981013s/post/da7e0621-40b3-4303-883d-32b1e17a1b67/image.png\"></p>\n<p>우선 하나의 html 파일에서는 less<em>global1.js 와 less</em>global2.js 를 가져오고 있다.</p>\n<p><img src=\"https://images.velog.io/images/sh981013s/post/8652c1a9-3a85-496b-9f64-3eb35039dc29/image.png\"></p>\n<p>global 변수를 선언 및 할당하여 콘솔을 찍어보니 출력이 된다.</p>\n<p><img src=\"https://images.velog.io/images/sh981013s/post/f02ed25c-8b9d-4343-9acb-ca7eebf5e71c/image.png\"></p>\n<p>여기서 문제가 첫번째 js file 에서 선언한 변수가 다른 file 에서도 접근이 가능하고, 또한 몽키패치로 인하여 window.~ 로도 접근이 가능해진다는 것이다. 핵심은 파일을 나눈다고 해도, scope 자체가 나누어지지 않는다는것이다.</p>\n<hr>\n<h3>결론</h3>\n<p>전역공간 사용을 최소화하여 전역공간을 더럽히지 않아야한다.\n이유는, 어디서나 접근이 가능하고 스코프 분리시에 위험이 따른다.</p>\n<p>이를 방지하기 위해,\n전역변수를 사용하지 않고 지역변수를 사용하거나,\nwindow.global 을 조작하지 않을 수 있고.\nconst/let 을 사용하는 것만으로도 많은 문제가 해결된다.</p>","frontmatter":{"title":"JS - 전역 공간 사용 최소화","date":"November 20, 2021","update":"November 20, 2021","tags":["JS_CleanCode"],"series":"JS_CleanCode"},"fields":{"slug":"/no-global/","readingTime":{"minutes":2.43}}},"seriesList":{"edges":[{"node":{"id":"3ad93a4b-ef31-52e2-98ff-40052aff7ae5","fields":{"slug":"/no-var/"},"frontmatter":{"title":"JS - var 를 지양하자"}}},{"node":{"id":"ac5983fa-822c-56a4-840b-2d47c94bfc0f","fields":{"slug":"/no-global/"},"frontmatter":{"title":"JS - 전역 공간 사용 최소화"}}},{"node":{"id":"7e67a6be-a154-540b-9e7f-1596601d252d","fields":{"slug":"/no-temporary-variable/"},"frontmatter":{"title":"JS - 임시변수 제거하기"}}},{"node":{"id":"785e2a98-e2eb-581a-bdaf-bb516ee9fab2","fields":{"slug":"/no-hoisting/"},"frontmatter":{"title":"JS - 호이스팅 주의하기"}}},{"node":{"id":"9c8002eb-dd07-5e2a-9975-e372314ee212","fields":{"slug":"/types-of-javascript/"},"frontmatter":{"title":"JS - 타입 검사"}}},{"node":{"id":"5fad31a0-fb35-5c1d-9eaa-4ad3101ae8a3","fields":{"slug":"/undefined-null/"},"frontmatter":{"title":"JS - undefined & null"}}},{"node":{"id":"2ac21fc2-48c2-5c71-8f4f-1bfd1b5892ed","fields":{"slug":"/no-eqeq/"},"frontmatter":{"title":"JS - eqeq 줄이기"}}},{"node":{"id":"82fbaec1-d348-5249-8ecc-a75c1aefc233","fields":{"slug":"/careful-typecast/"},"frontmatter":{"title":"JS - 형변환 주의하기"}}}]},"previous":{"fields":{"slug":"/no-var/"},"frontmatter":{"title":"JS - var 를 지양하자"}},"next":{"fields":{"slug":"/starbucks-menu-1/"},"frontmatter":{"title":"스타벅스 메뉴관리 with vanilla JS"}}},"pageContext":{"id":"ac5983fa-822c-56a4-840b-2d47c94bfc0f","series":"JS_CleanCode","previousPostId":"3ad93a4b-ef31-52e2-98ff-40052aff7ae5","nextPostId":"08c6f9af-0167-54a0-9af6-45bab9619823"}},"staticQueryHashes":[]}