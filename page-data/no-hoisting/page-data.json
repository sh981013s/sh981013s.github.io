{"componentChunkName":"component---src-templates-post-jsx","path":"/no-hoisting/","result":{"data":{"site":{"siteMetadata":{"title":"hwani.dev"}},"markdownRemark":{"id":"fc9e3742-bf54-5ffe-a72f-f03f049fc32b","excerpt":"호이스팅이란? 호이스팅을 간단하게 말하자면 런타임시에 과 이 분리된 것을 뜻한다. 런타임시기는 프로그램이 동작 할 때를 의미한다. 코드를 잘성할 때는 이 스코프는 이렇게 동작할 것이다. 라고 예상을 하는데,\n실상 런타임시에는 그렇게 동작하지 않을 때가 있다. 해당 현상중의 하나가  인데, 호이스팅은 로 선언한 변수 초기화가 제대로 되어있지 않았을때,  상…","html":"<h2>호이스팅이란?</h2>\n<p>호이스팅을 간단하게 말하자면 런타임시에 <code class=\"language-text\">선언</code>과 <code class=\"language-text\">할당</code>이 분리된 것을 뜻한다.</p>\n<p>런타임시기는 프로그램이 동작 할 때를 의미한다.</p>\n<p>코드를 잘성할 때는 이 스코프는 이렇게 동작할 것이다. 라고 예상을 하는데,\n실상 런타임시에는 그렇게 동작하지 않을 때가 있다.</p>\n<p>해당 현상중의 하나가 <code class=\"language-text\">호이스팅</code> 인데, 호이스팅은 <code class=\"language-text\">var</code>로 선언한 변수 초기화가 제대로 되어있지 않았을때, <code class=\"language-text\">undefined</code> 상태로 코드의 상단으로 끌어올려지는 것을 뜻한다.</p>\n<p>물론 <code class=\"language-text\">let &amp; const</code> 를 사용한다면 이러한 현상을 잘 겪지 않겠지만 (TDZ)\n<code class=\"language-text\">var</code>에서는 종종 일어난다.</p>\n<hr>\n<h2>예시</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> global <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">outer</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>global<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n  <span class=\"token keyword\">var</span> global <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">inner</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> global <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>global<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  global <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>global<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 코드가 호이스팅이 동작한 사례라고 생각한다.</p>\n<p>선언과 할당 부분이 메모리 공간을 선언하기전에, 미리 할당을 하기때문에 이러한 일이 발생한다.</p>\n<h2>쉬운예시</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">duplicatedVar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span>\n  \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n  \n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n  \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">duplicatedVar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>var 는 중복 선언이 가능하고, 중복 선언해도 오류 없이 undefined 를 반환한다.\n원래 다른 언어였다면, 이 코드는 에러를 반환한다는 예측을 할텐데, 예측과 다르게 런타임 시에 undefined 를 리턴하기에\n위험할 수 있다.</p>\n<h2>골때리는 예시</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> sum<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// function</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>콘솔로 찍어보니, 변수가 아닌 함수라고 말한다. 결국 아래에 위치한 함수조차도 hoisting 이 되었다는 뜻이다.\n함수 선언문이 변수를 뒤집어 엎어버린다.</p>\n<hr>\n<h2>결론</h2>\n<p>호이스팅은 런타임시에 바로 선언을 최상단으로 끌어올려 줌으로써, 문제는 코드를 작성할 때 예측하지 못한 실행결과를 노출하게 된다. 이러한 예측하지 못하는 상황들을 탈피하기 위해 var 를 지양한다.</p>\n<p>또한 함수또한 호이스팅이 되고, 이를 탈피하기 위해서는 함수 표현식을 사용하는 방법이 있다.</p>\n<p>let 과 const 를 지향하자!</p>","frontmatter":{"title":"JS - 호이스팅 주의하기","date":"November 23, 2021","update":"November 23, 2021","tags":["JS_CleanCode"],"series":"JS_CleanCode"},"fields":{"slug":"/no-hoisting/","readingTime":{"minutes":3.095}}},"seriesList":{"edges":[{"node":{"id":"22a2aed1-aa36-51d6-9ce8-fb6f34e8fb66","fields":{"slug":"/no-var/"},"frontmatter":{"title":"JS - var 를 지양하자"}}},{"node":{"id":"ec9410bb-52dd-553a-b26b-7a01b389e775","fields":{"slug":"/no-global/"},"frontmatter":{"title":"JS - 전역 공간 사용 최소화"}}},{"node":{"id":"b5b959dd-cd6a-580f-8165-824ce6e43c65","fields":{"slug":"/no-temporary-variable/"},"frontmatter":{"title":"JS - 임시변수 제거하기"}}},{"node":{"id":"fc9e3742-bf54-5ffe-a72f-f03f049fc32b","fields":{"slug":"/no-hoisting/"},"frontmatter":{"title":"JS - 호이스팅 주의하기"}}},{"node":{"id":"54d4bb98-9bf4-5b86-92d2-259a7dd4b6f0","fields":{"slug":"/types-of-javascript/"},"frontmatter":{"title":"JS - 타입 검사"}}},{"node":{"id":"c09dfcba-c358-5c45-803e-5b53d39c2e70","fields":{"slug":"/undefined-null/"},"frontmatter":{"title":"JS - undefined & null"}}},{"node":{"id":"2db4eac8-4b7c-5df7-9d45-39f5273aaa85","fields":{"slug":"/no-eqeq/"},"frontmatter":{"title":"JS - eqeq 줄이기"}}}]},"previous":{"fields":{"slug":"/no-temporary-variable/"},"frontmatter":{"title":"JS - 임시변수 제거하기"}},"next":{"fields":{"slug":"/vainllajs-registration-form/"},"frontmatter":{"title":"회원가입 폼 with Vanilla JS"}}},"pageContext":{"id":"fc9e3742-bf54-5ffe-a72f-f03f049fc32b","series":"JS_CleanCode","previousPostId":"b5b959dd-cd6a-580f-8165-824ce6e43c65","nextPostId":"b3bae6a0-d405-5d05-a043-d8638b60e890"}},"staticQueryHashes":[]}