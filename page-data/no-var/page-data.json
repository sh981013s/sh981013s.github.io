{"componentChunkName":"component---src-templates-post-jsx","path":"/no-var/","result":{"data":{"site":{"siteMetadata":{"title":"hwani.dev"}},"markdownRemark":{"id":"22a2aed1-aa36-51d6-9ce8-fb6f34e8fb66","excerpt":"자바스크립트를 공부하면서 var 을 지양하고 const/let 을 지향하세요. 라는 말을 수도없이 들었다. 하지만 왜...? const/let 은 ES2015 에 나왔고, 이전에는 어쩔 수 없이 var를 사용해야만 했다. 그렇다면 현시점에서 왜  을 사용해야하나의 핵심은 var 는 함수 스코프, const/let 은 블록 단위 스코프를 가지기 때문. 이라…","html":"<p>자바스크립트를 공부하면서</p>\n<blockquote>\n<p>var 을 지양하고 const/let 을 지향하세요.</p>\n</blockquote>\n<p>라는 말을 수도없이 들었다. 하지만 왜...?</p>\n<br/>\n<p>const/let 은 ES2015 에 나왔고, 이전에는 어쩔 수 없이 var를 사용해야만 했다.</p>\n<p>그렇다면 현시점에서 왜 <code class=\"language-text\">const/let</code> 을 사용해야하나의 핵심은</p>\n<h4>var 는 함수 스코프,<br/> const/let 은 블록 단위 스코프를 가지기 때문.</h4>\n<p>이라고 생각한다.</p>\n<hr>\n<ul>\n<li>\n<h3>var 사용 테스트</h3>\n</li>\n</ul>\n<p><img src=\"https://images.velog.io/images/sh981013s/post/f55540d2-8b6a-41ba-9ada-e42231a12716/image.png\"></p>\n<p>같은 이름으로 선언 및 재할당까지 하고있음에도 에러가 나지 않고 가장 마지막에 할당한 value 가 나왔다.</p>\n<p><img src=\"https://images.velog.io/images/sh981013s/post/e86ea9ea-41a2-4cb5-b1d6-16d27c31215f/image.png\"></p>\n<p>이런식으로 순서를 바꾼다면? <br/> null 이 아닌 undefined 가 나오며 편하게 재할당까지 할 수 있고, 재할당을 넘어서 재선언(중복선언) 까지 계속할 수 있다.\n<br/> 이는 매우 편하다고 생각할 수 있는데, 지금의 코드는 겨우 9줄이지만, 코드가 많아진다면? 에 대해 고민해봐야 한다.</p>\n<p><img src=\"https://images.velog.io/images/sh981013s/post/77693bf7-86d2-4c47-90b9-7bd66711a480/image.png\"></p>\n<p>위와 같은 코드를 let 으로 바꾼다면 바로 에러가 난다.\n에러 내용을 해석해보면 '이미 선언(Declared)이 되었다고 나온다.'</p>\n<ul>\n<li>\n<h3>스코프 차이에 따른 예시</h3>\n</li>\n</ul>\n<p><img src=\"https://images.velog.io/images/sh981013s/post/2f13d7a1-5e75-4375-a272-0a34f869ef08/image.png\"></p>\n<p>위 코드에서 기대효과는 지역만 바뀌기를 바랬는데,\n전역 공간까지 영향을 주었다. 이는 var 는 함수 단위 스코프인데 이건 함수가 아니기 때문이다. 그러므로, 이를 블럭 단위 스코프로 바꾸지 않는 이상 이러한 위험요소를 항상 가지고 있다는 뜻이다.</p>\n<p><img src=\"https://images.velog.io/images/sh981013s/post/9458cfb4-ccba-4bb4-acb6-4823d5afe82c/image.png\"></p>\n<p>이를 let 으로 바꾸어보았는데, 굉장히 안전하다.\n블럭 안에서 지역변수의 역활을 굉장히 잘 수행하였다. 그리고 전역공간에서는 합당한 값을 보여주었다.\n위처럼 사람이 생각할 만한 결과를 안전하게 생각하기위해 const/let 을 사용한다.</p>","frontmatter":{"title":"JS - var 를 지양하자","date":"November 19, 2021","update":"November 19, 2021","tags":["JS_CleanCode"],"series":"JS_CleanCode"},"fields":{"slug":"/no-var/","readingTime":{"minutes":2.58}}},"seriesList":{"edges":[{"node":{"id":"22a2aed1-aa36-51d6-9ce8-fb6f34e8fb66","fields":{"slug":"/no-var/"},"frontmatter":{"title":"JS - var 를 지양하자"}}},{"node":{"id":"ec9410bb-52dd-553a-b26b-7a01b389e775","fields":{"slug":"/no-global/"},"frontmatter":{"title":"JS - 전역 공간 사용 최소화"}}},{"node":{"id":"b5b959dd-cd6a-580f-8165-824ce6e43c65","fields":{"slug":"/no-temporary-variable/"},"frontmatter":{"title":"JS - 임시변수 제거하기"}}},{"node":{"id":"fc9e3742-bf54-5ffe-a72f-f03f049fc32b","fields":{"slug":"/no-hoisting/"},"frontmatter":{"title":"JS - 호이스팅 주의하기"}}},{"node":{"id":"54d4bb98-9bf4-5b86-92d2-259a7dd4b6f0","fields":{"slug":"/types-of-javascript/"},"frontmatter":{"title":"JS - 타입 검사"}}},{"node":{"id":"c09dfcba-c358-5c45-803e-5b53d39c2e70","fields":{"slug":"/undefined-null/"},"frontmatter":{"title":"JS - undefined & null"}}},{"node":{"id":"2db4eac8-4b7c-5df7-9d45-39f5273aaa85","fields":{"slug":"/no-eqeq/"},"frontmatter":{"title":"JS - eqeq 줄이기"}}}]},"previous":null,"next":{"fields":{"slug":"/no-global/"},"frontmatter":{"title":"JS - 전역 공간 사용 최소화"}}},"pageContext":{"id":"22a2aed1-aa36-51d6-9ce8-fb6f34e8fb66","series":"JS_CleanCode","previousPostId":null,"nextPostId":"ec9410bb-52dd-553a-b26b-7a01b389e775"}},"staticQueryHashes":[]}