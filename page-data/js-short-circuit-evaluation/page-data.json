{"componentChunkName":"component---src-templates-post-jsx","path":"/js-short-circuit-evaluation/","result":{"data":{"site":{"siteMetadata":{"title":"hwani.dev"}},"markdownRemark":{"id":"540e9709-5b2c-5702-af14-f1344e83c064","excerpt":"서론 리액트 프로트를 진행하다보면 위와같은 코드를 심심치 않게 쓴다. 나는 보통 url 을 통해 데이터를 fetching\n하였을때 비동기 처리를 위해 데이터가 있을때만 해당 코드가 동작하게 하는  이구나 하고 \n아무생각 없이 사용하곤 하였다. 그러던 중 해당 코드는 자바스크립트의  라는 개념을\n사용한다는 것을 알게되었고 이에대해 정리하려고 한다. 본론 논…","html":"<h2>서론</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ... 생략</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Root<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>data <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Root<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>리액트 프로트를 진행하다보면 위와같은 코드를 심심치 않게 쓴다. 나는 보통 url 을 통해 데이터를 fetching\n하였을때 비동기 처리를 위해 데이터가 있을때만 해당 코드가 동작하게 하는 <code class=\"language-text\">예외처리</code> 이구나 하고\n아무생각 없이 사용하곤 하였다. 그러던 중 해당 코드는 자바스크립트의 <code class=\"language-text\">논리연산자를 사용한 단축 평가</code> 라는 개념을\n사용한다는 것을 알게되었고 이에대해 정리하려고 한다.</p>\n<hr>\n<h2>본론</h2>\n<ul>\n<li>논리곱(&#x26;&#x26;) 연산자는 두개의 피연산자가 모두 true 로 평가될 때 true 를 반환한다. 논리곱 연산자는 좌항에서 우항으로 평가가 진행된다.</li>\n<li>논리합(||) 연산자는 두개의 피연산자 중 하나만 true 로 평가되어도 true 를 반환한다. 논리합 연산자 또한 좌항에서 우항으로 평가가 진행된다.</li>\n</ul>\n<p>논리곱 연산자와 논리합 연산자는 <code class=\"language-text\">논리 연산의 결과를 결정하는 피연산자</code> 를 타입 변환하지 않고 그대로 반환한다. 이를 단축 평가라 한다.\n단축 평가는 표현식을 평가하는 도중에 평가 결과가 확정된 경우 나머지 평가 과정을 생략하는 것을 뜻한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 논리곱(&amp;&amp;) 연산자</span>\n<span class=\"token string\">'a'</span>   <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'b'</span>   <span class=\"token comment\">// => 'b'</span>\n<span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'b'</span>   <span class=\"token comment\">// => false</span>\n<span class=\"token string\">'a'</span>   <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// => false</span>\n\n<span class=\"token comment\">// 논리합(||) 연산자</span>\n<span class=\"token string\">'a'</span>   <span class=\"token operator\">||</span> <span class=\"token string\">'b'</span>   <span class=\"token comment\">// => 'a'</span>\n<span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token string\">'b'</span>   <span class=\"token comment\">// => 'b'</span>\n<span class=\"token string\">'a'</span>   <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// => 'a'</span></code></pre></div>\n<p>단축 평가를 사용하면 if 문을 대체할 수 있다. 어떤 조건이 true 여야 실행되어야 한다면, 논리곱(&#x26;&#x26;) 연산자 표현식으로\n이를 대체하고, 조건이 false 여야 실행되어야 한다면 논리합(||) 연산자 표현식으로 이를 대체할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> finished <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\nmessage <span class=\"token operator\">=</span> finished <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'완료'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => '완료'</span>\n\nfinished <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\nmessage <span class=\"token operator\">=</span> finished <span class=\"token operator\">||</span> <span class=\"token string\">'미완료'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => '미완료'</span></code></pre></div>\n<hr>\n<h2>결론</h2>\n<p>단축평가에 대해 처음 알아보기 전에는 그냥 비교연산자와 같이 비교하여 true / false 를 반환하는거 아니였나..? 라고 막연하게\n생각하였는데 그렇지 않고 논리 연산의 결과를 <code class=\"language-text\">결정</code> 하는 피연산자를 그대로 타입 변환 없이 그대로 반환한다는 특징을 가지고 있다.\n이를 잘만 사용한다면 리액트를 사용할때, 논리식을 사용하여 데이터가 없거나 아직 비어있을때 에러를 방지하는 처리를 해줄 수 있겠다는 결론에 다달았다.</p>","frontmatter":{"title":"자바스크립트 단축 평가","date":"January 20, 2022","update":"January 20, 2022","tags":["Javascript"],"series":null},"fields":{"slug":"/js-short-circuit-evaluation/","readingTime":{"minutes":3.575}}},"seriesList":{"edges":[{"node":{"id":"a3e16011-856b-598c-88ca-ceebc8364f95","fields":{"slug":"/starbucks-menu-1/"},"frontmatter":{"title":"스타벅스 메뉴관리 with vanilla JS"}}},{"node":{"id":"92ebb2fd-e60e-5a93-88dc-ec9c28596843","fields":{"slug":"/baekjoon-1654/"},"frontmatter":{"title":"[BOJ] 1654 랜선 자르기 (Node.js)"}}},{"node":{"id":"b3bae6a0-d405-5d05-a043-d8638b60e890","fields":{"slug":"/vainllajs-registration-form/"},"frontmatter":{"title":"회원가입 폼 with Vanilla JS"}}},{"node":{"id":"104e0e28-4cfe-50ae-b9b8-3fb3dfc3ad04","fields":{"slug":"/movie-seat-booking/"},"frontmatter":{"title":"영화 좌석 선택 with Vanilla JS"}}},{"node":{"id":"e88b46a1-2475-5adc-80e7-55e7e252e9bd","fields":{"slug":"/exchange-rate-calculator/"},"frontmatter":{"title":"환전기 with Vanilla JS"}}},{"node":{"id":"ae0897e7-cc41-5c3a-89df-0273fdcb487e","fields":{"slug":"/custom-video-player/"},"frontmatter":{"title":"비디오 플레이어 with Vanilla JS"}}},{"node":{"id":"24e65c9a-a50e-5145-b39d-6108376629be","fields":{"slug":"/personal-information-list/"},"frontmatter":{"title":"개인자산 체크 with Vanilla JS"}}},{"node":{"id":"5ba84f09-135a-5975-b10f-4bf758e5f32e","fields":{"slug":"/menu-sidebar-modal/"},"frontmatter":{"title":"사이드바, 모달 with Vanilla JS"}}},{"node":{"id":"b1bd56b2-bd16-58f2-a750-2f0ffd138cb8","fields":{"slug":"/connecting-server-client/"},"frontmatter":{"title":"React && Node.js 연결하기"}}},{"node":{"id":"5cd51722-bb20-58ff-ad03-0d4210931109","fields":{"slug":"/import-react/"},"frontmatter":{"title":"importing React 와 JSX 사용의 상관관계"}}},{"node":{"id":"5f1c97cb-0242-5c0b-8037-626e2ee635de","fields":{"slug":"/vsc-react-autoimport/"},"frontmatter":{"title":"VSC 리액트 auto import"}}},{"node":{"id":"e741c309-2360-56d3-af48-f65bfae7253a","fields":{"slug":"/useRef/"},"frontmatter":{"title":"리액트 useRef"}}},{"node":{"id":"aaaedd63-6139-5da1-8196-3098ae216714","fields":{"slug":"/react-debouncing/"},"frontmatter":{"title":"리액트 디바운싱(debouncing)"}}},{"node":{"id":"b4b91b64-56ec-5f6c-8fc3-5f754204f3a0","fields":{"slug":"/react-debugging/"},"frontmatter":{"title":"리액트 크롬 데브툴 디버깅(debugging)"}}},{"node":{"id":"b030ebe6-631d-5927-b411-78b9a3bf9e85","fields":{"slug":"/js-semicolon/"},"frontmatter":{"title":"자바스크립트 내에서의 세미콜론(;) 사용"}}},{"node":{"id":"540e9709-5b2c-5702-af14-f1344e83c064","fields":{"slug":"/js-short-circuit-evaluation/"},"frontmatter":{"title":"자바스크립트 단축 평가"}}},{"node":{"id":"ac4bb014-16a9-5795-b805-28c631aeb58f","fields":{"slug":"/js-const/"},"frontmatter":{"title":"자바스크립트 const(constant) 키워드 에 대한 고찰"}}},{"node":{"id":"2ed793fe-3639-5ada-af50-48c4e4882fce","fields":{"slug":"/js-single-thread/"},"frontmatter":{"title":"싱글스레드인 자바스크립트는 어떻게 비동기 처리를 하는가"}}},{"node":{"id":"83b07909-0921-5c80-8198-093ac91c69c2","fields":{"slug":"/js-indexOf/"},"frontmatter":{"title":"자바스크립트 indexOf() 와 시간 복잡도의 상관관계에 대한 고찰"}}},{"node":{"id":"b4e2ec83-3483-5fd8-9faa-1390549e9d2f","fields":{"slug":"/2021-retrospect/"},"frontmatter":{"title":"2021년 블로그 운영 회고"}}},{"node":{"id":"16258bc3-0d2f-5d9b-8093-8d37111f8cd4","fields":{"slug":"/react-real-code-splitting/"},"frontmatter":{"title":"리액트 Code-splitting 실적용 사례"}}},{"node":{"id":"e04d0ac0-3384-5291-ab6d-854ec3ae1a06","fields":{"slug":"/mac-kernal-task/"},"frontmatter":{"title":"맥북 kernel_task 과점유 현상"}}},{"node":{"id":"cf4165e2-8e18-58d7-b2aa-cf784ea98da3","fields":{"slug":"/js-async-defer/"},"frontmatter":{"title":"자바스크립트 script 태그 async & defer 속성"}}}]},"previous":{"fields":{"slug":"/js-semicolon/"},"frontmatter":{"title":"자바스크립트 내에서의 세미콜론(;) 사용"}},"next":{"fields":{"slug":"/js-const/"},"frontmatter":{"title":"자바스크립트 const(constant) 키워드 에 대한 고찰"}}},"pageContext":{"id":"540e9709-5b2c-5702-af14-f1344e83c064","series":null,"previousPostId":"b030ebe6-631d-5927-b411-78b9a3bf9e85","nextPostId":"ac4bb014-16a9-5795-b805-28c631aeb58f"}},"staticQueryHashes":[]}