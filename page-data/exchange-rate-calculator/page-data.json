{"componentChunkName":"component---src-templates-post-jsx","path":"/exchange-rate-calculator/","result":{"data":{"site":{"siteMetadata":{"title":"hwani.dev"}},"markdownRemark":{"id":"e88b46a1-2475-5adc-80e7-55e7e252e9bd","excerpt":"Intro 4번째 Mini Vanilla Js Project 이다. 이번에는  라는  를 사용하여 환전 기능을 만들어보았다! Main 소스코드 liveDemo  Conclusion 처음으로 vanillaJS 를 사용하며, third-party api 를 사용해보았다. 기존에 리액트를 배우고 사용했을때는 데이터를 요청하는 방식 자체에 대해서 당연하게 고민도…","html":"<h2>Intro</h2>\n<p>4번째 Mini Vanilla Js Project 이다.</p>\n<p>이번에는 <code class=\"language-text\">ExchangeRate-API</code> 라는 <code class=\"language-text\">Third-party api</code> 를 사용하여 환전 기능을 만들어보았다!</p>\n<hr>\n<h2>Main</h2>\n<ul>\n<li><a href=\"https://github.com/sh981013s/Projects-with-VanillaJs/tree/main/Exchange-Rate-Calculator\">소스코드</a></li>\n<li><a href=\"https://hwani-vanillajs.netlify.app/exchange-rate-calculator/\">liveDemo</a></li>\n</ul>\n<p><img src=\"/static/exchange-cal-71ae4e4d8be5a0e4ebbdda555a79d8eb.gif\"></p>\n<hr>\n<h2>Conclusion</h2>\n<p>처음으로 vanillaJS 를 사용하며, third-party api 를 사용해보았다.</p>\n<p>기존에 리액트를 배우고 사용했을때는 데이터를 요청하는 방식 자체에 대해서 당연하게 고민도 하지 않은채 마구잡이로 남들이 사용하는 방식대로 <code class=\"language-text\">request</code> 나 <code class=\"language-text\">axios</code> 를 썼었는데,</p>\n<p>이번 프로젝트를 진행하며, 브라우저가 자체적으로 <code class=\"language-text\">fetch()</code> 함수를 지원한다는 것을 배웠고, 이를 사용해보았다. 결과는 내 기준에서는 성공적이였고, 고민을 해보았던 점은, 결국 <code class=\"language-text\">request</code>, <code class=\"language-text\">axios</code> 도 같은 <code class=\"language-text\">Http 비동기 통신 library</code> 일텐데</p>\n<p>이들을 대체할 수 있는 내장 함수인 <code class=\"language-text\">fetch()</code> 를 main 으로 사용한다면 <code class=\"language-text\">js bundling size</code> 면에서 유리하지 않을까 였다.</p>\n<p>이 문제에 대해 찾아본 결과, 내 생각대로라면 <code class=\"language-text\">fetch()</code> 를 main 으로 쓰는것이 바람직 할 수 있겠지만, </p>\n<ul>\n<li>지원하지 않는 브라우저가 있다  (...IE11)</li>\n<li>네트워크 에러 발생 시 response timeout 없이 기다려야한다.</li>\n<li>JSON 으로 변환해주는 과정이 필요하다.</li>\n</ul>\n<p>위 세가지의 단점때문에 아직 외부 라이브러리들을 사용을 한다는 의견이 많고,  나의 실력으로써는 더 많이 경험하고 써보면서 각자의 장단점을 몸소 직접 체험하는 수밖에 없을 것 같다.</p>","frontmatter":{"title":"환전기 with Vanilla JS","date":"November 27, 2021","update":"November 27, 2021","tags":["VanillaJS"],"series":null},"fields":{"slug":"/exchange-rate-calculator/","readingTime":{"minutes":2.095}}},"seriesList":{"edges":[{"node":{"id":"a3e16011-856b-598c-88ca-ceebc8364f95","fields":{"slug":"/starbucks-menu-1/"},"frontmatter":{"title":"스타벅스 메뉴관리 with vanilla JS"}}},{"node":{"id":"92ebb2fd-e60e-5a93-88dc-ec9c28596843","fields":{"slug":"/baekjoon-1654/"},"frontmatter":{"title":"[BOJ] 1654 랜선 자르기 (Node.js)"}}},{"node":{"id":"b3bae6a0-d405-5d05-a043-d8638b60e890","fields":{"slug":"/vainllajs-registration-form/"},"frontmatter":{"title":"회원가입 폼 with Vanilla JS"}}},{"node":{"id":"104e0e28-4cfe-50ae-b9b8-3fb3dfc3ad04","fields":{"slug":"/movie-seat-booking/"},"frontmatter":{"title":"영화 좌석 선택 with Vanilla JS"}}},{"node":{"id":"e88b46a1-2475-5adc-80e7-55e7e252e9bd","fields":{"slug":"/exchange-rate-calculator/"},"frontmatter":{"title":"환전기 with Vanilla JS"}}},{"node":{"id":"ae0897e7-cc41-5c3a-89df-0273fdcb487e","fields":{"slug":"/custom-video-player/"},"frontmatter":{"title":"비디오 플레이어 with Vanilla JS"}}},{"node":{"id":"24e65c9a-a50e-5145-b39d-6108376629be","fields":{"slug":"/personal-information-list/"},"frontmatter":{"title":"개인자산 체크 with Vanilla JS"}}},{"node":{"id":"5ba84f09-135a-5975-b10f-4bf758e5f32e","fields":{"slug":"/menu-sidebar-modal/"},"frontmatter":{"title":"사이드바, 모달 with Vanilla JS"}}},{"node":{"id":"b1bd56b2-bd16-58f2-a750-2f0ffd138cb8","fields":{"slug":"/connecting-server-client/"},"frontmatter":{"title":"React && Node.js 연결하기"}}},{"node":{"id":"5cd51722-bb20-58ff-ad03-0d4210931109","fields":{"slug":"/import-react/"},"frontmatter":{"title":"importing React 와 JSX 사용의 상관관계"}}},{"node":{"id":"5f1c97cb-0242-5c0b-8037-626e2ee635de","fields":{"slug":"/vsc-react-autoimport/"},"frontmatter":{"title":"VSC 리액트 auto import"}}},{"node":{"id":"e741c309-2360-56d3-af48-f65bfae7253a","fields":{"slug":"/useRef/"},"frontmatter":{"title":"리액트 useRef"}}},{"node":{"id":"aaaedd63-6139-5da1-8196-3098ae216714","fields":{"slug":"/react-debouncing/"},"frontmatter":{"title":"리액트 디바운싱(debouncing)"}}},{"node":{"id":"b4b91b64-56ec-5f6c-8fc3-5f754204f3a0","fields":{"slug":"/react-debugging/"},"frontmatter":{"title":"리액트 크롬 데브툴 디버깅(debugging)"}}},{"node":{"id":"b030ebe6-631d-5927-b411-78b9a3bf9e85","fields":{"slug":"/js-semicolon/"},"frontmatter":{"title":"자바스크립트 내에서의 세미콜론(;) 사용"}}},{"node":{"id":"540e9709-5b2c-5702-af14-f1344e83c064","fields":{"slug":"/js-short-circuit-evaluation/"},"frontmatter":{"title":"자바스크립트 단축 평가"}}},{"node":{"id":"ac4bb014-16a9-5795-b805-28c631aeb58f","fields":{"slug":"/js-const/"},"frontmatter":{"title":"자바스크립트 const(constant) 키워드 에 대한 고찰"}}},{"node":{"id":"2ed793fe-3639-5ada-af50-48c4e4882fce","fields":{"slug":"/js-single-thread/"},"frontmatter":{"title":"싱글스레드인 자바스크립트는 어떻게 비동기 처리를 하는가"}}},{"node":{"id":"83b07909-0921-5c80-8198-093ac91c69c2","fields":{"slug":"/js-indexOf/"},"frontmatter":{"title":"자바스크립트 indexOf() 와 시간 복잡도의 상관관계에 대한 고찰"}}},{"node":{"id":"16258bc3-0d2f-5d9b-8093-8d37111f8cd4","fields":{"slug":"/react-real-code-splitting/"},"frontmatter":{"title":"리액트 Code-splitting 실적용 사례"}}}]},"previous":{"fields":{"slug":"/movie-seat-booking/"},"frontmatter":{"title":"영화 좌석 선택 with Vanilla JS"}},"next":{"fields":{"slug":"/custom-video-player/"},"frontmatter":{"title":"비디오 플레이어 with Vanilla JS"}}},"pageContext":{"id":"e88b46a1-2475-5adc-80e7-55e7e252e9bd","series":null,"previousPostId":"104e0e28-4cfe-50ae-b9b8-3fb3dfc3ad04","nextPostId":"ae0897e7-cc41-5c3a-89df-0273fdcb487e"}},"staticQueryHashes":[]}