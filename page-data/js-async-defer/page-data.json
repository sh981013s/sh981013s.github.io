{"componentChunkName":"component---src-templates-post-jsx","path":"/js-async-defer/","result":{"data":{"site":{"siteMetadata":{"title":"hwani.dev"}},"markdownRemark":{"id":"cf4165e2-8e18-58d7-b2aa-cf784ea98da3","excerpt":"서론 일반적으로 나는 보통 Vanilla JS 로 프로젝트를 진행할때 \n 태그를 사용하여 \n 파일에  파일을   하는 방식을 일방적으로 떠올렸다.  \n하지만, 보통  태그 내부에  위와 같이 일반적인 방법으로 쓰곤 하였는데, 이때 브라우저의 동작방식은 \n\"엔진 자체가 위에서부터  을  하다가  태그를 만나면, \nHTML 의 Parsing 을 잠시 멈추고 …","html":"<h2>서론</h2>\n<p>일반적으로 나는 보통 Vanilla JS 로 프로젝트를 진행할때 <br>\n<code class=\"language-text\">&lt;script></code> 태그를 사용하여\n<code class=\"language-text\">HTML</code> 파일에 <code class=\"language-text\">Javascript</code> 파일을 <br> <code class=\"language-text\">import</code> 하는 방식을 일방적으로 떠올렸다. <br>\n하지만, 보통 <code class=\"language-text\">&lt;head></code> 태그 내부에 <br></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ko<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">&lt;head</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>이승환<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>위와 같이 일반적인 방법으로 쓰곤 하였는데, 이때 브라우저의 동작방식은 <br>\n\"엔진 자체가 위에서부터 <code class=\"language-text\">HTML</code> 을 <code class=\"language-text\">parsing</code> 하다가 <code class=\"language-text\">script</code> 태그를 만나면, <br>\nHTML 의 Parsing 을 잠시 멈추고 <code class=\"language-text\">JS</code> 파일을 <code class=\"language-text\">fetching</code>  후 <code class=\"language-text\">execute</code> 한다.\" <br></p>\n<p>정도인 것으로 알고 있었다. 이를 단순하게 보면, <br></p>\n<p><code class=\"language-text\">parse HTML</code> => <br>\n<code class=\"language-text\">HTML parsing temporarily blocked</code> => <br>\n<code class=\"language-text\">fetch js</code> => <br>\n<code class=\"language-text\">execute js</code> => <br>\n<code class=\"language-text\">continue parsing HTML</code> => <br>\n<code class=\"language-text\">Done!!</code> <br></p>\n<p>라고 생각할 수 있다. <br>\n이때 만일 해당 <code class=\"language-text\">web application</code> 이 <code class=\"language-text\">js file</code> 에 <br>\n지나치게 많이 의존하고 있는 상황이거나, 인터넷의 속도가 느려 js file 의 <code class=\"language-text\">fetching</code> 및\n<code class=\"language-text\">executing process</code> 시간이 길어지면 사용자는 아무 화면조차 볼 수 없는 상황에 직면할 수 밖에 없다.</p>\n<p>이에따른 해결점에 대해 구글링을 해보았다.</p>\n<hr>\n<h2>본론</h2>\n<h3>body 내부에 script 태그 작성</h3>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ko<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">&lt;head</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>이승환<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>이승환입니다<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>그렇다면 <code class=\"language-text\">body</code> 태그 내부에, 또한 <code class=\"language-text\">최하단에</code> <code class=\"language-text\">script</code> 태그를 사용하는 방식을 <br>\n고려해 볼 수 있다. 이때의 웹브라우저의 동작 방식을 생각해본다면,</p>\n<p><code class=\"language-text\">parse HTML</code> => <br>\n<code class=\"language-text\">when HTML is all ready then fetch js</code> => <br>\n<code class=\"language-text\">execute js</code> => <br>\n<code class=\"language-text\">Done!!</code></p>\n<p>위와 같이 HTML parsing 이 끝나면, <br>\njs fetching 을 시작하고, 해당 작업이 끝나면, <br>\njs file 을 실행한다.</p>\n<p>이때, 인터넷이 느린 사용자는 긴 시간을 기다릴 필요 없이 <br>\n비교적 짧은 시간안에 페이지를 볼 수 있지만, <br>\n문제는 사용자의 <code class=\"language-text\">action</code> 이 <code class=\"language-text\">js file</code> 과 깊은 연관성이 있거나,\n요소의 <code class=\"language-text\">styling</code> 이 <code class=\"language-text\">js</code> 로 이루어져 있다면, <br>\n그야말로 빈 껍대기 뿐인 화면을 보는 상황에 직면하게 된다는 점이다.</p>\n<h3>head 태그 내부에 async 를 사용</h3>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ko<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">&lt;head</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>이승환<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">async</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span> //async\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>이승환입니다<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"language-text\">head</code> 태그 내부에, <code class=\"language-text\">async</code> 를 사용하여 <code class=\"language-text\">js file</code> 을 <code class=\"language-text\">import</code> 한다면, <br>\n웹 브라우저의 동작 방식은</p>\n<p><code class=\"language-text\">parse HTML &amp; fetch js</code> => <br>\n<code class=\"language-text\">when js is all fetched block HTML parsing and execute js</code> => <br>\n<code class=\"language-text\">continue parsing HTML</code> => <br>\n<code class=\"language-text\">Done!</code> <br></p>\n<p>위의 방식을 설명하자면, <br>\n초기 <code class=\"language-text\">HTML</code> 을 <code class=\"language-text\">parsing</code> 하다 <code class=\"language-text\">async</code> property 가 붙은 <code class=\"language-text\">script</code> 태그를 발견하면,\n<code class=\"language-text\">병렬적으로</code> <code class=\"language-text\">HTML parsing</code> 과 <code class=\"language-text\">js fetching</code> 을 <code class=\"language-text\">동시에</code> 한다. <br>\n그후, <code class=\"language-text\">js fetching</code> 이 끝난다면, <code class=\"language-text\">HTML parsing</code> 을 멈춘뒤 <code class=\"language-text\">js file</code> 을 실행한다. <br>\n이후에 마지막으로 멈췄던 <code class=\"language-text\">HTML parsing</code> 을 지속한다.</p>\n<p>뭔가 프로세스 자체가 굉장히 혁신적으로 병렬적 처리를 하며, 완벽해 보이지만,\n이 방식은 HTML parsing 이 끝나기도 전에, js file 이 실행되므로, js file 이\nHTML DOM 요소를 컨트롤 하는 코드가 있다면, 이는 실행되지 않거나 에러를 유발할 수 있다.</p>\n<p>더 이상적인 방식은 없을까?</p>\n<h3>head 태그 내부에 defer 를 사용</h3>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ko<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">&lt;head</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>이승환<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">defer</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span> //defer\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>이승환입니다<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"language-text\">head</code> 태그 내부에, <code class=\"language-text\">defer</code> 를 사용하여 <code class=\"language-text\">js file</code> 을 <code class=\"language-text\">import</code> 한다면, <br>\n웹 브라우저의 동작 방식은</p>\n<p><code class=\"language-text\">parse HTML &amp; fetch js</code> => <br>\n<code class=\"language-text\">when HTML is all parsed execute js</code> => <br>\n<code class=\"language-text\">Done!</code> <br></p>\n<p>일단 한눈에 보기에도 process 자체가 확실히 줄었다! <br>\n설명을 하자면, <code class=\"language-text\">HTML parsing</code> 을 하던 중 <code class=\"language-text\">script defer</code> 를 만나게 되면,\n<code class=\"language-text\">병렬적으로</code> HTML parsing 과 js fetching 을 진행한다. <br>\n그후, HTML parsing 이 완료되면, js file 을 실행한다.</p>\n<p>이 얼마나, 획기적인 방식인가. 사용자가 아무것도 못보는 시간을 단축하면서도,\njs 파일을 병렬적으로 fetching 하면서도, HTML parsing 이 끝나서야 js file 을 실행한다니.</p>\n<hr>\n<h2>결론</h2>\n<p>하다못해 js file 을 import 하는 과정에도 상황에 맞는 방식을 택해야 하며, 고려할 상황이\n꽤 많다는 점을 캐치하게 되었다. 해당 글을 작성했다고 무조건 <code class=\"language-text\">defer</code> 를 써야지! 라고 생각할 것이 아닌,\n모든 방식에 각각의 장단점과 동작원리를 알고 사용하는것이 중요하다고 다시 한번 생각한다.</p>","frontmatter":{"title":"자바스크립트 script 태그 async & defer 속성","date":"February 22, 2022","update":"February 22, 2022","tags":["Javascript"],"series":null},"fields":{"slug":"/js-async-defer/","readingTime":{"minutes":5.965}}},"seriesList":{"edges":[{"node":{"id":"a3e16011-856b-598c-88ca-ceebc8364f95","fields":{"slug":"/starbucks-menu-1/"},"frontmatter":{"title":"스타벅스 메뉴관리 with vanilla JS"}}},{"node":{"id":"92ebb2fd-e60e-5a93-88dc-ec9c28596843","fields":{"slug":"/baekjoon-1654/"},"frontmatter":{"title":"[BOJ] 1654 랜선 자르기 (Node.js)"}}},{"node":{"id":"b3bae6a0-d405-5d05-a043-d8638b60e890","fields":{"slug":"/vainllajs-registration-form/"},"frontmatter":{"title":"회원가입 폼 with Vanilla JS"}}},{"node":{"id":"104e0e28-4cfe-50ae-b9b8-3fb3dfc3ad04","fields":{"slug":"/movie-seat-booking/"},"frontmatter":{"title":"영화 좌석 선택 with Vanilla JS"}}},{"node":{"id":"e88b46a1-2475-5adc-80e7-55e7e252e9bd","fields":{"slug":"/exchange-rate-calculator/"},"frontmatter":{"title":"환전기 with Vanilla JS"}}},{"node":{"id":"ae0897e7-cc41-5c3a-89df-0273fdcb487e","fields":{"slug":"/custom-video-player/"},"frontmatter":{"title":"비디오 플레이어 with Vanilla JS"}}},{"node":{"id":"24e65c9a-a50e-5145-b39d-6108376629be","fields":{"slug":"/personal-information-list/"},"frontmatter":{"title":"개인자산 체크 with Vanilla JS"}}},{"node":{"id":"5ba84f09-135a-5975-b10f-4bf758e5f32e","fields":{"slug":"/menu-sidebar-modal/"},"frontmatter":{"title":"사이드바, 모달 with Vanilla JS"}}},{"node":{"id":"b1bd56b2-bd16-58f2-a750-2f0ffd138cb8","fields":{"slug":"/connecting-server-client/"},"frontmatter":{"title":"React && Node.js 연결하기"}}},{"node":{"id":"5cd51722-bb20-58ff-ad03-0d4210931109","fields":{"slug":"/import-react/"},"frontmatter":{"title":"importing React 와 JSX 사용의 상관관계"}}},{"node":{"id":"5f1c97cb-0242-5c0b-8037-626e2ee635de","fields":{"slug":"/vsc-react-autoimport/"},"frontmatter":{"title":"VSC 리액트 auto import"}}},{"node":{"id":"e741c309-2360-56d3-af48-f65bfae7253a","fields":{"slug":"/useRef/"},"frontmatter":{"title":"리액트 useRef"}}},{"node":{"id":"aaaedd63-6139-5da1-8196-3098ae216714","fields":{"slug":"/react-debouncing/"},"frontmatter":{"title":"리액트 디바운싱(debouncing)"}}},{"node":{"id":"b4b91b64-56ec-5f6c-8fc3-5f754204f3a0","fields":{"slug":"/react-debugging/"},"frontmatter":{"title":"리액트 크롬 데브툴 디버깅(debugging)"}}},{"node":{"id":"b030ebe6-631d-5927-b411-78b9a3bf9e85","fields":{"slug":"/js-semicolon/"},"frontmatter":{"title":"자바스크립트 내에서의 세미콜론(;) 사용"}}},{"node":{"id":"540e9709-5b2c-5702-af14-f1344e83c064","fields":{"slug":"/js-short-circuit-evaluation/"},"frontmatter":{"title":"자바스크립트 단축 평가"}}},{"node":{"id":"ac4bb014-16a9-5795-b805-28c631aeb58f","fields":{"slug":"/js-const/"},"frontmatter":{"title":"자바스크립트 const(constant) 키워드 에 대한 고찰"}}},{"node":{"id":"2ed793fe-3639-5ada-af50-48c4e4882fce","fields":{"slug":"/js-single-thread/"},"frontmatter":{"title":"싱글스레드인 자바스크립트는 어떻게 비동기 처리를 하는가"}}},{"node":{"id":"83b07909-0921-5c80-8198-093ac91c69c2","fields":{"slug":"/js-indexOf/"},"frontmatter":{"title":"자바스크립트 indexOf() 와 시간 복잡도의 상관관계에 대한 고찰"}}},{"node":{"id":"b4e2ec83-3483-5fd8-9faa-1390549e9d2f","fields":{"slug":"/2021-retrospect/"},"frontmatter":{"title":"2021년 블로그 운영 회고"}}},{"node":{"id":"16258bc3-0d2f-5d9b-8093-8d37111f8cd4","fields":{"slug":"/react-real-code-splitting/"},"frontmatter":{"title":"리액트 Code-splitting 실적용 사례"}}},{"node":{"id":"e04d0ac0-3384-5291-ab6d-854ec3ae1a06","fields":{"slug":"/mac-kernal-task/"},"frontmatter":{"title":"맥북 kernel_task 과점유 현상"}}},{"node":{"id":"cf4165e2-8e18-58d7-b2aa-cf784ea98da3","fields":{"slug":"/js-async-defer/"},"frontmatter":{"title":"자바스크립트 script 태그 async & defer 속성"}}}]},"previous":{"fields":{"slug":"/mac-kernal-task/"},"frontmatter":{"title":"맥북 kernel_task 과점유 현상"}},"next":null},"pageContext":{"id":"cf4165e2-8e18-58d7-b2aa-cf784ea98da3","series":null,"previousPostId":"e04d0ac0-3384-5291-ab6d-854ec3ae1a06","nextPostId":null}},"staticQueryHashes":[]}