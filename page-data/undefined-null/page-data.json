{"componentChunkName":"component---src-templates-post-jsx","path":"/undefined-null/","result":{"data":{"site":{"siteMetadata":{"title":"hwani.dev"}},"markdownRemark":{"id":"5fad31a0-fb35-5c1d-9eaa-4ad3101ae8a3","excerpt":"서론  와 , 결국 값으로 쓰기에는 둘다 무언가 없다 라는 것을 의미한다. 인터넷만 봐도 이 둘의 차이때문에 혼란을 겪는 사람이 많고, 이에따라 이를 풍자하는 밈들 또한 많다. 언어적으로 더 엄격하다면 이러한 일도 없겠지만 JS 에서는 헷갈릴 가능성이 높다고 생각한다. 본론 을 뒤집어보면은 true 라고 표현하지만, 을 으로 바꾸면 false 라고 표현한…","html":"<h2>서론</h2>\n<p><code class=\"language-text\">undefined</code> 와 <code class=\"language-text\">null</code>, 결국 값으로 쓰기에는 둘다 무언가 없다 라는 것을 의미한다.</p>\n<p>인터넷만 봐도 이 둘의 차이때문에 혼란을 겪는 사람이 많고, 이에따라 이를 풍자하는 밈들 또한 많다.</p>\n<p>언어적으로 더 엄격하다면 이러한 일도 없겠지만 JS 에서는 헷갈릴 가능성이 높다고 생각한다.</p>\n<hr>\n<h2>본론</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">!</span><span class=\"token keyword\">null</span> <span class=\"token comment\">// true</span>\n<span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token keyword\">null</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token keyword\">null</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// false</span>\n<span class=\"token operator\">!</span><span class=\"token keyword\">null</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token keyword\">null</span> <span class=\"token operator\">+</span> <span class=\"token number\">123</span> <span class=\"token comment\">// 123</span></code></pre></div>\n<p><code class=\"language-text\">null</code>을 뒤집어보면은 true 라고 표현하지만,</p>\n<p><code class=\"language-text\">null</code>을 <code class=\"language-text\">boolean</code>으로 바꾸면 false 라고 표현한다.</p>\n<p>그렇다면 null 은 false 인가? 그것도 아니라고 한다.</p>\n<p>그렇다면 !null 은 true 인가? 맞다고 한다.</p>\n<p>머리가 지끈지끈하다.</p>\n<p>또한, null 은 수학적으로는 <code class=\"language-text\">비어있다</code> 라는 state 를 표현하기에 0으로 간주한다.</p>\n<p>때문에 null 은 비어있다 를 명시적으로 표현한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> variable<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typeof</span> variable <span class=\"token comment\">// undefined</span>\n\n<span class=\"token keyword\">undefined</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span> <span class=\"token comment\">// NaN</span>\n\n<span class=\"token operator\">!</span><span class=\"token keyword\">undefined</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>그렇다면 undefined 는? </p>\n<p><code class=\"language-text\">아무것도 지정하지 않았을 때에 기본값</code> 이라고 생각이 든다.</p>\n<p>변수를 선언하였지만 이에 값을 할당하지 않았다 이다.</p>\n<p>하지만 연산을 시도해 보았을 때 null 은 0 으로 간주되었지만, undefined 는 NaN 즉 not a number 라고 하기에 더더욱 헷갈릴 수 있다.</p>\n<p>또한 !undefined 는 또 true 라고 값이 찍힌다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">undefined</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">undefined</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">// false</span>\n<span class=\"token operator\">!</span><span class=\"token keyword\">undefined</span> <span class=\"token operator\">===</span> <span class=\"token operator\">!</span><span class=\"token keyword\">null</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>위의 예시를 보면 정말 머리가 아플정도로 헷갈리고 모순점들또한 머리에 생기기 마련이다.</p>\n<p>그러므로, undefined 와 null 을 많이 활용하는 코드를 작성하기 보다는, 하나의 팀에서 둘중에 하나만 선택하여 컨벤션 자체를 만드는 것이 좋다고 생각한다.</p>\n<hr>\n<h2>결론</h2>\n<p>undefined 와 null 의 차이점이 많지만,</p>\n<p>undefined 와 null 은 결국 값이 없거나 정의되지 않다는 차이점이 있고,</p>\n<p>undefined 는 NaN 이지만 null 은 숫자적으로 표현하였을때 0에 가깝다.</p>\n<p>undefined 의 type 은 undefined 이지만 null 의 type 은 object 이다.</p>\n<p>그래서, 결국 이 둘의 쓰임을 조심해야만 한다.</p>","frontmatter":{"title":"JS - undefined & null","date":"November 30, 2021","update":"November 30, 2021","tags":["JS_CleanCode"],"series":"JS_CleanCode"},"fields":{"slug":"/undefined-null/","readingTime":{"minutes":2.93}}},"seriesList":{"edges":[{"node":{"id":"3ad93a4b-ef31-52e2-98ff-40052aff7ae5","fields":{"slug":"/no-var/"},"frontmatter":{"title":"JS - var 를 지양하자"}}},{"node":{"id":"ac5983fa-822c-56a4-840b-2d47c94bfc0f","fields":{"slug":"/no-global/"},"frontmatter":{"title":"JS - 전역 공간 사용 최소화"}}},{"node":{"id":"7e67a6be-a154-540b-9e7f-1596601d252d","fields":{"slug":"/no-temporary-variable/"},"frontmatter":{"title":"JS - 임시변수 제거하기"}}},{"node":{"id":"785e2a98-e2eb-581a-bdaf-bb516ee9fab2","fields":{"slug":"/no-hoisting/"},"frontmatter":{"title":"JS - 호이스팅 주의하기"}}},{"node":{"id":"9c8002eb-dd07-5e2a-9975-e372314ee212","fields":{"slug":"/types-of-javascript/"},"frontmatter":{"title":"JS - 타입 검사"}}},{"node":{"id":"5fad31a0-fb35-5c1d-9eaa-4ad3101ae8a3","fields":{"slug":"/undefined-null/"},"frontmatter":{"title":"JS - undefined & null"}}},{"node":{"id":"2ac21fc2-48c2-5c71-8f4f-1bfd1b5892ed","fields":{"slug":"/no-eqeq/"},"frontmatter":{"title":"JS - eqeq 줄이기"}}},{"node":{"id":"82fbaec1-d348-5249-8ecc-a75c1aefc233","fields":{"slug":"/careful-typecast/"},"frontmatter":{"title":"JS - 형변환 주의하기"}}}]},"previous":{"fields":{"slug":"/types-of-javascript/"},"frontmatter":{"title":"JS - 타입 검사"}},"next":{"fields":{"slug":"/no-eqeq/"},"frontmatter":{"title":"JS - eqeq 줄이기"}}},"pageContext":{"id":"5fad31a0-fb35-5c1d-9eaa-4ad3101ae8a3","series":"JS_CleanCode","previousPostId":"9c8002eb-dd07-5e2a-9975-e372314ee212","nextPostId":"2ac21fc2-48c2-5c71-8f4f-1bfd1b5892ed"}},"staticQueryHashes":[]}