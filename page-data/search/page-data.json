{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"임시변수란? 자바스크립트를 다룰때, 기존의 Scope 를 다룰때,   을 사용하지 말고,   또한 피해야 한다고 들었다. 임시변수란, Scope 안에서 전역변수처럼 활용되는 친구를 생각한다. 위의 코드의  도 마찬가지이다.\n어떻게 보면 이것도 const 니까 문제 없을까? 라고 생각 할 수 있지만, 이 임시 객체도 함수가 커지  이나 다름없는 상황이 발생…","fields":{"slug":"/no-temporary-variable/"},"frontmatter":{"date":"November 22, 2021","title":"임시변수 제거하기","tags":["JS_CleanCode"]},"rawMarkdownBody":"\n## 임시변수란?\n\n자바스크립트를 다룰때, 기존의 Scope 를 다룰때, \n\n`전역공간` 을 사용하지 말고,  `var` 또한 피해야 한다고 들었다.\n\n#### 임시변수란, Scope 안에서 전역변수처럼 활용되는 친구를 생각한다.\n\n```javascript\nconst getObj = () => {\n    const result = {};\n    \n    result.title = 'tmp_variable'\n    result.text = 'wow'\n    \n    return result;\n}\n```\n\n위의 코드의 `const result = {}` 도 마찬가지이다.\n어떻게 보면 이것도 const 니까 문제 없을까? 라고 생각 할 수 있지만, 이 임시 객체도 함수가 커지 `전역공간` 이나 다름없는 상황이 발생할 수 있다.\n\n그렇게 되면 위험한 상황이 나올 수 있다. 임시변수를 만들었을때, 누군가가 같이 일하는 팀원이 미래의 내가 유혹을 받을 수 있다는 말이다.\n\n그러면 이 임시 변수를 어떻게 접근 할까에 대해서는, 함수를 작게 쪼개는 방법도 있지만, \n\n```javascript\nconst getObj = () => {\n    const result = {\n      title: 'tmp_variable',\n      text: 'wow',\n    };\n    return result;\n}\n```\n\n이런식으로 간소화 할 수도 있다. 일단은 코드가 명확해지고,\n아까는 굳이 선언 후 접근하는 과정으로 나뉘어있었기 때문에,\n누구나 고칠 수 있는 느낌이 들었다.\n\n하지만, 더 명확하게 바꿀 수 있는 방법이 뭐가 있을까?\n\n```javascript\nconst getObj = () => {\n    return {\n      title: 'tmp_variable',\n      text: 'wow',\n    };\n}\n```\n\n이런식으로 바로 반환하는는 방법또한 존재한다.\n\n그러면, 이 함수는 누가봐도 `side-effect` 가 많지않은, 함수로 볼 수 있다.\n\n---\n\n## 결론\n\n#### 임시변수는 좋지 않다.\n\n임시변수를 제거해야 하는 이유는\n\n명령형으로 가득한 조직이기 때문에, 어디서 어떻게 잘못되었는지 디버깅이 어려워진다.\n\n또한, 타인이 추가적인 코드를 덧붙이고 싶은 유혹에 빠지기 쉽다. 결국 코드의 유지보수가 어려워진다는 것이다.\n\n이에따라 해결책은, 함수를 나누거나, 바로 반환하거나, `map` `filter` `reduce` 와 같은 고차 함수를 사용하는 것이다.\n\n또한, 선언형 코드로 바꾸는 방식을 사용해보든 것이다. \n\n\n\n"},{"excerpt":"결과물 미리보기  CheckLists 메뉴에 새로운 메뉴를 확인 버튼 또는 엔터키 입력으로 추가한다. 메뉴가 추가되고 나면, input은 빈 값으로 초기화한다. 사용자 입력값이 빈 값이라면 추가되지 않는다. 메뉴의 수정 버튼을 눌러 메뉴 이름 수정할 수 있다. 메뉴 수정시 브라우저에서 제공하는  인터페이스를 활용한다. 메뉴 삭제 버튼을 이용하여 메뉴 삭제…","fields":{"slug":"/starbucks-menu-1/"},"frontmatter":{"date":"November 21, 2021","title":"스타벅스 메뉴관리 with vanilla JS","tags":["Vanilla JS"]},"rawMarkdownBody":"\n## 결과물 미리보기\n\n![](123.gif)\n\n## CheckLists\n\n- [x] 메뉴에 새로운 메뉴를 확인 버튼 또는 엔터키 입력으로 추가한다.\n    - [x] 메뉴가 추가되고 나면, input은 빈 값으로 초기화한다.\n    - [x] 사용자 입력값이 빈 값이라면 추가되지 않는다.\n- [x] 메뉴의 수정 버튼을 눌러 메뉴 이름 수정할 수 있다.\n    - [x] 메뉴 수정시 브라우저에서 제공하는 `prompt` 인터페이스를 활용한다.\n- [x] 메뉴 삭제 버튼을 이용하여 메뉴 삭제할 수 있다.\n    - [x] 메뉴 삭제시 브라우저에서 제공하는 `confirm` 인터페이스를 활용한다.\n- [x] 총 메뉴 갯수를 count하여 상단에 보여준다.\n- [x] [localStorage](https://developer.mozilla.org/ko/docs/Web/API/Window/localStorage)에 데이터를 저장하여 새로고침해도 데이터가 남아있게 한다.\n- [x] 지점별로 메뉴판을 관리할 수 있게 만든다.\n- [x] 페이지에 최초로 접근할 때는 국민대 지점 메뉴가 먼저 보이게 한다.\n\n---\n\n## 왜 했는가?\n\n리액트를 공부하며 상태관리에 대해 생각하던 중, 문득 궁금함이 생겼다.\n\n동적인 `web application` 을 만들기 위해 리액트를 공부중 이지만,\n\n결국 리액트도 `javascript library` 일뿐일텐데,\n\n이를 vanilla JS 로 내가 비슷하게라도 흉내내어 리액트 없이 `동적으로 state 관리`란 불가능한것일까..?\n\n찾아보니, `localStorage` 라는 개념이 존재했고, 이를 사용하여 state 관리를 해보았다.\n\n--- \n\n## 후기\n\n결국 구현한건 기본적인 CRUD 일뿐이지만, vanillaJS 를 통해서도 최대한 리액트에서 활용하고 작동하는 방식과\n\n유사하게 만들어 보려고 노력했었다. 🔥\n\n--- \n\n## 데모링크\n\n<p align=\"middle\">\n  <a href=\"https://optimistic-blackwell-8e5882.netlify.app\" target=\"_blank\">🖥️ 데모 링크</a>\n</p>\n\n\n\n\n"},{"excerpt":"SEO 란? SEO 는  의 약자로써, 구글 등 여러 Search Engine 의 상위 노출을 위한  검색엔진 최적화이다. 과정 SEO 를 위해 위와 같이 필요한 정보들을 입력해주었고,  에서 데이터 분석 및, 동작이 제대로 되는지에 대한   정보를 위해,  또한 추가해주었다.  또한,  을 작성하고 제출하여, 정상적으로 search engine 이 나의…","fields":{"slug":"/blog-SEO/"},"frontmatter":{"date":"November 21, 2021","title":"블로그 SEO","tags":["Blog"]},"rawMarkdownBody":"\n## SEO 란? \n\nSEO 는 `Search Engine Optimization` 의 약자로써, 구글 등 여러 Search Engine 의 상위 노출을 위한 \n\n검색엔진 최적화이다.\n\n---\n## 과정\n\nSEO 를 위해\n\n```javascript\nconst SEO = ({ title, description, url }) => {\n  return (\n    <Helmet>\n      <title>{title}</title>\n      <meta property=\"og:url\" content={url} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:image\" content={`${siteUrl}/og-image.png`} />\n      <meta name=\"google-site-verification\" content=\"hidden\" />\n      {description && <meta name=\"description\" content={description} />}\n      {description && <meta property=\"og:description\" content={description} />}\n    </Helmet>\n  )\n}\n```\n\n위와 같이 필요한 정보들을 입력해주었고, `Google Search Console` 에서 데이터 분석 및, 동작이 제대로 되는지에 대한 \n\n`tracking` 정보를 위해, `google-site-verification` 또한 추가해주었다.\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns:news=\"http://www.google.com/schemas/sitemap-news/0.9\" xmlns:xhtml=\"http://www.w3.org/1999/xhtml\" xmlns:mobile=\"http://www.google.com/schemas/sitemap-mobile/1.0\" xmlns:image=\"http://www.google.com/schemas/sitemap-image/1.1\" xmlns:video=\"http://www.google.com/schemas/sitemap-video/1.1\">\n<url> <loc>https://hwani.dev/about-hoodie-kr/</loc> <changefreq>daily</changefreq> <priority>0.7</priority> </url>\n<url> <loc>https://hwani.dev/quick-start-kr/</loc> <changefreq>daily</changefreq> <priority>0.7</priority> </url>\n<url> <loc>https://hwani.dev/writing-guide-kr/</loc> <changefreq>daily</changefreq> <priority>0.7</priority> </url>\n<url> <loc>https://hwani.dev/other-tips-kr/</loc> <changefreq>daily</changefreq> <priority>0.7</priority> </url>\n<url> <loc>https://hwani.dev/no-var/</loc> <changefreq>daily</changefreq> <priority>0.7</priority> </url>\n<url> <loc>https://hwani.dev/no-global/</loc> <changefreq>daily</changefreq> <priority>0.7</priority> </url>\n<url> <loc>https://hwani.dev/starbucks-menu-1/</loc> <changefreq>daily</changefreq> <priority>0.7</priority> </url>\n<url> <loc>https://hwani.dev/series/gatsby-starter-hoodie-로-블로그-시작하기</loc> <changefreq>daily</changefreq> <priority>0.7</priority> </url>\n<url> <loc>https://hwani.dev/series/JS_CleanCode</loc> <changefreq>daily</changefreq> <priority>0.7</priority> </url>\n<url> <loc>https://hwani.dev/</loc> <changefreq>daily</changefreq> <priority>0.7</priority> </url>\n<url> <loc>https://hwani.dev/search/</loc> <changefreq>daily</changefreq> <priority>0.7</priority> </url>\n<url> <loc>https://hwani.dev/series/</loc> <changefreq>daily</changefreq> <priority>0.7</priority> </url>\n<url> <loc>https://hwani.dev/tags/</loc> <changefreq>daily</changefreq> <priority>0.7</priority> </url>\n</urlset>\n```\n\n![](b478fca6.png)\n\n또한, `sitemap` 을 작성하고 제출하여, 정상적으로 search engine 이 나의 `sitemap` 을 참고하도록 설정해주었다.\n\n```txt\nUser-agent: *\nAllow: /\nSitemap: https://hwani.dev/sitemap/sitemap-index.xml\nHost: https://hwani.dev\n\n```\n\n마지막으로는 Robot.txt 파일 또한 수정하고, `Root` 디렉토리에 위치하게 하였다.\n\n---\n\n## 결과\n\n![](ef3b1b5e.png)\n\n네이버를 통한 SEO 간단 체크 결과 모든 항목이 정상적으로 체크되어있었다.\n\n하지만 SEO 부분에서는 아직 모르는 것 투성이고 아직 improved 시킬 수 있다는 판단이 섰다.\n\n추가 사항이 있다면, 추가적으로 연재할 계획이다! \n\n---\n\n## Reference\n\n<a href=\"https://neilpatel.com/what-is-seo/\" target=\"_blank\">What Is SEO? (Learn How to Do It in 5 Minutes)</a>\n\n"},{"excerpt":"전역공간을 왜 사용하면 안되는지, 혹은 왜 사용을 최소화 해야하는지 알아보자. 전역공간 사용을 최소화해라 라는 말 또한 JS 공부를 하며 많이 들었던 내용이고,\n해당 이유에 대해서는 주로 경험에 의하여 누군가 또는 자바스크립트 생태계때문에 강의 혹은 책 에 의하여 회사 또는 멘토에 의하여 Lint 때문에 알 수도 있지만, 경험과 누군가, 책, Lint 때…","fields":{"slug":"/no-global/"},"frontmatter":{"date":"November 20, 2021","title":"전역 공간 사용 최소화","tags":["JS_CleanCode"]},"rawMarkdownBody":"\n### 전역공간을 왜 사용하면 안되는지, 혹은 왜 사용을 최소화 해야하는지 알아보자.\n\n> 전역공간 사용을 최소화해라\n\n라는 말 또한 JS 공부를 하며 많이 들었던 내용이고,\n해당 이유에 대해서는 주로\n\n- 경험에 의하여\n- 누군가 또는 자바스크립트 생태계때문에\n- 강의 혹은 책 에 의하여\n- 회사 또는 멘토에 의하여\n- Lint 때문에\n\n알 수도 있지만, 경험과 누군가, 책, Lint 때문에 최소화했지만, 해당 이유에 대하여 정확히는 생각해보지 않았었다.\n\n---\n\n### 전역공간이란?\n\n전역공간은 말그대로 전역, 최상위 이고,\n대체로 `window` 와 `global`로 나뉜다.\n이유는, 브라우저 환경에서는 window 가 최상위이고,\nnode 환경에서는 global 이 최상위이다.\n\n### 이유에 대한 코드예시\n\n![](https://images.velog.io/images/sh981013s/post/da7e0621-40b3-4303-883d-32b1e17a1b67/image.png)\n\n우선 하나의 html 파일에서는 less_global1.js 와 less_global2.js 를 가져오고 있다.\n\n![](https://images.velog.io/images/sh981013s/post/8652c1a9-3a85-496b-9f64-3eb35039dc29/image.png)\n\nglobal 변수를 선언 및 할당하여 콘솔을 찍어보니 출력이 된다.\n\n![](https://images.velog.io/images/sh981013s/post/f02ed25c-8b9d-4343-9acb-ca7eebf5e71c/image.png)\n\n여기서 문제가 첫번째 js file 에서 선언한 변수가 다른 file 에서도 접근이 가능하고, 또한 몽키패치로 인하여 window.~ 로도 접근이 가능해진다는 것이다. 핵심은 파일을 나눈다고 해도, scope 자체가 나누어지지 않는다는것이다.\n\n---\n\n### 결론\n\n전역공간 사용을 최소화하여 전역공간을 더럽히지 않아야한다.\n이유는, 어디서나 접근이 가능하고 스코프 분리시에 위험이 따른다.\n\n이를 방지하기 위해,\n전역변수를 사용하지 않고 지역변수를 사용하거나,\nwindow.global 을 조작하지 않을 수 있고.\nconst/let 을 사용하는 것만으로도 많은 문제가 해결된다.\n\n"},{"excerpt":"자바스크립트를 공부하면서 var 을 지양하고 const/let 을 지향하세요. 라는 말을 수도없이 들었다. 하지만 왜...? const/let 은 ES2015 에 나왔고, 이전에는 어쩔 수 없이 var를 사용해야만 했다. 그렇다면 현시점에서 왜  을 사용해야하나의 핵심은 var 는 함수 스코프, const/let 은 블록 단위 스코프를 가지기 때문. 이라…","fields":{"slug":"/no-var/"},"frontmatter":{"date":"November 19, 2021","title":"var 를 지양하자","tags":["JS_CleanCode"]},"rawMarkdownBody":"\n\n\n자바스크립트를 공부하면서\n> var 을 지양하고 const/let 을 지향하세요.\n\n라는 말을 수도없이 들었다. 하지만 왜...?\n\n<br/>\n\nconst/let 은 ES2015 에 나왔고, 이전에는 어쩔 수 없이 var를 사용해야만 했다.\n\n그렇다면 현시점에서 왜 ```const/let``` 을 사용해야하나의 핵심은\n\n#### var 는 함수 스코프,<br/> const/let 은 블록 단위 스코프를 가지기 때문.\n\n이라고 생각한다.\n\n---\n\n- ### var 사용 테스트\n\n![](https://images.velog.io/images/sh981013s/post/f55540d2-8b6a-41ba-9ada-e42231a12716/image.png)\n\n같은 이름으로 선언 및 재할당까지 하고있음에도 에러가 나지 않고 가장 마지막에 할당한 value 가 나왔다.\n\n![](https://images.velog.io/images/sh981013s/post/e86ea9ea-41a2-4cb5-b1d6-16d27c31215f/image.png)\n\n이런식으로 순서를 바꾼다면? <br/> null 이 아닌 undefined 가 나오며 편하게 재할당까지 할 수 있고, 재할당을 넘어서 재선언(중복선언) 까지 계속할 수 있다.\n<br/> 이는 매우 편하다고 생각할 수 있는데, 지금의 코드는 겨우 9줄이지만, 코드가 많아진다면? 에 대해 고민해봐야 한다.\n\n![](https://images.velog.io/images/sh981013s/post/77693bf7-86d2-4c47-90b9-7bd66711a480/image.png)\n\n위와 같은 코드를 let 으로 바꾼다면 바로 에러가 난다.\n에러 내용을 해석해보면 '이미 선언(Declared)이 되었다고 나온다.'\n\n- ### 스코프 차이에 따른 예시\n\n![](https://images.velog.io/images/sh981013s/post/2f13d7a1-5e75-4375-a272-0a34f869ef08/image.png)\n\n위 코드에서 기대효과는 지역만 바뀌기를 바랬는데,\n전역 공간까지 영향을 주었다. 이는 var 는 함수 단위 스코프인데 이건 함수가 아니기 때문이다. 그러므로, 이를 블럭 단위 스코프로 바꾸지 않는 이상 이러한 위험요소를 항상 가지고 있다는 뜻이다.\n\n![](https://images.velog.io/images/sh981013s/post/9458cfb4-ccba-4bb4-acb6-4823d5afe82c/image.png)\n\n이를 let 으로 바꾸어보았는데, 굉장히 안전하다.\n블럭 안에서 지역변수의 역활을 굉장히 잘 수행하였다. 그리고 전역공간에서는 합당한 값을 보여주었다.\n위처럼 사람이 생각할 만한 결과를 안전하게 생각하기위해 const/let 을 사용한다.\n\n\n\n\n"}]}},"pageContext":{}},"staticQueryHashes":[]}