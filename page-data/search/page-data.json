{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"결과물 미리보기  CheckLists 메뉴에 새로운 메뉴를 확인 버튼 또는 엔터키 입력으로 추가한다. 메뉴가 추가되고 나면, input은 빈 값으로 초기화한다. 사용자 입력값이 빈 값이라면 추가되지 않는다. 메뉴의 수정 버튼을 눌러 메뉴 이름 수정할 수 있다. 메뉴 수정시 브라우저에서 제공하는  인터페이스를 활용한다. 메뉴 삭제 버튼을 이용하여 메뉴 삭제…","fields":{"slug":"/starbucks-menu-1/"},"frontmatter":{"date":"November 21, 2021","title":"스타벅스 메뉴관리 with vanilla JS","tags":["Vanilla JS"]},"rawMarkdownBody":"\n## 결과물 미리보기\n\n![](123.gif)\n\n## CheckLists\n\n- [x] 메뉴에 새로운 메뉴를 확인 버튼 또는 엔터키 입력으로 추가한다.\n    - [x] 메뉴가 추가되고 나면, input은 빈 값으로 초기화한다.\n    - [x] 사용자 입력값이 빈 값이라면 추가되지 않는다.\n- [x] 메뉴의 수정 버튼을 눌러 메뉴 이름 수정할 수 있다.\n    - [x] 메뉴 수정시 브라우저에서 제공하는 `prompt` 인터페이스를 활용한다.\n- [x] 메뉴 삭제 버튼을 이용하여 메뉴 삭제할 수 있다.\n    - [x] 메뉴 삭제시 브라우저에서 제공하는 `confirm` 인터페이스를 활용한다.\n- [x] 총 메뉴 갯수를 count하여 상단에 보여준다.\n- [x] [localStorage](https://developer.mozilla.org/ko/docs/Web/API/Window/localStorage)에 데이터를 저장하여 새로고침해도 데이터가 남아있게 한다.\n- [x] 지점별로 메뉴판을 관리할 수 있게 만든다.\n- [x] 페이지에 최초로 접근할 때는 국민대 지점 메뉴가 먼저 보이게 한다.\n\n---\n\n## 왜 했는가?\n\n리액트를 공부하며 상태관리에 대해 생각하던 중, 문득 궁금함이 생겼다.\n\n동적인 `web application` 을 만들기 위해 리액트를 공부중 이지만,\n\n결국 리액트도 `javascript library` 일뿐일텐데,\n\n이를 vanilla JS 로 내가 비슷하게라도 흉내내어 리액트 없이 `동적으로 state 관리`란 불가능한것일까..?\n\n찾아보니, `localStorage` 라는 개념이 존재했고, 이를 사용하여 state 관리를 해보았다.\n\n--- \n\n## 후기\n\n결국 구현한건 기본적인 CRUD 일뿐이지만, vanillaJS 를 통해서도 최대한 리액트에서 활용하고 작동하는 방식과\n\n유사하게 만들어 보려고 노력했었다. 🔥\n\n--- \n\n## 데모링크\n\n<p align=\"middle\">\n  <a href=\"https://optimistic-blackwell-8e5882.netlify.app\">🖥️ 데모 링크</a>\n</p>\n\n\n\n\n"},{"excerpt":"전역공간을 왜 사용하면 안되는지, 혹은 왜 사용을 최소화 해야하는지 알아보자. 전역공간 사용을 최소화해라 라는 말 또한 JS 공부를 하며 많이 들었던 내용이고,\n해당 이유에 대해서는 주로 경험에 의하여 누군가 또는 자바스크립트 생태계때문에 강의 혹은 책 에 의하여 회사 또는 멘토에 의하여 Lint 때문에 알 수도 있지만, 경험과 누군가, 책, Lint 때…","fields":{"slug":"/no-global/"},"frontmatter":{"date":"November 20, 2021","title":"전역 공간 사용 최소화","tags":["JS_CleanCode"]},"rawMarkdownBody":"\n### 전역공간을 왜 사용하면 안되는지, 혹은 왜 사용을 최소화 해야하는지 알아보자.\n\n> 전역공간 사용을 최소화해라\n\n라는 말 또한 JS 공부를 하며 많이 들었던 내용이고,\n해당 이유에 대해서는 주로\n\n- 경험에 의하여\n- 누군가 또는 자바스크립트 생태계때문에\n- 강의 혹은 책 에 의하여\n- 회사 또는 멘토에 의하여\n- Lint 때문에\n\n알 수도 있지만, 경험과 누군가, 책, Lint 때문에 최소화했지만, 해당 이유에 대하여 정확히는 생각해보지 않았었다.\n\n---\n\n### 전역공간이란?\n\n전역공간은 말그대로 전역, 최상위 이고,\n대체로 `window` 와 `global`로 나뉜다.\n이유는, 브라우저 환경에서는 window 가 최상위이고,\nnode 환경에서는 global 이 최상위이다.\n\n### 이유에 대한 코드예시\n\n![](https://images.velog.io/images/sh981013s/post/da7e0621-40b3-4303-883d-32b1e17a1b67/image.png)\n\n우선 하나의 html 파일에서는 less_global1.js 와 less_global2.js 를 가져오고 있다.\n\n![](https://images.velog.io/images/sh981013s/post/8652c1a9-3a85-496b-9f64-3eb35039dc29/image.png)\n\nglobal 변수를 선언 및 할당하여 콘솔을 찍어보니 출력이 된다.\n\n![](https://images.velog.io/images/sh981013s/post/f02ed25c-8b9d-4343-9acb-ca7eebf5e71c/image.png)\n\n여기서 문제가 첫번째 js file 에서 선언한 변수가 다른 file 에서도 접근이 가능하고, 또한 몽키패치로 인하여 window.~ 로도 접근이 가능해진다는 것이다. 핵심은 파일을 나눈다고 해도, scope 자체가 나누어지지 않는다는것이다.\n\n---\n\n### 결론\n\n전역공간 사용을 최소화하여 전역공간을 더럽히지 않아야한다.\n이유는, 어디서나 접근이 가능하고 스코프 분리시에 위험이 따른다.\n\n이를 방지하기 위해,\n전역변수를 사용하지 않고 지역변수를 사용하거나,\nwindow.global 을 조작하지 않을 수 있고.\nconst/let 을 사용하는 것만으로도 많은 문제가 해결된다.\n\n"},{"excerpt":"자바스크립트를 공부하면서 var 을 지양하고 const/let 을 지향하세요. 라는 말을 수도없이 들었다. 하지만 왜...? const/let 은 ES2015 에 나왔고, 이전에는 어쩔 수 없이 var를 사용해야만 했다. 그렇다면 현시점에서 왜  을 사용해야하나의 핵심은 var 는 함수 스코프, const/let 은 블록 단위 스코프를 가지기 때문. 이라…","fields":{"slug":"/no-var/"},"frontmatter":{"date":"November 19, 2021","title":"var 를 지양하자","tags":["JS_CleanCode"]},"rawMarkdownBody":"\n\n\n자바스크립트를 공부하면서\n> var 을 지양하고 const/let 을 지향하세요.\n\n라는 말을 수도없이 들었다. 하지만 왜...?\n\n<br/>\n\nconst/let 은 ES2015 에 나왔고, 이전에는 어쩔 수 없이 var를 사용해야만 했다.\n\n그렇다면 현시점에서 왜 ```const/let``` 을 사용해야하나의 핵심은\n\n#### var 는 함수 스코프,<br/> const/let 은 블록 단위 스코프를 가지기 때문.\n\n이라고 생각한다.\n\n---\n\n- ### var 사용 테스트\n\n![](https://images.velog.io/images/sh981013s/post/f55540d2-8b6a-41ba-9ada-e42231a12716/image.png)\n\n같은 이름으로 선언 및 재할당까지 하고있음에도 에러가 나지 않고 가장 마지막에 할당한 value 가 나왔다.\n\n![](https://images.velog.io/images/sh981013s/post/e86ea9ea-41a2-4cb5-b1d6-16d27c31215f/image.png)\n\n이런식으로 순서를 바꾼다면? <br/> null 이 아닌 undefined 가 나오며 편하게 재할당까지 할 수 있고, 재할당을 넘어서 재선언(중복선언) 까지 계속할 수 있다.\n<br/> 이는 매우 편하다고 생각할 수 있는데, 지금의 코드는 겨우 9줄이지만, 코드가 많아진다면? 에 대해 고민해봐야 한다.\n\n![](https://images.velog.io/images/sh981013s/post/77693bf7-86d2-4c47-90b9-7bd66711a480/image.png)\n\n위와 같은 코드를 let 으로 바꾼다면 바로 에러가 난다.\n에러 내용을 해석해보면 '이미 선언(Declared)이 되었다고 나온다.'\n\n- ### 스코프 차이에 따른 예시\n\n![](https://images.velog.io/images/sh981013s/post/2f13d7a1-5e75-4375-a272-0a34f869ef08/image.png)\n\n위 코드에서 기대효과는 지역만 바뀌기를 바랬는데,\n전역 공간까지 영향을 주었다. 이는 var 는 함수 단위 스코프인데 이건 함수가 아니기 때문이다. 그러므로, 이를 블럭 단위 스코프로 바꾸지 않는 이상 이러한 위험요소를 항상 가지고 있다는 뜻이다.\n\n![](https://images.velog.io/images/sh981013s/post/9458cfb4-ccba-4bb4-acb6-4823d5afe82c/image.png)\n\n이를 let 으로 바꾸어보았는데, 굉장히 안전하다.\n블럭 안에서 지역변수의 역활을 굉장히 잘 수행하였다. 그리고 전역공간에서는 합당한 값을 보여주었다.\n위처럼 사람이 생각할 만한 결과를 안전하게 생각하기위해 const/let 을 사용한다.\n\n\n\n\n"},{"excerpt":"파비콘은 어떻게 변경하나요?  에 파비콘 파일이 위치해 있습니다. 이미지 파일을 대체하면 파비콘을 변경할 수 있습니다. 만약 파비콘 파일의 이름을 변경하고 싶다면,  파일의  에서  속성을 변경하셔야합니다. Utterance 가 제대로 작동하지 않아요. http 환경에서는 Utterance 가 제대로 작동하지 않을 수 있습니다. 여러분의 웹사이트를 htt…","fields":{"slug":"/other-tips-kr/"},"frontmatter":{"date":"April 04, 2021","title":"🤩 4. 그 외 팁들","tags":["hoodie","other-tips"]},"rawMarkdownBody":"\n## 파비콘은 어떻게 변경하나요?\n\n`src/images/gatsby-icons.png` 에 파비콘 파일이 위치해 있습니다. 이미지 파일을 대체하면 파비콘을 변경할 수 있습니다.\n\n만약 파비콘 파일의 이름을 변경하고 싶다면, `gatsby-config.js` 파일의 `gatsby-plugin-manifest` 에서 `icon` 속성을 변경하셔야합니다.\n\n## Utterance 가 제대로 작동하지 않아요.\n\nhttp 환경에서는 Utterance 가 제대로 작동하지 않을 수 있습니다. 여러분의 웹사이트를 https 환경으로 제공하세요.\n\n## OG Image 를 설정하고 싶어요.\n\n`/static` 디렉토리의 `og-image.png` 파일을 여러분이 원하는 이미지 파일로 대체하세요.\n\n## 다른 질문이 있으신가요?\n\n이 문서에 댓글을 달거나 gatsby-starter-hoodie 레포지토리에 [이슈를 열어주세요](https://github.com/devHudi/gatsby-starter-hoodie/issues). 여러분의 참여가 gatsby-starter-hoodie 를 더욱 발전시킵니다. 감사해요 😎.\n"},{"excerpt":"1. 포스트 추가하기  경로에 새로운 마크다운 파일을 생성하여 여러분의 글을 추가할 수 있습니다. 1-1. 포스트 파일 구조 새로운 문서를 추가하는 방법에는 두가지가 있습니다. 첫번째는 디렉토리 없이 문서를 생성하는 방법입니다. 만약 여러분이 Javascript 에 관한 문서를 생성한다면,  파일을  디렉토리에 추가할 수 있습니다. 두번째 방법은 먼저 디…","fields":{"slug":"/writing-guide-kr/"},"frontmatter":{"date":"April 03, 2021","title":"🤔 3. 작성 가이드","tags":["hoodie","writing-guide"]},"rawMarkdownBody":"\n## 1. 포스트 추가하기\n\n`contents/post` 경로에 새로운 마크다운 파일을 생성하여 여러분의 글을 추가할 수 있습니다.\n\n### 1-1. 포스트 파일 구조\n\n새로운 문서를 추가하는 방법에는 두가지가 있습니다. 첫번째는 디렉토리 없이 문서를 생성하는 방법입니다. 만약 여러분이 Javascript 에 관한 문서를 생성한다면, `about-javascript.md` 파일을 `contents/posts` 디렉토리에 추가할 수 있습니다.\n\n두번째 방법은 먼저 디렉토리를 생성한 뒤, 디렉토리 안에 `index.md` 파일을 추가하는 것 입니다. 이 방법은 문서 내에 여러 이미지 파일 등 부수적인 파일 여러개가 포함되었을 때 유용합니다.\n\n첫번째 방법으로 생성한 파일명이나, 두번째 방법으로 생성한 디렉토리 이름은 웹사이트에서 고유의 주소를 갖습니다. `https://siteURL/about-javascript` 와 같이요.\n\n### 1-2. Frontmatter\n\n마크다운은 문서의 메타데이터인 Frontmatter 라 불리는 정보를 가지고 있습니다.\n\n```\n---\ntitle: \"🤔 3. 작성 가이드\"\ndescription: \"어떻게 글을 작성하고 추가할까요?\"\ndate: 2021-04-03\nupdate: 2021-04-03\ntags:\n  - hoodie\n  - writing-guide\nseries: \"gatsby-starter-hoodie 로 블로그 시작하기\"\n---\n```\n\n위는 지금 여러분이 읽고 있는 문서의 Frontmatter 입니다. `title` 과 `date` 는 필수 값입니다. 띄어쓰기를 포함된 문자열을 입력할 때에는 따옴표로 감싸는 것을 추천합니다.\n\n### 1-3. 마크다운 작성하기\n\n만약 Frontmatter 까지 작성했다면, 여러분은 그 아래에 마크다운 문서를 작성하면 됩니다. gatsby-starter-hoodie 는 대부분의 마크다운 문법을 지원합니다. 마크다운 작성 방법을 알고 싶다면, Github 의 [Mastering Markdown](https://guides.github.com/features/mastering-markdown/) 문서를 참고하세요.\n\n## 2. 코드 하이라이팅 & Katex\n\n### 2-1. 코드 하이라이팅\n\nPrism.JS 에 기반한 코드 하이라이팅이 제공됩니다.\n\n#### 예시\n\nJavascript\n\n```javascript\nconsole.log(\"Hello, world!\")\n```\n\nPython\n\n```python\nprint(\"Hello, world!\")\n```\n\n그 외 더 많은 언어를 제공합니다. 제공되는 언어를 확인하고 싶다면, [Prism.js 웹사이트](https://prismjs.com/) 를 참고하세요.\n\n### 2-2. Katex\n\nKatex 문법을 지원하여 복잡한 수식도 쉽게 표현할 수 있습니다.\n\n#### 인라인 모드\n\n$$E = m c^{2}$$\n\n#### 블럭 모드\n\n$$\n\\int_{0}^{\\infty} f(x) dx\n$$\n\n## 3. 글에 이미지 추가하기\n\n상대경로를 이용하여 쉽게 이미지를 추가할 수 있습니다. 디렉토리를 생성하고 그 안에 `index.md` 를 추가하여, 글을 추가하는 방법으로 작성해야 이미지 관리가 쉽습니다.\n\n![](sample-image.jpg)\n\n이미지는 Lazy Loading 으로 로드되어, 빠른 초기 문서 로딩 속도를 확보할 수 있습니다.\n\n> ⚠ 이미지의 모든 확장자는 소문자여야합니다.\n\n## 4. 태그\n\n![](tag-example.jpg)\n\nFrontmatter 의 태그를 통해 쉽게 문서를 분류하고 검색할 수 있습니다. 여러분의 모든 태그는 `https://siteUrl/tags` 경로에서 확인하고, 검색할 수 있습니다.\n\n## 5. 시리즈\n\n![](series-example.jpg)\n\n여러분이 연관된 여러개의 문서를 작성할 때 시리즈를 사용할 수 있습니다. Frontmatter 에 작성된 시리즈가 같은 문서끼리 묶여 문서 상단에 리스트로 표시됩니다. 시리즈는 일련의 순서가 있는 문서들을 작성할 때 유용하게 사용할 수 있습니다. 시리즈는 문서의 작성 날짜 순서대로 정렬됩니다.\n\n현재 문서는 `gatsby-starter-hoodie 로 블로그 시작하기` 라는 시리즈로 설정되어 있습니다.\n"},{"excerpt":"아래 단계를 따라서 여러분의 블로그를 시작하세요. 굉장히 쉬워요 😉. 1. Gatsby 사이트 생성 컴퓨터에 node.js 와 gatsby-cli 가 설치되어 있어야합니다. 2. 개발 서버 시작 이제 localhost:8000 으로 여러분의 블로그를 접속할 수 있습니다. 3. Github 레포지토리 생성 Utterance 댓글 위젯은 Github 이슈 시…","fields":{"slug":"/quick-start-kr/"},"frontmatter":{"date":"April 02, 2021","title":"🚀 2. 빠르게 시작하기","tags":["hoodie","quick-start"]},"rawMarkdownBody":"\n아래 단계를 따라서 여러분의 블로그를 시작하세요. 굉장히 쉬워요 😉.\n\n## 1. Gatsby 사이트 생성\n\n> 컴퓨터에 **node.js** 와 **gatsby-cli** 가 설치되어 있어야합니다.\n\n```\n$ npx gatsby new my-hoodie-blog https://github.com/devHudi/gatsby-starter-hoodie\n```\n\n## 2. 개발 서버 시작\n\n```\n$ cd my-hoodie-blog\n$ npm run start\n```\n\n이제 localhost:8000 으로 여러분의 블로그를 접속할 수 있습니다.\n\n## 3. Github 레포지토리 생성\n\nUtterance 댓글 위젯은 **Github 이슈 시스템** 기반입니다. 따라서 각 블로그 별 Github 레포지토리가 필요합니다. 또한 여러분이 Github Pages 혹은 Netlify 로 블로그를 배포하길 원한다면, Github 레포지토리는 필수입니다.\n\n만약 Github 레포지토리를 생성하는 법을 모른다면, [Github 공식 문서](https://docs.github.com/en/github/getting-started-with-github/create-a-repo) 를 참조하세요.\n\n### 원격 레포지토리 등록\n\n```\ngit remote add origin https://github.com/{YOUR_GITHUB_NAME}/{YOUR_REPOSITORY_NAME}\n```\n\n## 4. blog-config.js 작성\n\n```javascript\nmodule.exports = {\n  title: \"MY BLOG\",\n  description: \"Hello, This is my blog\",\n  author: \"YOUR NAME\",\n  siteUrl: \"https://myblog.com\",\n  links: {\n    github: \"https://github.com\",\n    facebook: \"https://www.facebook.com\",\n    instagram: \"https://www.instagram.com\",\n    etc: \"https://www.google.com/\",\n  },\n  utterances: {\n    repo: \"{YOUR_GITHUB_NAME}/{YOUR_REPOSITORY_NAME}\",\n    type: \"pathname\",\n  },\n}\n```\n\ngatsby-starter-hoodie 는 `blog-config.js` 라는 설정 파일을 제공합니다. 이 파일에서 블로그 정보, 작성자 프로필, Utterance 설정 등을 작성할 수 있습니다. 여러분 블로그 설정에 맞게 `blog-config.js` 를 설정하세요. 하지만, `utterances.type` 속성은 수정하지 않는 것을 권장합니다.\n\n### 프로필 이미지 변경\n\n`static/profile.png` 에 위치한 이미지 파일을 원하는 이미지 파일로 교체하세요. 만약 파일명을 변경하고 싶다면, `src/components/ Bio.jsx` 의 소스코드를 수정해야합니다.\n\n## 5. 포스트 추가\n\n마크다운 포스트는 `contents/posts` 경로에 위치해있습니다. 해당 경로에서 글을 작성할 수 있습니다. [여기를 클릭하여](https://devHudi.github.io/gatsby-starter-hoodie/writing-guide) 더 자세한 글 작성 방법을 확인하세요.\n\n## 6. 블로그 배포하기\n\n### 6-1 Netlify 를 통해\n\n[A Step-by-Step Guide: Gatsby on Netlify](https://www.netlify.com/blog/2016/02/24/a-step-by-step-guide-gatsby-on-netlify/) 문서를 참조하여, Netlify 를 Github 레포지토리와 연결할 수 있습니다. 이 과정은 어렵지 않습니다.\n\nGithub 레포지토리와 연결이 되었다면, Github 레포지토리에 변경사항이 발생할 때 마다 자동으로 여러분의 블로그에 배포됩니다.\n\n### 6-2. Github Pages 를 통해\n\n#### 상황 1\n\n레포지토리 이름이 `{YOUR_GITHUB_NAME}.github.io` 형태일 경우, 아래 명령어를 실행해주세요.\n\n```\n$ npm run deploy-gh\n```\n\n#### 상황 2\n\n레포지토리 이름이 `{YOUR_GITHUB_NAME}.github.io` 형태가 아닐 경우, 아래 명령어를 실행해주세요.\n\n```\n$ npm run deploy-gh-prefix-paths\n```\n\n만약 위와 같은 경우 `gatsby-config.js` 에서 `pathPrefix` 를 여러분의 레포지토리 이름으로 바꿔야합니다.\n\n### 6-3. 다른 플랫폼\n\n```\n$ npm run build\n```\n\n위 명령어로 Gastby 웹사이트를 빌드할 수 있습니다. 빌드 결과물은 `/public` 에 저장됩니다. `/public` 디렉토리를 여러분이 사용하는 플랫폼의 배포 명령을 통해 배포해주세요.\n\n## 7. 커스터마이징\n\n### 프로젝트 구조\n\n아래 프로젝트 구조를 참고하여 커스터마이징 할 수 있습니다 🙊.\n\n```\n├── node_modules\n├── contents\n│   └── posts // your articles are here\n├── public // build outputs are here\n└── src\n    ├── assets\n    │   └── theme // theme config is here\n    ├── components\n    │   └── Article\n    │       └── Body\n    │           └── StyledMarkdown\n    │               └── index.jsx // markdown styles are here\n    │   ...\n    ├── fonts // webfonts are here\n    ├── hooks\n    ├── images\n    ├── pages // page components are here\n    ├── reducers\n    ├── templates // post components are here\n    └── utils\n```\n"},{"excerpt":"gatsby-starter-hoodie 에 대하여 gatsby-starter-hoodie 는 기술 블로그를 작성하기 위해 개발된 Gatsby 테마입니다. 마크다운과 많은 프로그래밍 언어의 코드 하이라이팅, 그리고 Katex 문법을 지원합니다. 또한 태그와 시리즈를 통하여 쉽게 게시물을 분류할 수 있습니다. 다크모드를 지원하는 깔끔한 디자인의 gatsby-…","fields":{"slug":"/about-hoodie-kr/"},"frontmatter":{"date":"April 01, 2021","title":"🎇 1. gatsby-starter-hoodie 에 대하여","tags":["hoodie","about"]},"rawMarkdownBody":"\n## gatsby-starter-hoodie 에 대하여\n\ngatsby-starter-hoodie 는 기술 블로그를 작성하기 위해 개발된 Gatsby 테마입니다. 마크다운과 많은 프로그래밍 언어의 코드 하이라이팅, 그리고 Katex 문법을 지원합니다. 또한 태그와 시리즈를 통하여 쉽게 게시물을 분류할 수 있습니다.\n\n다크모드를 지원하는 깔끔한 디자인의 gatsby-starter-hoodie 로 여러분의 블로그를 시작하세요.\n\n## 주요 기능\n\n- 마크다운\n- 코드 하이라이팅\n- Katex 문법\n- 다크모드 (OS 환경설정과 연동)\n- 태그 분류\n- 시리즈 분류\n- 반응형 웹\n- SEO\n- Utterance (댓글 위젯)\n\n## 시작\n\n[빠르게 시작하기](/quick-start-kr) 문서에서 블로그를 세팅하세요.\n"}]}},"pageContext":{}},"staticQueryHashes":[]}