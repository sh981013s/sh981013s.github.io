{"componentChunkName":"component---src-pages-index-jsx","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"hwani.dev"}},"allMarkdownRemark":{"group":[{"fieldValue":"Algo Concepts","totalCount":3},{"fieldValue":"BOJ","totalCount":1},{"fieldValue":"Blog","totalCount":1},{"fieldValue":"JavaScript","totalCount":13},{"fieldValue":"Mac","totalCount":1},{"fieldValue":"React","totalCount":10},{"fieldValue":"React-query","totalCount":1},{"fieldValue":"Recoil","totalCount":1},{"fieldValue":"VanillaJS","totalCount":6},{"fieldValue":"패턴","totalCount":1},{"fieldValue":"회고","totalCount":2}],"nodes":[{"excerpt":"서론  멋쟁이 사자처럼 10기 전체 해커톤에서 우리학교 팀원들과  이라는 물물경매 플랫폼으로 약 900명 / 150팀 중  이라는 좋은 성적을 받게 되었다.  깃헙 링크: https://github.com/bunderLikeLion 하지만 해커톤의 특성상 짧은 시간내로 를 만들어야 했었고, 개발 과정에서 놓치고 지나간 부분이 꽤나 많다는 부분을 인지하고 …","fields":{"slug":"/sellon/"},"frontmatter":{"date":"September 25, 2022","update":"Sep 25, 2022","title":"멋쟁이사자처럼 10기 해커톤 이후 회고","tags":["JavaScript","React","React-query","Recoil","회고"]}},{"excerpt":"서론  이란 개발을 할때 매일매일 사용하고 무조건적으로 이해해야 하는 개념이라 생각한다. JavaScript 에서는 데이터 타입을  나눈다. 하나는  이고, 다른 하나는  타입이다.\n본고에서는 이 둘의 차이점에 대해 다룰 예정이다. 본론 자바스크립트의 원시(primitive)타입. 자바스크립트의 원시타입으로는 , , , , ,  와  총 7 개가 존재한다…","fields":{"slug":"/js-primitive-reference-types/"},"frontmatter":{"date":"June 01, 2022","update":"Jun 01, 2022","title":"자바스크립트 원시(primitive)타입 vs 참조(reference)타입","tags":["JavaScript"]}},{"excerpt":"서론 Node.js 를 사용해  와 같은 알고리즘을 공부하거나 일반적인  메서드를 사용할때도 종종 두 원소를 \n비교하여 조건문이  라면 순서를 바꿔야 (swap) 하는 상황이 종종 생긴다.  두 원소의  바꾸는 행위를  이라 부르는데, 스와핑은 언어에 따라, 성능에 따라, 또한 개개인의 편의 및 선호도에 따라 적용할 수 있는 많은 방법이 있다. 본고에서는…","fields":{"slug":"/js-array-element-swap/"},"frontmatter":{"date":"May 16, 2022","update":"May 16, 2022","title":"자바스크립트 배열 원소 swap","tags":["JavaScript"]}},{"excerpt":"서론 항상 나는 리액트라는 를 올바르게 사용하고 있는지에 대한 고민이 있다.\n망치를 가지고 있다고 가정하였을때 망치 손잡이를 잡을지 아니면 망치 머리 가까이에 손을 위치할지 결정할 수 있다. \n망치 제작자들은 방법을 하지 않지만, 더  방법은 존재하리라 믿는다. 이는 리액트에도 해당되지 않을까 싶다.  본고에서는 단순히 리액트를 사용한다는 관점을 넘어서 …","fields":{"slug":"/react-4-anti-patterns/"},"frontmatter":{"date":"May 01, 2022","update":"May 01, 2022","title":"리액트에서 피해야할 안티패턴","tags":["React","패턴"]}},{"excerpt":"서론  는 먼저 온 소비자가 먼저 서비스를 받는 리소스에 대한 소비자 대기열이라 이해하면 편하다.  는 \n의 특징을 가지고 있다.  본론 Queue with normal array 예시 Queue with Linked List 예시","fields":{"slug":"/js-queue/"},"frontmatter":{"date":"April 20, 2022","update":"Apr 20, 2022","title":"Queue with JS","tags":["JavaScript","Algo Concepts"]}},{"excerpt":"서론 거의 모든 응용 프로그램에 존재하는  기능의 작동원리나 웹 브라우저에서의  버튼의 작동원리를 추적한다면, 스택이 사용되었을 것이라 짐작한다.\n은 작업의 이정상태를 메모리에 저장하여 마지막 상태가 먼저 나타나게 한다. 본론 Stack 의 특징 및 사용 메서드 스택은 기본적으로  원리를 따르며 기본적으로 아래의 세 가지의 메서드를 사용한다. Push: …","fields":{"slug":"/js-stack/"},"frontmatter":{"date":"April 15, 2022","update":"Apr 15, 2022","title":"Stack with JS","tags":["JavaScript","Algo Concepts"]}},{"excerpt":"서론 란 과 유사한 선형 데이터 구조이다. 하지만 대표적인 차이로는 배열과 달리 요소가 특정 메모리 위치나 인덱스에 저장되지 않는다.\n각 요소는 해당 List 의 다음 객체에 대한 포인터 또는 링크를 포함하는 별도의 객체이다.  각 에는 저장된 와 다음 노드에 대한 라는 두 가지의 항목이 포함된다. \n연결 리스트의 진입점을 라고 부르고, 헤드는 연결 목록…","fields":{"slug":"/js-linked-list/"},"frontmatter":{"date":"April 11, 2022","update":"Apr 11, 2022","title":"Linked-list with JS","tags":["JavaScript","Algo Concepts"]}},{"excerpt":"서론 Javascript  메서드란  각 요소에 대한 주어진  를 실행하고,\n하나의 결과값을 반환한다. 나에게는 애증의 관계에 있는 메서드 중 하나이다. 생각보다 복잡한 것 같아서 기피하다가도,\n실제 사용해보면 이는 JS 에서 얼마나 강력한 기능을 가졌는지 매번 느끼게 된다. 보통  는 보편적으로  위와 같이 배열의 전체 합을 구할때 쓰이지만, 익숙해진다…","fields":{"slug":"/js-reduce-break/"},"frontmatter":{"date":"March 28, 2022","update":"Mar 28, 2022","title":"자바스크립트 reduce break","tags":["JavaScript"]}},{"excerpt":"서론 일반적으로 나는 보통 Vanilla JS 로 프로젝트를 진행할때 \n 태그를 사용하여 \n 파일에  파일을   하는 방식을 일방적으로 떠올렸다.  \n하지만, 보통  태그 내부에  위와 같이 일반적인 방법으로 쓰곤 하였는데, 이때 브라우저의 동작방식은 \n\"엔진 자체가 위에서부터  을  하다가  태그를 만나면, \nHTML 의 Parsing 을 잠시 멈추고 …","fields":{"slug":"/js-async-defer/"},"frontmatter":{"date":"February 22, 2022","update":"Feb 22, 2022","title":"자바스크립트 script 태그 async & defer 속성","tags":["JavaScript"]}},{"excerpt":"서론 내 개발환경을 보자면,  를 클렘쉘 모드로 덮어놓고, , ,  를 연결하여\n사용하고 있다. 하지만 줌(Zoom) 을 사용한다던가, 내가 사용하는 무거운? IDE 인 Webstorm 으로 개발을하며, 따로 서버까지 여는경우에는 타자치기가 힘들정도로\n버벅이고 맥북에서는 비행기 이륙하는 소리가 났다. 이러한 현상이 하루에도 수십번 일어나다 보니 도저히 나…","fields":{"slug":"/mac-kernal-task/"},"frontmatter":{"date":"February 16, 2022","update":"Feb 16, 2022","title":"맥북 kernel_task 과점유 현상","tags":["Mac"]}},{"excerpt":"서론 아래의 링크에서 내가 왜 리액트같은 SPA 에서  을 해야하는지에 대해 서술하였지만, 이번에는 내가 현재 진행하고 있는 프로젝트\n내부에서 코드분할 전 후 를 비교하며 결과를 기록하려한다.  https://hwani.dev/react-code-splitting/  본론 SPA (Single Page Application) 의 특성상 맨처음 페이지에 진…","fields":{"slug":"/react-real-code-splitting/"},"frontmatter":{"date":"February 14, 2022","update":"Feb 14, 2022","title":"리액트 Code-splitting 실적용 사례","tags":["React"]}},{"excerpt":"2021년 11월 말부터 블로그 작성을 시작하여 어느덧 3개월 정도가 지난것 같다. 원래는  에 강의를 듣고 이를 정리하는 식으로 진행하고 있었지만, 문뜩 든 생각이,  '이걸 누가 못하는가?' '저작권 법에 정말 문제가 없는가?'  '나에게 어떠한 방식으로 성장의 밑거름이 되었는가?' 정도가 있었다. 결론은, 강의를 듣고 정리하는 글들은 이미 잘하시는 …","fields":{"slug":"/2021-retrospect/"},"frontmatter":{"date":"February 10, 2022","update":"Feb 10, 2022","title":"2021년 블로그 운영 회고","tags":["회고"]}},{"excerpt":"서론 알고리즘을 연습하고 탐구하다 여지껏 쓴 코드들을 보며  에 대해 생각을 해보았다. 적어도 빅오표기법 기준  어쩔 수 없지 라고 생각하며 마구잡이 식으로  내부에  메소드를 남발하고 있었다.   위의 코드를 비교하며 나는 헷갈리기 시작했다.  메소드가 단순히 마법처럼 해당 value 의 index 를 뿅 하고 찾아 리턴해줄까..? \n만일 그렇다면 두개…","fields":{"slug":"/js-indexOf/"},"frontmatter":{"date":"January 29, 2022","update":"Jan 29, 2022","title":"자바스크립트 indexOf() 와 시간 복잡도의 상관관계에 대한 고찰","tags":["JavaScript"]}},{"excerpt":"서론 자바스크립트는 하나의  과 하나의  을 가진 \n 이다. 그러므로 당연히 위에서부터 순차적으로 코드를\n실행하고 다음 코드로 넘어가기 전 실행하고 있는 코드를 끝내야만 한다. 맞다.  는 . 허나, 내 머리를 지끈거리게 만든 점은 코르를 작성하다보면 의도적으로 코드를  하는 행위를 \n심심치 않게 해왔지만,  '도대체 어떻게 싱글스레드인  자바스크립트는 …","fields":{"slug":"/js-single-thread/"},"frontmatter":{"date":"January 24, 2022","update":"Jan 24, 2022","title":"싱글스레드인 자바스크립트는 어떻게 비동기 처리를 하는가","tags":["JavaScript"]}},{"excerpt":"서론 위의 코드는 자바스크립트를 학습한 사람이라면 누구나 에러를 예상할 수 있는 코드이다.\n이유라 하면 변수  은 const 키워드를 사용한 즉, 변하지 않는  을  후 우항의 표현식에 따른 값(1) 을\n 하였기 때문에 값을 변경할 수 없다. 아무런 생각없이 평소에 작성하던 위의 예시와 같은 코드에 대해 생각해보다가 정말 머리가 터지고, 자바스크립트에 대…","fields":{"slug":"/js-const/"},"frontmatter":{"date":"January 23, 2022","update":"Jan 23, 2022","title":"자바스크립트 const(constant) 키워드 에 대한 고찰","tags":["JavaScript"]}},{"excerpt":"서론 리액트 프로트를 진행하다보면 위와같은 코드를 심심치 않게 쓴다. 나는 보통 url 을 통해 데이터를 fetching\n하였을때 비동기 처리를 위해 데이터가 있을때만 해당 코드가 동작하게 하는  이구나 하고 \n아무생각 없이 사용하곤 하였다. 그러던 중 해당 코드는 자바스크립트의  라는 개념을\n사용한다는 것을 알게되었고 이에대해 정리하려고 한다. 본론 논…","fields":{"slug":"/js-short-circuit-evaluation/"},"frontmatter":{"date":"January 20, 2022","update":"Jan 20, 2022","title":"자바스크립트 단축 평가","tags":["JavaScript"]}},{"excerpt":"서론 자바스크립트 내에서 세미콜론(;) 은 언제 사용해야할까? 왜 사용해야할까?  언제 사용해야할까? 나는 흔히 인터넷에서 돌아다니는 말중에 '자바스크립트를 사용할때 \n세미콜론을 생략해도 되지만, 사용하도록 버릇을 들이는게 좋을것이다.' \n라는 대다수의 조언을 받아드려 마구잡이로 사용하고 있었다. 내가 세운 나만의 기준은 당시 '문장의 끝에 단다.' 정도…","fields":{"slug":"/js-semicolon/"},"frontmatter":{"date":"January 18, 2022","update":"Jan 18, 2022","title":"자바스크립트 내에서의 세미콜론(;) 사용","tags":["JavaScript"]}},{"excerpt":"서론 외부 api 를 사용하는 상황에서 Docs 를 읽어본다 한들 실제 데이터의 형태가 어떻게 구성되어있는지 정확히 예상하고 코드를 짜는 행위는 불가능에 가깝다고 생각하고 에러를 유발한다. 나는 데이터 구성을 확인하기 위해 데이터 fetching 후 직접 콘솔로 찍어 확인하는 방법을 사용하였는데, 이는 차후에 코드의 에러를 유발할 수 있고, 자칫 까먹고 …","fields":{"slug":"/react-debugging/"},"frontmatter":{"date":"January 09, 2022","update":"Jan 09, 2022","title":"리액트 크롬 데브툴 디버깅(debugging)","tags":["React"]}},{"excerpt":"서론 가상화폐를 다루는 사이드 프로젝트를 하다가 사용자의  을 받아 검색결과에 맞는 가상화폐들만 보여주어야 하는 Search Input 을 구현하고 있었다.  해당 과정에서 사용자가 input 을 넣은 결과에 따라 output 을 도출해야 하지만, 사용자가 input 을 끝냈는지(마무리했는지) 에 대한 로직을 내가 직접 예측하기에는 무리라 생각이 들었다.…","fields":{"slug":"/react-debouncing/"},"frontmatter":{"date":"January 08, 2022","update":"Jan 08, 2022","title":"리액트 디바운싱(debouncing)","tags":["React"]}},{"excerpt":"서론 Javascript 를 사용할때, 특정 DOM 을 선택하여 정보를 얻거나 임의로 조작해야 할때,  혹은  과 같은 DOM Selector 함수를 사용하여 DOM 을 선택하였다. 하지만, React 는 이 기능을 대체할 수 있는  훅을 제공한다. 본론 useRef는 .current 프로퍼티로 전달된 인자(initialValue)로 초기화된 변경 가능한…","fields":{"slug":"/useRef/"},"frontmatter":{"date":"January 04, 2022","update":"Jan 04, 2022","title":"리액트 useRef","tags":["React"]}},{"excerpt":"서론 나는  을 사용하다가 유료이기도 하고, 나름 에 비교하면 무겁다고 체감이 되어 다시  로 돌아왔는데, \nwebstorm 에서는 훅을 사용할때 따로 import 를 해주지 않더라도 자동적으로 import 를 해주어 이 기능이 대단하단것을 몰랐다.\n따라서, VSC 에서도  기능을 사용 할 수 없는지에 대해 구글링을 해보았다. 본론 결론적으로는 쉽게 가능…","fields":{"slug":"/vsc-react-autoimport/"},"frontmatter":{"date":"January 03, 2022","update":"Jan 03, 2022","title":"VSC 리액트 auto import","tags":["React"]}},{"excerpt":"서론 종종 리액트 공부를 하다보면  문법을 사용할 것이기 때문에  와 같이 리액트를\nimport 해주어야 한다는 말들을 들었다. 하지만 생각해보면 나는 딱히 리액트로 프로젝트를 진행할때, JSX 문법을 사용해야 한다 하더라도 컴포넌트마다 리액트를 import 하는\n행위는 따르지 않고도 문제가 발견되지 않았었다. 본론 이에따라  와  을 통하여 찾아보니, …","fields":{"slug":"/import-react/"},"frontmatter":{"date":"January 02, 2022","update":"Jan 02, 2022","title":"importing React 와 JSX 사용의 상관관계","tags":["React"]}},{"excerpt":"서론 평소 프로젝트를 진행할때, 리액트를 사용한 Client 단만을 만들었는데, 나는 Express.js 에 대한 이해가 어느정도 있긴 하였다. 하지만 항상 느꼈던 점은 어떻게 Server(Node.js) 단과, Client(React ) 단을 동시에 연결할지를 몰랐었고, 알게된 과정을 기록하려 한다. 본론 내가 사용한 모듈 : Express nodemo…","fields":{"slug":"/connecting-server-client/"},"frontmatter":{"date":"December 27, 2021","update":"Dec 27, 2021","title":"React && Node.js 연결하기","tags":["React"]}},{"excerpt":"서론 대부분 React 앱들은 ,  또는  같은 Bundling Tool 을 사용하여 여러 파일을 하나로 병합한  을 웹 패이지에 포함하여 \n한번에 전체 앱을 로드 할 수 있다. 예시) App Bundle 위의 예시는 어떠한 방식으로 Bundling 을 하는지에 대한 예시일 뿐이다. (실제와는 많이 다르다)\n 나  와 같은 툴을 사용한다면 이미 App 자…","fields":{"slug":"/react-code-splitting/"},"frontmatter":{"date":"December 18, 2021","update":"Dec 18, 2021","title":"React - 코드 분할","tags":["React"]}},{"excerpt":"Intro 5번째 Mini Vanilla Js Project 이다. 이번에는  라는  를 사용하여 개인자산 체크 기능을 만들어보았다! Main 소스코드 liveDemo  Conclusion JS 에서 가장 흔하게 사용되는? 메서드인 , , , 를 주축으로 구현을 해보았다. 간편화를 위해, input 으로 user 정보를 받는것이 아닌, 외부 api 를 사…","fields":{"slug":"/personal-information-list/"},"frontmatter":{"date":"November 28, 2021","update":"Nov 28, 2021","title":"개인자산 체크 with Vanilla JS","tags":["VanillaJS"]}},{"excerpt":"Intro 6번째 Mini Vanilla Js Project 이다. 이번에는 순수  와  를 사용하여 Sidebar 와 Modal 을 직접 구현해보았다. Main 소스코드 liveDemo  Conclusion 사실 내가 프로젝트를 진행할때  를 사용했던 이유는 style 적인 이유보다는 JS? 적인 이유가 더 컸다.\n이 뜻은, UI Library 를 사용…","fields":{"slug":"/menu-sidebar-modal/"},"frontmatter":{"date":"November 28, 2021","update":"Nov 28, 2021","title":"사이드바, 모달 with Vanilla JS","tags":["VanillaJS"]}},{"excerpt":"Intro 4번째 Mini Vanilla Js Project 이다. 이번에는  라는  를 사용하여 환전 기능을 만들어보았다! Main 소스코드 liveDemo  Conclusion 처음으로 vanillaJS 를 사용하며, third-party api 를 사용해보았다. 기존에 리액트를 배우고 사용했을때는 데이터를 요청하는 방식 자체에 대해서 당연하게 고민도…","fields":{"slug":"/exchange-rate-calculator/"},"frontmatter":{"date":"November 27, 2021","update":"Nov 27, 2021","title":"환전기 with Vanilla JS","tags":["VanillaJS"]}},{"excerpt":"Intro 새번째 Mini Vanilla Js Project 이다. video api 를 사용하여 비디오 플레이어를 만들어 보았다. Main 소스코드 liveDemo  Conclusion 각 버튼들과 상황에 따른 전반적인 동작 원리와 기능들을 직접 공부하고 구현하려다 보니, 간단할지라도 배우는점이 많았다.  이제 앞으로 프로젝트를 진행하며  태그를 사용해…","fields":{"slug":"/custom-video-player/"},"frontmatter":{"date":"November 27, 2021","update":"Nov 27, 2021","title":"비디오 플레이어 with Vanilla JS","tags":["VanillaJS"]}},{"excerpt":"Intro 두번째 Mini Vanilla Js Project 이다. 이번에는 간단하게 영화 좌석 선택을 만들어보았고, 전과 다른점이 있다면, 이번에는  를 사용하여,  된 후에도 데이터가 남아있게 하였다. Main 소스코드 liveDemo  Conclusion Vanilla JS 프로젝트를 진행하면서,  를 사용할때도,  속성을 사용할 수 있다는 것을 배…","fields":{"slug":"/movie-seat-booking/"},"frontmatter":{"date":"November 26, 2021","update":"Nov 26, 2021","title":"영화 좌석 선택 with Vanilla JS","tags":["VanillaJS"]}},{"excerpt":"Intro 리액트를 공부하거나, 프로젝트를 했으로때 주로 간단한 ui 적인 부분은 라이브러리를 사용하여 해결 했었지만, vanilla JS 를 사용하여 내가 직접 가능한 부분은 공부하여 만들어 보려고 하였다. Main 소스코드 liveDemo  HTML JS","fields":{"slug":"/vainllajs-registration-form/"},"frontmatter":{"date":"November 24, 2021","update":"Nov 24, 2021","title":"회원가입 폼 with Vanilla JS","tags":["VanillaJS"]}},{"excerpt":"백준 1653번 링크 풀이 처음에는 해멧지만, 이후에 \n전형적인 이분탐색 문제라고 판단이 들었다. 이분탐색이란, 탐색 범위를 두 부분으로 분할해서 찾는 방식으로,    값을 잡아서 탐색한다.","fields":{"slug":"/baekjoon-1654/"},"frontmatter":{"date":"November 22, 2021","update":"Nov 22, 2021","title":"[BOJ] 1654 랜선 자르기 (Node.js)","tags":["BOJ"]}},{"excerpt":"SEO 란? SEO 는  의 약자로써, 구글 등 여러 Search Engine 의 상위 노출을 위한  검색엔진 최적화이다. 과정 SEO 를 위해 위와 같이 필요한 정보들을 입력해주었고,  에서 데이터 분석 및, 동작이 제대로 되는지에 대한   정보를 위해,  또한 추가해주었다.  또한,  을 작성하고 제출하여, 정상적으로 search engine 이 나의…","fields":{"slug":"/blog-SEO/"},"frontmatter":{"date":"November 21, 2021","update":"Nov 21, 2021","title":"블로그 SEO","tags":["Blog"]}}]}},"pageContext":{}},"staticQueryHashes":[]}