{"componentChunkName":"component---src-templates-post-jsx","path":"/no-eqeq/","result":{"data":{"site":{"siteMetadata":{"title":"hwani.dev"}},"markdownRemark":{"id":"2db4eac8-4b7c-5df7-9d45-39f5273aaa85","excerpt":"서론  란 JS의 를 뜻한다. mdn 문서에 따르면  두개의 equal signs 은 그냥  라고 부르고,  , 즉 세개의 equal sign 은  라고 부른다.  이 둘은 무시 할 수 없는 크나큰 차이를 불러 일으킨다. 본론 자바스크립트를 보통 '미개한 언어이다.' 혹은 '헷갈리는 언어이다' 라고 생각하시는 분들은 아마 이러한 상황을 겪어본 분들일지도 …","html":"<h2>서론</h2>\n<p><code class=\"language-text\">eqeq</code> 란 JS의 <code class=\"language-text\">동등 연산자</code>를 뜻한다.</p>\n<p>mdn 문서에 따르면 <code class=\"language-text\">==</code> 두개의 equal signs 은 그냥 <code class=\"language-text\">equality operator</code> 라고 부르고, </p>\n<p><code class=\"language-text\">===</code>, 즉 세개의 equal sign 은 <code class=\"language-text\">strict equality opeartor</code> 라고 부른다. </p>\n<p>이 둘은 무시 할 수 없는 크나큰 차이를 불러 일으킨다.</p>\n<hr>\n<h2>본론</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'1'</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token comment\">// true</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>자바스크립트를 보통 '미개한 언어이다.' 혹은 '헷갈리는 언어이다' 라고 생각하시는 분들은 아마 이러한 상황을 겪어본 분들일지도 모른다.</p>\n<p>동등 연산자는 형변환, 즉 <code class=\"language-text\">type casting</code>을 불러 일으킨다.</p>\n<p>위의 예시처럼 동등연산자를 <code class=\"language-text\">strict equlaity operator</code> 가 아닌, 일반 <code class=\"language-text\">equality operator</code> 를 사용한다면, 이렇게 위험한 type casting 이 발생 할 수 있다.</p>\n<p>어떻게 string 과 number 를 비교하는데 true 가 나오고\nnumber 와 boolean 을 비교하는데 true 가 나올 수 있단말인가!</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'1'</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token comment\">// fals</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>그러므로 위처럼 두개의 항을 비교할 때에는 <code class=\"language-text\">strict equality operator</code> 를 사용하는것을 추천한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> inputNum <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#inputNum'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>inputNum<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token comment\">// '0' (string)</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inputNum<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the Number is Zero'</span><span class=\"token punctuation\">)</span> \n  <span class=\"token comment\">// passed</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위처 input 값 자체가 string format 을 뱉어내기 때문에\nstrict equality operator 로 if 연산을 하면 무시해버리게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> inputNum <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#inputNum'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>inputNum<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token comment\">// '0' (string)</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inputNum<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the Number is Zero'</span><span class=\"token punctuation\">)</span> \n  <span class=\"token comment\">// the Number is Zero</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만, 이미 JS의 이런 특성을 파악한 개발자들은 이를 역이용 하여 일반 equality opearator 로 비교하는 방법 또한 생각해낼 수 있지만, 이는 팀원들의 입장에서는 오류를 초래할 수 있기때문에 좋은 방법이라고만은 생각이 들지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> inputNum <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#inputNum'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>inputNum<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token comment\">// '0' (string)</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>inputNum<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the Number is Zero'</span><span class=\"token punctuation\">)</span> \n  <span class=\"token comment\">// the Number is Zero</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그러므로 어떻게든 수동으로라도 형변환을 해서 위와같이 안전하게 strict equality operator 를 사용하는것을 추천한다.</p>\n<hr>\n<h2>결론</h2>\n<p>다른언어에서 동등연산자로 쓰이는 <code class=\"language-text\">==</code> (equality operator)  는 </p>\n<p>JS 에서는 일반, 혹은 느슨한 동등연산자로 불리우며, 이는 강제로 typecasting 을 불러 일으키기 때문에,</p>\n<p>가능하면 이를 지양하는 방식을 택하고, 수동으로 자신이 형변환을 해야하는 상황에 처하더라도 <code class=\"language-text\">===</code> (strict equality operator) 를 지향해야한다.</p>","frontmatter":{"title":"JS - eqeq 줄이기","date":"December 01, 2021","update":"December 01, 2021","tags":["JS_CleanCode"],"series":"JS_CleanCode"},"fields":{"slug":"/no-eqeq/","readingTime":{"minutes":3.14}}},"seriesList":{"edges":[{"node":{"id":"22a2aed1-aa36-51d6-9ce8-fb6f34e8fb66","fields":{"slug":"/no-var/"},"frontmatter":{"title":"JS - var 를 지양하자"}}},{"node":{"id":"ec9410bb-52dd-553a-b26b-7a01b389e775","fields":{"slug":"/no-global/"},"frontmatter":{"title":"JS - 전역 공간 사용 최소화"}}},{"node":{"id":"b5b959dd-cd6a-580f-8165-824ce6e43c65","fields":{"slug":"/no-temporary-variable/"},"frontmatter":{"title":"JS - 임시변수 제거하기"}}},{"node":{"id":"fc9e3742-bf54-5ffe-a72f-f03f049fc32b","fields":{"slug":"/no-hoisting/"},"frontmatter":{"title":"JS - 호이스팅 주의하기"}}},{"node":{"id":"54d4bb98-9bf4-5b86-92d2-259a7dd4b6f0","fields":{"slug":"/types-of-javascript/"},"frontmatter":{"title":"JS - 타입 검사"}}},{"node":{"id":"c09dfcba-c358-5c45-803e-5b53d39c2e70","fields":{"slug":"/undefined-null/"},"frontmatter":{"title":"JS - undefined & null"}}},{"node":{"id":"2db4eac8-4b7c-5df7-9d45-39f5273aaa85","fields":{"slug":"/no-eqeq/"},"frontmatter":{"title":"JS - eqeq 줄이기"}}},{"node":{"id":"683ff5ef-b48f-5c44-b05c-b6c9bf2c0314","fields":{"slug":"/careful-typecast/"},"frontmatter":{"title":"JS - 형변환 주의하기"}}}]},"previous":{"fields":{"slug":"/undefined-null/"},"frontmatter":{"title":"JS - undefined & null"}},"next":{"fields":{"slug":"/careful-typecast/"},"frontmatter":{"title":"JS - 형변환 주의하기"}}},"pageContext":{"id":"2db4eac8-4b7c-5df7-9d45-39f5273aaa85","series":"JS_CleanCode","previousPostId":"c09dfcba-c358-5c45-803e-5b53d39c2e70","nextPostId":"683ff5ef-b48f-5c44-b05c-b6c9bf2c0314"}},"staticQueryHashes":[]}