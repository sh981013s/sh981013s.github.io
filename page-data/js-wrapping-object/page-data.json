{"componentChunkName":"component---src-templates-post-jsx","path":"/js-wrapping-object/","result":{"data":{"site":{"siteMetadata":{"title":"Jason Lee"}},"markdownRemark":{"id":"adcfbb9c-c845-5d03-be55-8fddde63ce29","excerpt":"Intro 오늘 진행한  에서 나눈 대화다. 🙋🏻 아래 코드는 생성자 함수로 생성한  이다. 🙋🏻  변수의 타입은  일테고. 🙋🏻  가 어떻게 이 나오는걸까? 🙋🏻‍♂️ 이 그렇게 변환하는거 아니야? 🙋🏻 그래서 어떻게 변환하길래  와  의 덧셈이 가능한거지? Main 이는  에서 찾을 수 있었다. AdditiveExpression 규칙은 덧셈 연산자(+)가 사용된 경…","html":"<h2>Intro</h2>\n<p>오늘 진행한 <code class=\"language-text\">자바스크립트 스터디</code> 에서 나눈 대화다.</p>\n<p>🙋🏻 아래 코드는 생성자 함수로 생성한 <code class=\"language-text\">String Object</code> 이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </code></pre></div>\n<p>🙋🏻 <code class=\"language-text\">a</code> 변수의 타입은 <code class=\"language-text\">object</code> 일테고.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">typeof</span> a <span class=\"token comment\">// object  </span></code></pre></div>\n<p>🙋🏻 <code class=\"language-text\">a + 2</code> 가 어떻게 <code class=\"language-text\">3</code>이 나오는걸까?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">typeof</span> a cosnsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3  </span></code></pre></div>\n<p>🙋🏻‍♂️ <code class=\"language-text\">JavaScript 엔진</code>이 그렇게 변환하는거 아니야?</p>\n<p>🙋🏻 그래서 어떻게 변환하길래 <code class=\"language-text\">object</code> 와 <code class=\"language-text\">number</code> 의 덧셈이 가능한거지?</p>\n<br/>  \n본고에서는 어떻게 위처럼 결과가 나올 수 있었는지에 대해 다룰 예정이다. 단순 \"`JavaScript 엔진`이 형변환을 한다.\" 라는 개념을 넘어보고 싶었다.   \n  \n---  \n<h2>Main</h2>\n<p>이는 <code class=\"language-text\">ECMAScript 11.6.1 The Addition operator ( + )</code> 에서 찾을 수 있었다.</p>\n<blockquote>\n<p>AdditiveExpression 규칙은 덧셈 연산자(+)가 사용된 경우를 나타냅니다. 이 규칙은 다음과 같이 평가됩니다:</p>\n</blockquote>\n<blockquote>\n<ol>\n<li>AdditiveExpression을 평가한 결과를 lref에 할당합니다.</li>\n<li>lref에서 값(value)을 가져와 lval에 할당합니다. 이때, lval은 앞서 평가된 결과의 원시 값(primitive value)입니다.</li>\n<li>MultiplicativeExpression을 평가한 결과를 rref에 할당합니다.</li>\n<li>rref에서 값(value)을 가져와 rval에 할당합니다. 이때, rval은 앞서 평가된 결과의 원시 값(primitive value)입니다.</li>\n<li>lval과 rval의 원시 값을 구합니다. 이때, ToPrimitive() 메소드를 사용하여 객체 래퍼 타입을 원시 값으로 변환합니다.</li>\n<li>lprim과 rprim의 타입을 비교하여 둘 중 하나라도 문자열(string) 타입이라면, lprim과 rprim을 문자열로 변환하여 이어 붙인 결과를 반환합니다.</li>\n<li>그렇지 않다면, lprim과 rprim을 숫자(number) 타입으로 변환하여 덧셈 연산을 수행합니다.</li>\n</ol>\n</blockquote>\n<p>언뜻 보면 이해가 가지 않을 수 있다. 우선 아래의 과정에서 <code class=\"language-text\">값을 가져온다</code> 는 말은 일반적인 원시 타입이면 간단할 수 있으나, <code class=\"language-text\">객체 wrapper</code> 타입인 경우 말이 달라진다.<br>\nJavaScript 엔진은 연산자나 피연산자가 참조 타입일 때, 해당 값을 가져오기 위해 <code class=\"language-text\">GetValue()</code> 메서드를 사용한다. 이때, <code class=\"language-text\">GetValue()</code> 메서드 내부에서는 해당 값이 객체 <code class=\"language-text\">wrapper 타입</code>인 경우 <code class=\"language-text\">ToPrimitive()</code> 메소드를 사용하여 객체 래퍼를 원시 값으로 변환한 후 반환한다.</p>\n<p>따라서, 참조 타입 값에 대한 연산이 수행될 때, 자바스크립트 엔진은 내부적으로 <code class=\"language-text\">GetValue()</code> 함수와 <code class=\"language-text\">ToPrimitive()</code> 메소드를 사용하여 값을 처리하게 된다.</p>\n<blockquote>\n<ol start=\"2\">\n<li>lref에서 값(value)을 가져와 lval에 할당합니다. 이때, lval은 앞서 평가된 결과의 원시 값(primitive value)입니다.</li>\n</ol>\n</blockquote>\n<p>다시한번 처음에 나왔던 예시를 살펴보자.</p>\n<p><code class=\"language-text\">new Number(1)</code>은 내부적으로 자동으로 <code class=\"language-text\">객체 wrapper</code>를 생성한다.</p>\n<p><code class=\"language-text\">new</code> 키워드를 사용하여 <code class=\"language-text\">Number 생성자 함수</code>를 호출할 때, 반환되는 값은 <code class=\"language-text\">Number 객체 wrapper</code>이다. 따라서, <code class=\"language-text\">new Number(1)</code>은 1이라는 원시 값에 대해 <code class=\"language-text\">Number 객체 wrapper</code>를 생성하는 것이다.</p>\n<p>이렇게 생성된 Number 객체 wrapper는, <code class=\"language-text\">Number.prototype</code> 객체에 정의된 메소드를 포함하여 객체처럼 다양한 기능을 제공한다. 예를 들어, <code class=\"language-text\">toFixed()</code> 메소드를 호출하여 소수점 이하 자리수를 조절할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \ncosnsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3  </span></code></pre></div>\n<p><code class=\"language-text\">new Number(1)</code> 은 내부적으로 자동 객체 wrapper 를 생성하고, 평가시에 <code class=\"language-text\">GetValueOf()</code> 메서드를 사용하여 값을 추출해낸다. 이후 <code class=\"language-text\">ToPrimitive()</code> 메서드를 사용하여 이를 <code class=\"language-text\">원시 타입</code> 으로 형변환 한다.</p>\n<p><code class=\"language-text\">a + 2</code>와 같은 덧셈 연산은 위와 같은 규칙을 따라 <code class=\"language-text\">1 + 2</code> 로 평가되어 연산된다.</p>\n<hr>\n<h2>Wrapping Up</h2>\n<p>위의 과정에서 나왔듯이 객체 래퍼를 사용하는 것이 일반적인 원시 값 처리보다 더 많은 자원을 사용하므로 성능상의 문제가 있을 수 있다.</p>\n<p>또한, 객체 래퍼는 원시 값과는 다르게 불변하지 않다. 따라서, 객체 래퍼를 사용하여 값에 대한 연산을 수행할 경우, 예상치 못한 결과가 발생할 수 있다.</p>\n<p>예를 들어, 다음과 같이 <code class=\"language-text\">== 연산자</code>를 사용하여 객체 래퍼와 원시 값의 비교를 수행하면, 예상치 못한 결과가 발생할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">const</span> numObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> numObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true  </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">===</span> numObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false  </span></code></pre></div>\n<p>이처럼, 객체 래퍼를 사용하여 값을 처리할 때는 위와 같은 예기치 않은 결과가 발생할 가능성이 있으므로 주의해야 한다. 따라서, 가능하다면 원시 값 처리를 우선적으로 고려하는 것이 좋다.</p>\n<hr>","frontmatter":{"title":"[JavaScript] 자바스크립트의 객체 wrapper에 대해 알아보자","date":"March 27, 2023","update":"March 27, 2023","tags":["JavaScript"],"series":null},"fields":{"slug":"/js-wrapping-object/","readingTime":{"minutes":6.255}}},"seriesList":{"edges":[{"node":{"id":"45bc678e-7703-5acd-aafd-a7c0fa93a80c","fields":{"slug":"/baekjoon-1654/"},"frontmatter":{"title":"[BOJ] 1654 랜선 자르기 (Node.js)"}}},{"node":{"id":"028e9080-86df-53bb-a1e9-dbc398328921","fields":{"slug":"/vainllajs-registration-form/"},"frontmatter":{"title":"회원가입 폼 with Vanilla JS"}}},{"node":{"id":"d736c4dd-4d23-5481-97d4-a12694b7fd0c","fields":{"slug":"/movie-seat-booking/"},"frontmatter":{"title":"영화 좌석 선택 with Vanilla JS"}}},{"node":{"id":"950ab322-20a3-506d-be98-95c57b9d5e7f","fields":{"slug":"/exchange-rate-calculator/"},"frontmatter":{"title":"환전기 with Vanilla JS"}}},{"node":{"id":"bfe47c8d-2f18-5cc3-8501-86e865256557","fields":{"slug":"/custom-video-player/"},"frontmatter":{"title":"비디오 플레이어 with Vanilla JS"}}},{"node":{"id":"4b8a65e9-78c3-54b6-8fce-8e518749024c","fields":{"slug":"/personal-information-list/"},"frontmatter":{"title":"개인자산 체크 with Vanilla JS"}}},{"node":{"id":"364ae05f-101b-5720-9ec6-d692d55e0062","fields":{"slug":"/menu-sidebar-modal/"},"frontmatter":{"title":"사이드바, 모달 with Vanilla JS"}}},{"node":{"id":"5abf51b6-6ecd-5d96-879f-5777a606bf0a","fields":{"slug":"/connecting-server-client/"},"frontmatter":{"title":"React && Node.js 연결하기"}}},{"node":{"id":"ac1bef97-c59e-5beb-955b-d8c6e8e742c8","fields":{"slug":"/import-react/"},"frontmatter":{"title":"importing React 와 JSX 사용의 상관관계"}}},{"node":{"id":"2a9c97e2-a6bc-515d-9f47-b1248cf5f9cf","fields":{"slug":"/vsc-react-autoimport/"},"frontmatter":{"title":"VSC 리액트 auto import"}}},{"node":{"id":"bf55c7ac-a772-56fa-b74d-2a0ae1afd342","fields":{"slug":"/useRef/"},"frontmatter":{"title":"리액트 useRef"}}},{"node":{"id":"376677fe-0b5d-57d7-9b3e-95aeb604a67c","fields":{"slug":"/react-debouncing/"},"frontmatter":{"title":"리액트 디바운싱(debouncing)"}}},{"node":{"id":"de4aef09-b0e7-5a98-99a2-d996af28dbff","fields":{"slug":"/react-debugging/"},"frontmatter":{"title":"리액트 크롬 데브툴 디버깅(debugging)"}}},{"node":{"id":"7ddeab05-2689-5d93-a885-948c97b1db0e","fields":{"slug":"/js-semicolon/"},"frontmatter":{"title":"자바스크립트 내에서의 세미콜론(;) 사용"}}},{"node":{"id":"63903bd1-952c-5d18-a931-a4adf22668c4","fields":{"slug":"/js-short-circuit-evaluation/"},"frontmatter":{"title":"자바스크립트 단축 평가"}}},{"node":{"id":"9ab7110e-3675-5155-a3d2-773f12f2b7fc","fields":{"slug":"/js-const/"},"frontmatter":{"title":"자바스크립트 const(constant) 키워드 에 대한 고찰"}}},{"node":{"id":"ef98c32c-b112-56b5-8750-2a65f29a76f8","fields":{"slug":"/js-single-thread/"},"frontmatter":{"title":"싱글스레드인 자바스크립트는 어떻게 비동기 처리를 하는가"}}},{"node":{"id":"50d11bc0-654a-525a-9cd5-220a2335dfc6","fields":{"slug":"/js-indexOf/"},"frontmatter":{"title":"자바스크립트 indexOf() 와 시간 복잡도의 상관관계에 대한 고찰"}}},{"node":{"id":"e83d28ae-8193-56f4-9504-165a7670ea8c","fields":{"slug":"/2021-retrospect/"},"frontmatter":{"title":"2021년 블로그 운영 회고"}}},{"node":{"id":"2f3f5cd2-f838-50db-9e87-f864a0082032","fields":{"slug":"/react-real-code-splitting/"},"frontmatter":{"title":"리액트 Code-splitting 실적용 사례"}}},{"node":{"id":"3653cebd-84f0-5d9f-b911-7e3380e26d2f","fields":{"slug":"/mac-kernal-task/"},"frontmatter":{"title":"맥북 kernel_task 과점유 현상"}}},{"node":{"id":"ac8423e7-cc42-5cf5-8f71-2d94b816c3cc","fields":{"slug":"/js-async-defer/"},"frontmatter":{"title":"자바스크립트 script 태그 async & defer 속성"}}},{"node":{"id":"7500a096-2419-500f-9c14-f6faa8a8b733","fields":{"slug":"/js-reduce-break/"},"frontmatter":{"title":"자바스크립트 reduce break"}}},{"node":{"id":"862d4423-5868-5d5d-ae40-0996bf878f09","fields":{"slug":"/js-linked-list/"},"frontmatter":{"title":"Linked-list with JS"}}},{"node":{"id":"ce965688-bfc1-5d9e-9fa2-87faec37db48","fields":{"slug":"/js-stack/"},"frontmatter":{"title":"Stack with JS"}}},{"node":{"id":"3fb03326-51d0-5ea4-8f03-157013d29817","fields":{"slug":"/js-queue/"},"frontmatter":{"title":"Queue with JS"}}},{"node":{"id":"2de45d5f-9115-5e85-a7a4-199ed24049b7","fields":{"slug":"/react-4-anti-patterns/"},"frontmatter":{"title":"리액트에서 피해야할 안티패턴"}}},{"node":{"id":"0df70305-6854-532e-b7ed-bf1afa0a0f3b","fields":{"slug":"/js-array-element-swap/"},"frontmatter":{"title":"자바스크립트 배열 원소 swap"}}},{"node":{"id":"7c241801-fc74-5e9f-ad4d-0857819cdd2a","fields":{"slug":"/js-primitive-reference-types/"},"frontmatter":{"title":"자바스크립트 원시(primitive)타입 vs 참조(reference)타입"}}},{"node":{"id":"c02c0083-deea-51d2-b3a9-f8b5dbecba19","fields":{"slug":"/react-automatic-batching/"},"frontmatter":{"title":"React 18 Automatic Batching: 렌더링 성능 향상의 무기"}}},{"node":{"id":"e3b5900a-32b4-5091-8025-7ca64a558e5a","fields":{"slug":"/sellon/"},"frontmatter":{"title":"멋쟁이사자처럼 10기 해커톤 이후 회고"}}},{"node":{"id":"6e309f62-7717-5898-b10d-ed350c7a5e9b","fields":{"slug":"/oohtech-success/"},"frontmatter":{"title":"우아한 테크코스 5기 프론트엔드 최종합격 후기 및 과정"}}},{"node":{"id":"46073002-10b1-599c-8d84-99d4ebb7cb78","fields":{"slug":"/js-global-state-management-vanilla-js/"},"frontmatter":{"title":"Vanilla JS 로 간단한 전역 상태 관리 시스템 만들기"}}},{"node":{"id":"5dae62fe-064f-5acf-8114-7e5f4d22a1e3","fields":{"slug":"/ts-non-null-assertion-operator/"},"frontmatter":{"title":"[Typescript] Non-null assertion operator ! (non-null 단언 연산자)"}}},{"node":{"id":"47305df1-1dc7-5b3c-b334-dcc9922f4cd6","fields":{"slug":"/woowacourse-first-month/"},"frontmatter":{"title":"🦉 부엉이의 함께 자라기 in 우테코"}}},{"node":{"id":"adcfbb9c-c845-5d03-be55-8fddde63ce29","fields":{"slug":"/js-wrapping-object/"},"frontmatter":{"title":"[JavaScript] 자바스크립트의 객체 wrapper에 대해 알아보자"}}},{"node":{"id":"9354e08d-30df-548f-a9df-b62ce6e5616c","fields":{"slug":"/woowacourse-level-one/"},"frontmatter":{"title":"우테코 레벨1 회고"}}},{"node":{"id":"c8c5c807-030d-5002-9827-ae80fe4a4c42","fields":{"slug":"/am-i-doing-good/"},"frontmatter":{"title":"나는 올바르게 성장하고 있는가"}}}]},"previous":{"fields":{"slug":"/woowacourse-first-month/"},"frontmatter":{"title":"🦉 부엉이의 함께 자라기 in 우테코"}},"next":{"fields":{"slug":"/woowacourse-level-one/"},"frontmatter":{"title":"우테코 레벨1 회고"}}},"pageContext":{"id":"adcfbb9c-c845-5d03-be55-8fddde63ce29","series":null,"previousPostId":"47305df1-1dc7-5b3c-b334-dcc9922f4cd6","nextPostId":"9354e08d-30df-548f-a9df-b62ce6e5616c"}},"staticQueryHashes":[]}